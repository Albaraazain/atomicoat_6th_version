{
    "sourceFile": "lib/core/utils/data_point_cache.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376761209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376761209,
            "name": "Commit-0",
            "content": "\r\n\r\nimport '../../features/components/models/data_point.dart';\r\n\r\nclass DataPointCache {\r\n  final Map<String, Map<String, List<DataPoint>>> _cache = {};\r\n  static const int DEFAULT_MAX_POINTS = 1000;\r\n\r\n  void addDataPoint(\r\n    String componentId,\r\n    String parameter,\r\n    DataPoint dataPoint, {\r\n    int maxPoints = DEFAULT_MAX_POINTS,\r\n  }) {\r\n    _cache.putIfAbsent(componentId, () => {});\r\n    _cache[componentId]!.putIfAbsent(parameter, () => []);\r\n\r\n    final points = _cache[componentId]![parameter]!;\r\n    points.add(dataPoint);\r\n\r\n    if (points.length > maxPoints) {\r\n      points.removeAt(0);\r\n    }\r\n  }\r\n\r\n  List<DataPoint> getDataPoints(String componentId, String parameter) {\r\n    return _cache[componentId]?[parameter] ?? [];\r\n  }\r\n\r\n  void clearComponentData(String componentId) {\r\n    _cache.remove(componentId);\r\n  }\r\n\r\n  void clearParameterData(String componentId, String parameter) {\r\n    _cache[componentId]?.remove(parameter);\r\n  }\r\n\r\n  void clearAll() {\r\n    _cache.clear();\r\n  }\r\n\r\n  bool hasData(String componentId, String parameter) {\r\n    return _cache[componentId]?[parameter]?.isNotEmpty ?? false;\r\n  }\r\n\r\n  DataPoint? getLatestDataPoint(String componentId, String parameter) {\r\n    final points = _cache[componentId]?[parameter];\r\n    return points?.isNotEmpty == true ? points!.last : null;\r\n  }\r\n\r\n  List<DataPoint> getDataPointsInRange(\r\n    String componentId,\r\n    String parameter,\r\n    DateTime start,\r\n    DateTime end,\r\n  ) {\r\n    final points = _cache[componentId]?[parameter] ?? [];\r\n    return points.where((point) {\r\n      return point.timestamp.isAfter(start) && point.timestamp.isBefore(end);\r\n    }).toList();\r\n  }\r\n}"
        }
    ]
}