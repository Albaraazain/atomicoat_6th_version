{
    "sourceFile": "lib/core/app/app_bootstrap.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734432541773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734464523988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/core/app/app_bootstrap.dart\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_crashlytics/firebase_crashlytics.dart';\r\n import 'package:flutter/material.dart';\r\n \r\n@@ -8,21 +9,21 @@\n     try {\r\n       WidgetsFlutterBinding.ensureInitialized();\r\n \r\n       // Initialize Firebase if not already initialized\r\n-      if (Firebase.apps.isEmpty) {\r\n-        await Firebase.initializeApp();\r\n-      }\r\n+      await Firebase.initializeApp();\r\n \r\n+      // Log successful initialization\r\n+      debugPrint('Firebase initialized successfully');\r\n+\r\n       // Initialize Crashlytics\r\n       await FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);\r\n       FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\r\n \r\n       // Initialize other services here\r\n       await _createFirestoreIndexes();\r\n     } catch (e, stack) {\r\n-      print('Initialization error: $e');\r\n-      print(stack);\r\n+      debugPrint('Failed to initialize Firebase: $e\\n$stack');\r\n       rethrow;\r\n     }\r\n   }\r\n \r\n@@ -43,8 +44,8 @@\n           'queryScope': 'COLLECTION'\r\n         }]\r\n       });\r\n     } catch (e) {\r\n-      print('Error creating Firestore indexes: $e');\r\n+      debugPrint('Error creating Firestore indexes: $e');\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734465788699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,28 +2,29 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_crashlytics/firebase_crashlytics.dart';\r\n import 'package:flutter/material.dart';\r\n+import '../initialization/component_initializer.dart';\r\n \r\n class AppBootstrap {\r\n   static Future<void> initialize() async {\r\n     try {\r\n       WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n-      // Initialize Firebase if not already initialized\r\n       await Firebase.initializeApp();\r\n \r\n-      // Log successful initialization\r\n-      debugPrint('Firebase initialized successfully');\r\n+      // Initialize system components\r\n+      await ComponentInitializer.initializeSystemComponents();\r\n \r\n+      debugPrint('Firebase and components initialized successfully');\r\n+\r\n       // Initialize Crashlytics\r\n       await FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);\r\n       FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\r\n \r\n       // Initialize other services here\r\n       await _createFirestoreIndexes();\r\n     } catch (e, stack) {\r\n-      debugPrint('Failed to initialize Firebase: $e\\n$stack');\r\n+      debugPrint('Failed to initialize app: $e\\n$stack');\r\n       rethrow;\r\n     }\r\n   }\r\n \r\n"
                }
            ],
            "date": 1734432541773,
            "name": "Commit-0",
            "content": "// lib/core/app/app_bootstrap.dart\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nclass AppBootstrap {\r\n  static Future<void> initialize() async {\r\n    try {\r\n      WidgetsFlutterBinding.ensureInitialized();\r\n\r\n      // Initialize Firebase if not already initialized\r\n      if (Firebase.apps.isEmpty) {\r\n        await Firebase.initializeApp();\r\n      }\r\n\r\n      // Initialize Crashlytics\r\n      await FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);\r\n      FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\r\n\r\n      // Initialize other services here\r\n      await _createFirestoreIndexes();\r\n    } catch (e, stack) {\r\n      print('Initialization error: $e');\r\n      print(stack);\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  static Future<void> _createFirestoreIndexes() async {\r\n    try {\r\n      final firestore = FirebaseFirestore.instance;\r\n      final indexDoc = await firestore.collection('alarms').doc('__indexes__').get();\r\n\r\n      if (indexDoc.exists) return;\r\n\r\n      await firestore.collection('alarms').doc('__indexes__').set({\r\n        'composite_indexes': [{\r\n          'fields': [\r\n            {'fieldPath': 'acknowledged', 'order': 'ASCENDING'},\r\n            {'fieldPath': 'timestamp', 'order': 'DESCENDING'},\r\n            {'fieldPath': '__name__', 'order': 'DESCENDING'}\r\n          ],\r\n          'queryScope': 'COLLECTION'\r\n        }]\r\n      });\r\n    } catch (e) {\r\n      print('Error creating Firestore indexes: $e');\r\n    }\r\n  }\r\n}"
        }
    ]
}