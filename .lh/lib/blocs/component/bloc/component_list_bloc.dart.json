{
    "sourceFile": "lib/blocs/component/bloc/component_list_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734044550203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734070552680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,17 @@\n   final String? userId;\r\n   const LoadComponents({this.userId});\r\n \r\n   @override\r\n-  List<Object?> get props => [userId];\r\n+  List<Object> get props => [userId ?? ''];\r\n }\r\n \r\n class ClearAllComponents extends ComponentListEvent {\r\n   final String? userId;\r\n   const ClearAllComponents({this.userId});\r\n \r\n   @override\r\n-  List<Object?> get props => [userId];\r\n+  List<Object> get props => [userId ?? ''];\r\n }\r\n \r\n class ActivateComponents extends ComponentListEvent {\r\n   final List<String> componentIds;\r\n@@ -36,9 +36,9 @@\n \r\n   const ActivateComponents(this.componentIds, {this.userId});\r\n \r\n   @override\r\n-  List<Object?> get props => [componentIds, userId];\r\n+  List<Object> get props => [componentIds, userId ?? ''];\r\n }\r\n \r\n class CheckSystemReadiness extends ComponentListEvent {}\r\n \r\n@@ -142,9 +142,9 @@\n \r\n       emit(state.copyWith(components: updatedComponents));\r\n \r\n       // Persist to repository\r\n-      await _repository.saveComponent(event.component);\r\n+      await _repository.saveComponentState(event.component);\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n   }\r\n@@ -166,13 +166,8 @@\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n   }\r\n \r\n-  void _setupComponentsSubscription() {\r\n-    // Implement real-time updates subscription if needed\r\n-    // This would depend on your Firestore implementation\r\n-  }\r\n-\r\n   @override\r\n   Future<void> close() {\r\n     _componentsSubscription?.cancel();\r\n     return super.close();\r\n"
                },
                {
                    "date": 1734070691190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// lib/blocs/component/bloc/component_list_bloc.dart\r\n+\r\n+import 'dart:async';\r\n+import 'package:bloc/bloc.dart';\r\n+import 'package:equatable/equatable.dart';\r\n+import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n+import '../repository/component_repository.dart';\r\n+\r\n+// Events\r\n+abstract class ComponentListEvent extends Equatable {\r\n+  const ComponentListEvent();\r\n+\r\n+  @override\r\n+  List<Object> get props => [];\r\n+}\r\n+\r\n+class LoadComponents extends ComponentListEvent {\r\n+  final String? userId;\r\n+  const LoadComponents({this.userId});\r\n+\r\n+  @override\r\n+  List<Object> get props => [userId ?? ''];\r\n+}\r\n+\r\n+class ClearAllComponents extends ComponentListEvent {\r\n+  final String? userId;\r\n+  const ClearAllComponents({this.userId});\r\n+\r\n+  @override\r\n+  List<Object> get props => [userId ?? ''];\r\n+}\r\n+\r\n+class ActivateComponents extends ComponentListEvent {\r\n+  final List<String> componentIds;\r\n+  final String? userId;\r\n+\r\n+  const ActivateComponents(this.componentIds, {this.userId});\r\n+\r\n+  @override\r\n+  List<Object> get props => [componentIds, userId ?? ''];\r\n+}\r\n+\r\n+class CheckSystemReadiness extends ComponentListEvent {}\r\n+\r\n+class GetSystemIssues extends ComponentListEvent {}\r\n+\r\n+class UpdateComponent extends ComponentListEvent {\r\n+  final SystemComponent component;\r\n+\r\n+  const UpdateComponent(this.component);\r\n+\r\n+  @override\r\n+  List<Object> get props => [component];\r\n+}\r\n+\r\n+class AddComponent extends ComponentListEvent {\r\n+  final SystemComponent component;\r\n+\r\n+  const AddComponent(this.component);\r\n+\r\n+  @override\r\n+  List<Object> get props => [component];\r\n+}\r\n+\r\n+// State\r\n+class ComponentListState extends Equatable {\r\n+  final Map<String, SystemComponent> components;\r\n+  final bool isLoading;\r\n+  final String? error;\r\n+\r\n+  const ComponentListState({\r\n+    this.components = const {},\r\n+    this.isLoading = false,\r\n+    this.error,\r\n+  });\r\n+\r\n+  ComponentListState copyWith({\r\n+    Map<String, SystemComponent>? components,\r\n+    bool? isLoading,\r\n+    String? error,\r\n+  }) {\r\n+    return ComponentListState(\r\n+      components: components ?? this.components,\r\n+      isLoading: isLoading ?? this.isLoading,\r\n+      error: error ?? this.error,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  List<Object?> get props => [components, isLoading, error];\r\n+}\r\n+\r\n+// Bloc\r\n+class ComponentListBloc extends Bloc<ComponentListEvent, ComponentListState> {\r\n+  final ComponentRepository _repository;\r\n+  StreamSubscription? _componentsSubscription;\r\n+\r\n+  ComponentListBloc(this._repository) : super(const ComponentListState()) {\r\n+    on<LoadComponents>(_onLoadComponents);\r\n+    on<UpdateComponent>(_onUpdateComponent);\r\n+    on<AddComponent>(_onAddComponent);\r\n+  }\r\n+\r\n+  Future<void> _onLoadComponents(\r\n+    LoadComponents event,\r\n+    Emitter<ComponentListState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      // Load initial components\r\n+      final components = await _repository.getAllComponents();\r\n+      final componentsMap = {\r\n+        for (var component in components) component.name: component\r\n+      };\r\n+\r\n+      emit(state.copyWith(\r\n+        components: componentsMap,\r\n+        isLoading: false,\r\n+      ));\r\n+\r\n+      // Setup real-time updates if needed\r\n+      // This would depend on your Firestore implementation\r\n+      // _setupComponentsSubscription();\r\n+\r\n+    } catch (e) {\r\n+      emit(state.copyWith(\r\n+        error: e.toString(),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onUpdateComponent(\r\n+    UpdateComponent event,\r\n+    Emitter<ComponentListState> emit,\r\n+  ) async {\r\n+    try {\r\n+      // Update local state\r\n+      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n+      updatedComponents[event.component.name] = event.component;\r\n+\r\n+      emit(state.copyWith(components: updatedComponents));\r\n+\r\n+      // Persist to repository\r\n+      await _repository.saveComponentState(event.component);\r\n+    } catch (e) {\r\n+      emit(state.copyWith(error: e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onAddComponent(\r\n+    AddComponent event,\r\n+    Emitter<ComponentListState> emit,\r\n+  ) async {\r\n+    try {\r\n+      // Update local state\r\n+      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n+      updatedComponents[event.component.name] = event.component;\r\n+\r\n+      emit(state.copyWith(components: updatedComponents));\r\n+\r\n+      // Persist to repository\r\n+      await _repository.saveComponentState(event.component);\r\n+    } catch (e) {\r\n+      emit(state.copyWith(error: e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> close() {\r\n+    _componentsSubscription?.cancel();\r\n+    return super.close();\r\n+  }\r\n+\r\n+  // Helper methods\r\n+  SystemComponent? getComponent(String name) => state.components[name];\r\n+\r\n+  List<SystemComponent> getAllComponents() => state.components.values.toList();\r\n+\r\n+  List<SystemComponent> getActiveComponents() =>\r\n+      state.components.values.where((c) => c.isActivated).toList();\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734142324267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,13 @@\n // lib/blocs/component/bloc/component_list_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n-import 'package:equatable/equatable.dart';\r\n import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n+import 'component_list_event.dart';\r\n+import 'component_list_state.dart';\r\n \r\n-// Events\r\n-abstract class ComponentListEvent extends Equatable {\r\n-  const ComponentListEvent();\r\n-\r\n-  @override\r\n-  List<Object> get props => [];\r\n-}\r\n-\r\n-class LoadComponents extends ComponentListEvent {\r\n-  final String? userId;\r\n-  const LoadComponents({this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [userId ?? ''];\r\n-}\r\n-\r\n-class ClearAllComponents extends ComponentListEvent {\r\n-  final String? userId;\r\n-  const ClearAllComponents({this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [userId ?? ''];\r\n-}\r\n-\r\n-class ActivateComponents extends ComponentListEvent {\r\n-  final List<String> componentIds;\r\n-  final String? userId;\r\n-\r\n-  const ActivateComponents(this.componentIds, {this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [componentIds, userId ?? ''];\r\n-}\r\n-\r\n-class CheckSystemReadiness extends ComponentListEvent {}\r\n-\r\n-class GetSystemIssues extends ComponentListEvent {}\r\n-\r\n-class UpdateComponent extends ComponentListEvent {\r\n-  final SystemComponent component;\r\n-\r\n-  const UpdateComponent(this.component);\r\n-\r\n-  @override\r\n-  List<Object> get props => [component];\r\n-}\r\n-\r\n-class AddComponent extends ComponentListEvent {\r\n-  final SystemComponent component;\r\n-\r\n-  const AddComponent(this.component);\r\n-\r\n-  @override\r\n-  List<Object> get props => [component];\r\n-}\r\n-\r\n-// State\r\n-class ComponentListState extends Equatable {\r\n-  final Map<String, SystemComponent> components;\r\n-  final bool isLoading;\r\n-  final String? error;\r\n-\r\n-  const ComponentListState({\r\n-    this.components = const {},\r\n-    this.isLoading = false,\r\n-    this.error,\r\n-  });\r\n-\r\n-  ComponentListState copyWith({\r\n-    Map<String, SystemComponent>? components,\r\n-    bool? isLoading,\r\n-    String? error,\r\n-  }) {\r\n-    return ComponentListState(\r\n-      components: components ?? this.components,\r\n-      isLoading: isLoading ?? this.isLoading,\r\n-      error: error ?? this.error,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  List<Object?> get props => [components, isLoading, error];\r\n-}\r\n-\r\n-// Bloc\r\n class ComponentListBloc extends Bloc<ComponentListEvent, ComponentListState> {\r\n   final ComponentRepository _repository;\r\n   StreamSubscription? _componentsSubscription;\r\n \r\n@@ -179,188 +95,5 @@\n   List<SystemComponent> getAllComponents() => state.components.values.toList();\r\n \r\n   List<SystemComponent> getActiveComponents() =>\r\n       state.components.values.where((c) => c.isActivated).toList();\r\n-}\n-// lib/blocs/component/bloc/component_list_bloc.dart\r\n-\r\n-import 'dart:async';\r\n-import 'package:bloc/bloc.dart';\r\n-import 'package:equatable/equatable.dart';\r\n-import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n-import '../repository/component_repository.dart';\r\n-\r\n-// Events\r\n-abstract class ComponentListEvent extends Equatable {\r\n-  const ComponentListEvent();\r\n-\r\n-  @override\r\n-  List<Object> get props => [];\r\n-}\r\n-\r\n-class LoadComponents extends ComponentListEvent {\r\n-  final String? userId;\r\n-  const LoadComponents({this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [userId ?? ''];\r\n-}\r\n-\r\n-class ClearAllComponents extends ComponentListEvent {\r\n-  final String? userId;\r\n-  const ClearAllComponents({this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [userId ?? ''];\r\n-}\r\n-\r\n-class ActivateComponents extends ComponentListEvent {\r\n-  final List<String> componentIds;\r\n-  final String? userId;\r\n-\r\n-  const ActivateComponents(this.componentIds, {this.userId});\r\n-\r\n-  @override\r\n-  List<Object> get props => [componentIds, userId ?? ''];\r\n-}\r\n-\r\n-class CheckSystemReadiness extends ComponentListEvent {}\r\n-\r\n-class GetSystemIssues extends ComponentListEvent {}\r\n-\r\n-class UpdateComponent extends ComponentListEvent {\r\n-  final SystemComponent component;\r\n-\r\n-  const UpdateComponent(this.component);\r\n-\r\n-  @override\r\n-  List<Object> get props => [component];\r\n-}\r\n-\r\n-class AddComponent extends ComponentListEvent {\r\n-  final SystemComponent component;\r\n-\r\n-  const AddComponent(this.component);\r\n-\r\n-  @override\r\n-  List<Object> get props => [component];\r\n-}\r\n-\r\n-// State\r\n-class ComponentListState extends Equatable {\r\n-  final Map<String, SystemComponent> components;\r\n-  final bool isLoading;\r\n-  final String? error;\r\n-\r\n-  const ComponentListState({\r\n-    this.components = const {},\r\n-    this.isLoading = false,\r\n-    this.error,\r\n-  });\r\n-\r\n-  ComponentListState copyWith({\r\n-    Map<String, SystemComponent>? components,\r\n-    bool? isLoading,\r\n-    String? error,\r\n-  }) {\r\n-    return ComponentListState(\r\n-      components: components ?? this.components,\r\n-      isLoading: isLoading ?? this.isLoading,\r\n-      error: error ?? this.error,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  List<Object?> get props => [components, isLoading, error];\r\n-}\r\n-\r\n-// Bloc\r\n-class ComponentListBloc extends Bloc<ComponentListEvent, ComponentListState> {\r\n-  final ComponentRepository _repository;\r\n-  StreamSubscription? _componentsSubscription;\r\n-\r\n-  ComponentListBloc(this._repository) : super(const ComponentListState()) {\r\n-    on<LoadComponents>(_onLoadComponents);\r\n-    on<UpdateComponent>(_onUpdateComponent);\r\n-    on<AddComponent>(_onAddComponent);\r\n-  }\r\n-\r\n-  Future<void> _onLoadComponents(\r\n-    LoadComponents event,\r\n-    Emitter<ComponentListState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      // Load initial components\r\n-      final components = await _repository.getAllComponents();\r\n-      final componentsMap = {\r\n-        for (var component in components) component.name: component\r\n-      };\r\n-\r\n-      emit(state.copyWith(\r\n-        components: componentsMap,\r\n-        isLoading: false,\r\n-      ));\r\n-\r\n-      // Setup real-time updates if needed\r\n-      // This would depend on your Firestore implementation\r\n-      // _setupComponentsSubscription();\r\n-\r\n-    } catch (e) {\r\n-      emit(state.copyWith(\r\n-        error: e.toString(),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onUpdateComponent(\r\n-    UpdateComponent event,\r\n-    Emitter<ComponentListState> emit,\r\n-  ) async {\r\n-    try {\r\n-      // Update local state\r\n-      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n-      updatedComponents[event.component.name] = event.component;\r\n-\r\n-      emit(state.copyWith(components: updatedComponents));\r\n-\r\n-      // Persist to repository\r\n-      await _repository.saveComponentState(event.component);\r\n-    } catch (e) {\r\n-      emit(state.copyWith(error: e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onAddComponent(\r\n-    AddComponent event,\r\n-    Emitter<ComponentListState> emit,\r\n-  ) async {\r\n-    try {\r\n-      // Update local state\r\n-      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n-      updatedComponents[event.component.name] = event.component;\r\n-\r\n-      emit(state.copyWith(components: updatedComponents));\r\n-\r\n-      // Persist to repository\r\n-      await _repository.saveComponent(event.component);\r\n-    } catch (e) {\r\n-      emit(state.copyWith(error: e.toString()));\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Future<void> close() {\r\n-    _componentsSubscription?.cancel();\r\n-    return super.close();\r\n-  }\r\n-\r\n-  // Helper methods\r\n-  SystemComponent? getComponent(String name) => state.components[name];\r\n-\r\n-  List<SystemComponent> getAllComponents() => state.components.values.toList();\r\n-\r\n-  List<SystemComponent> getActiveComponents() =>\r\n-      state.components.values.where((c) => c.isActivated).toList();\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734044550203,
            "name": "Commit-0",
            "content": "// lib/blocs/component/bloc/component_list_bloc.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport 'package:equatable/equatable.dart';\r\nimport '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\nimport '../repository/component_repository.dart';\r\n\r\n// Events\r\nabstract class ComponentListEvent extends Equatable {\r\n  const ComponentListEvent();\r\n\r\n  @override\r\n  List<Object> get props => [];\r\n}\r\n\r\nclass LoadComponents extends ComponentListEvent {\r\n  final String? userId;\r\n  const LoadComponents({this.userId});\r\n\r\n  @override\r\n  List<Object?> get props => [userId];\r\n}\r\n\r\nclass ClearAllComponents extends ComponentListEvent {\r\n  final String? userId;\r\n  const ClearAllComponents({this.userId});\r\n\r\n  @override\r\n  List<Object?> get props => [userId];\r\n}\r\n\r\nclass ActivateComponents extends ComponentListEvent {\r\n  final List<String> componentIds;\r\n  final String? userId;\r\n\r\n  const ActivateComponents(this.componentIds, {this.userId});\r\n\r\n  @override\r\n  List<Object?> get props => [componentIds, userId];\r\n}\r\n\r\nclass CheckSystemReadiness extends ComponentListEvent {}\r\n\r\nclass GetSystemIssues extends ComponentListEvent {}\r\n\r\nclass UpdateComponent extends ComponentListEvent {\r\n  final SystemComponent component;\r\n\r\n  const UpdateComponent(this.component);\r\n\r\n  @override\r\n  List<Object> get props => [component];\r\n}\r\n\r\nclass AddComponent extends ComponentListEvent {\r\n  final SystemComponent component;\r\n\r\n  const AddComponent(this.component);\r\n\r\n  @override\r\n  List<Object> get props => [component];\r\n}\r\n\r\n// State\r\nclass ComponentListState extends Equatable {\r\n  final Map<String, SystemComponent> components;\r\n  final bool isLoading;\r\n  final String? error;\r\n\r\n  const ComponentListState({\r\n    this.components = const {},\r\n    this.isLoading = false,\r\n    this.error,\r\n  });\r\n\r\n  ComponentListState copyWith({\r\n    Map<String, SystemComponent>? components,\r\n    bool? isLoading,\r\n    String? error,\r\n  }) {\r\n    return ComponentListState(\r\n      components: components ?? this.components,\r\n      isLoading: isLoading ?? this.isLoading,\r\n      error: error ?? this.error,\r\n    );\r\n  }\r\n\r\n  @override\r\n  List<Object?> get props => [components, isLoading, error];\r\n}\r\n\r\n// Bloc\r\nclass ComponentListBloc extends Bloc<ComponentListEvent, ComponentListState> {\r\n  final ComponentRepository _repository;\r\n  StreamSubscription? _componentsSubscription;\r\n\r\n  ComponentListBloc(this._repository) : super(const ComponentListState()) {\r\n    on<LoadComponents>(_onLoadComponents);\r\n    on<UpdateComponent>(_onUpdateComponent);\r\n    on<AddComponent>(_onAddComponent);\r\n  }\r\n\r\n  Future<void> _onLoadComponents(\r\n    LoadComponents event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      // Load initial components\r\n      final components = await _repository.getAllComponents();\r\n      final componentsMap = {\r\n        for (var component in components) component.name: component\r\n      };\r\n\r\n      emit(state.copyWith(\r\n        components: componentsMap,\r\n        isLoading: false,\r\n      ));\r\n\r\n      // Setup real-time updates if needed\r\n      // This would depend on your Firestore implementation\r\n      // _setupComponentsSubscription();\r\n\r\n    } catch (e) {\r\n      emit(state.copyWith(\r\n        error: e.toString(),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onUpdateComponent(\r\n    UpdateComponent event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      // Update local state\r\n      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n      updatedComponents[event.component.name] = event.component;\r\n\r\n      emit(state.copyWith(components: updatedComponents));\r\n\r\n      // Persist to repository\r\n      await _repository.saveComponent(event.component);\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddComponent(\r\n    AddComponent event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      // Update local state\r\n      final updatedComponents = Map<String, SystemComponent>.from(state.components);\r\n      updatedComponents[event.component.name] = event.component;\r\n\r\n      emit(state.copyWith(components: updatedComponents));\r\n\r\n      // Persist to repository\r\n      await _repository.saveComponent(event.component);\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  void _setupComponentsSubscription() {\r\n    // Implement real-time updates subscription if needed\r\n    // This would depend on your Firestore implementation\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _componentsSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n\r\n  // Helper methods\r\n  SystemComponent? getComponent(String name) => state.components[name];\r\n\r\n  List<SystemComponent> getAllComponents() => state.components.values.toList();\r\n\r\n  List<SystemComponent> getActiveComponents() =>\r\n      state.components.values.where((c) => c.isActivated).toList();\r\n}"
        }
    ]
}