{
    "sourceFile": "lib/blocs/component/bloc/component_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734043335749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734043481713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // lib/blocs/component/bloc/component_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n"
                },
                {
                    "date": 1734043874324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,17 @@\n         await _componentSubscription?.cancel();\r\n         _componentSubscription = _repository\r\n             .watchComponent(event.componentName)\r\n             .listen(\r\n-              (component) => component != null\r\n-                  ? emit(ComponentState.loaded(component))\r\n-                  : emit(ComponentState.error('Component not found')),\r\n+              (component) {\r\n+                if (!emit.isDone) {\r\n+                  if (component != null) {\r\n+                    emit(ComponentState.loaded(component));\r\n+                  } else {\r\n+                    emit(ComponentState.error('Component not found'));\r\n+                  }\r\n+                }\r\n+              },\r\n             );\r\n       } else {\r\n         emit(ComponentState.error('Component not found'));\r\n       }\r\n"
                },
                {
                    "date": 1734070480407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // lib/blocs/component/bloc/component_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n+import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n"
                },
                {
                    "date": 1734143477330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // lib/blocs/component/bloc/component_bloc.dart\r\n \r\n import 'dart:async';\r\n-import 'package:bloc/bloc.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n@@ -20,8 +20,9 @@\n     on<ComponentErrorsCleared>(_onComponentErrorsCleared);\r\n     on<ComponentStatusUpdated>(_onComponentStatusUpdated);\r\n     on<ComponentCheckDateUpdated>(_onComponentCheckDateUpdated);\r\n     on<ComponentLimitsUpdated>(_onComponentLimitsUpdated);\r\n+    on<LoadComponents>(_onLoadComponents);\r\n   }\r\n \r\n   Future<void> _onComponentInitialized(\r\n     ComponentInitialized event,\r\n@@ -189,8 +190,27 @@\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n   }\r\n \r\n+  Future<void> _onLoadComponents(\r\n+    LoadComponents event,\r\n+    Emitter<ComponentState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+      final components = await _repository.getComponents();\r\n+      emit(state.copyWith(\r\n+        components: components,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: error.toString(),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Future<void> close() {\r\n     _componentSubscription?.cancel();\r\n     return super.close();\r\n"
                },
                {
                    "date": 1734143652507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // lib/blocs/component/bloc/component_bloc.dart\r\n \r\n import 'dart:async';\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n+import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n@@ -20,9 +20,8 @@\n     on<ComponentErrorsCleared>(_onComponentErrorsCleared);\r\n     on<ComponentStatusUpdated>(_onComponentStatusUpdated);\r\n     on<ComponentCheckDateUpdated>(_onComponentCheckDateUpdated);\r\n     on<ComponentLimitsUpdated>(_onComponentLimitsUpdated);\r\n-    on<LoadComponents>(_onLoadComponents);\r\n   }\r\n \r\n   Future<void> _onComponentInitialized(\r\n     ComponentInitialized event,\r\n@@ -190,27 +189,8 @@\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n   }\r\n \r\n-  Future<void> _onLoadComponents(\r\n-    LoadComponents event,\r\n-    Emitter<ComponentState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-      final components = await _repository.getComponents();\r\n-      emit(state.copyWith(\r\n-        components: components,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: error.toString(),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n   @override\r\n   Future<void> close() {\r\n     _componentSubscription?.cancel();\r\n     return super.close();\r\n"
                },
                {
                    "date": 1734143766905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // lib/blocs/component/bloc/component_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n+import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../repository/component_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n"
                }
            ],
            "date": 1734043335749,
            "name": "Commit-0",
            "content": "// lib/blocs/component/bloc/component_bloc.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../repository/component_repository.dart';\r\nimport 'component_event.dart';\r\nimport 'component_state.dart';\r\n\r\nclass ComponentBloc extends Bloc<ComponentEvent, ComponentState> {\r\n  final ComponentRepository _repository;\r\n  StreamSubscription<SystemComponent?>? _componentSubscription;\r\n\r\n  ComponentBloc(this._repository) : super(ComponentState.initial()) {\r\n    on<ComponentInitialized>(_onComponentInitialized);\r\n    on<ComponentValueUpdated>(_onComponentValueUpdated);\r\n    on<ComponentSetValueUpdated>(_onComponentSetValueUpdated);\r\n    on<ComponentActivationToggled>(_onComponentActivationToggled);\r\n    on<ComponentErrorAdded>(_onComponentErrorAdded);\r\n    on<ComponentErrorsCleared>(_onComponentErrorsCleared);\r\n    on<ComponentStatusUpdated>(_onComponentStatusUpdated);\r\n    on<ComponentCheckDateUpdated>(_onComponentCheckDateUpdated);\r\n    on<ComponentLimitsUpdated>(_onComponentLimitsUpdated);\r\n  }\r\n\r\n  Future<void> _onComponentInitialized(\r\n    ComponentInitialized event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    emit(ComponentState.loading());\r\n\r\n    try {\r\n      final component = await _repository.getComponent(event.componentName);\r\n      if (component != null) {\r\n        emit(ComponentState.loaded(component));\r\n\r\n        // Start watching for changes\r\n        await _componentSubscription?.cancel();\r\n        _componentSubscription = _repository\r\n            .watchComponent(event.componentName)\r\n            .listen(\r\n              (component) => component != null\r\n                  ? emit(ComponentState.loaded(component))\r\n                  : emit(ComponentState.error('Component not found')),\r\n            );\r\n      } else {\r\n        emit(ComponentState.error('Component not found'));\r\n      }\r\n    } catch (e) {\r\n      emit(ComponentState.error(e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentValueUpdated(\r\n    ComponentValueUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateCurrentValues(event.currentValues);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentSetValueUpdated(\r\n    ComponentSetValueUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateSetValues(event.setValues);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentActivationToggled(\r\n    ComponentActivationToggled event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.isActivated = event.isActivated;\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentErrorAdded(\r\n    ComponentErrorAdded event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.addErrorMessage(event.errorMessage);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentErrorsCleared(\r\n    ComponentErrorsCleared event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.clearErrorMessages();\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentStatusUpdated(\r\n    ComponentStatusUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.status = event.status;\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentCheckDateUpdated(\r\n    ComponentCheckDateUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateLastCheckDate(event.checkDate);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentLimitsUpdated(\r\n    ComponentLimitsUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      if (event.minValues != null) {\r\n        updatedComponent.updateMinValues(event.minValues!);\r\n      }\r\n      if (event.maxValues != null) {\r\n        updatedComponent.updateMaxValues(event.maxValues!);\r\n      }\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _componentSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}