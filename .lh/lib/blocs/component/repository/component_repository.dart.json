{
    "sourceFile": "lib/blocs/component/repository/component_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734043322906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734045072674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,106 @@\n // lib/blocs/component/repository/component_repository.dart\r\n \r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n+import '../../../repositories/base_repository.dart';\r\n import '../../../services/auth_service.dart';\r\n-import '../../../repositories/system_state_repository.dart';\r\n+import '../../../utils/data_point_cache.dart';\r\n \r\n-class ComponentRepository {\r\n-  final SystemStateRepository _systemStateRepository;\r\n+class ComponentRepository extends BaseRepository<SystemComponent> {\r\n   final AuthService _authService;\r\n+  final DataPointCache _dataPointCache;\r\n \r\n-  ComponentRepository(this._systemStateRepository, this._authService);\r\n+  ComponentRepository(this._authService)\r\n+      : _dataPointCache = DataPointCache(),\r\n+        super('system_components');\r\n \r\n+  @override\r\n+  SystemComponent fromJson(Map<String, dynamic> json) =>\r\n+      SystemComponent.fromJson(json);\r\n+\r\n   Future<SystemComponent?> getComponent(String componentName) async {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n     }\r\n-    return await _systemStateRepository.getComponentByName(userId, componentName);\r\n+    return await get(componentName, userId: userId);\r\n   }\r\n \r\n-  Future<void> saveComponent(SystemComponent component) async {\r\n+  Future<List<SystemComponent>> getAllComponents() async {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n     }\r\n-    await _systemStateRepository.saveComponent(userId, component);\r\n+    return await getAll(userId: userId);\r\n   }\r\n \r\n-  Future<void> saveComponentState(SystemComponent component) async {\r\n+  Future<List<SystemComponent>> getActiveComponents() async {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n     }\r\n-    await _systemStateRepository.saveComponentState(userId, component);\r\n+\r\n+    QuerySnapshot activeComponents = await getUserCollection(userId)\r\n+        .where('isActivated', isEqualTo: true)\r\n+        .get();\r\n+\r\n+    return activeComponents.docs\r\n+        .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n   }\r\n \r\n-  Future<List<Map<String, dynamic>>> getComponentHistory(\r\n+  Future<void> updateComponentState(\r\n     String componentName,\r\n-    DateTime start,\r\n-    DateTime end,\r\n+    Map<String, double> newState,\r\n   ) async {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n     }\r\n-    return await _systemStateRepository.getComponentHistory(\r\n-      userId,\r\n-      componentName,\r\n-      start,\r\n-      end,\r\n-    );\r\n+\r\n+    await getUserCollection(userId)\r\n+        .doc(componentName)\r\n+        .update({'currentValues': newState});\r\n   }\r\n \r\n-  Stream<SystemComponent?> watchComponent(String componentName) async* {\r\n+  Stream<SystemComponent?> watchComponent(String componentName) {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n     }\r\n \r\n-    // This is where you'd implement real-time watching using Firestore\r\n-    // For now, we'll just yield the current state\r\n-    yield await getComponent(componentName);\r\n+    return getUserCollection(userId)\r\n+        .doc(componentName)\r\n+        .snapshots()\r\n+        .map((doc) => doc.exists\r\n+            ? fromJson(doc.data() as Map<String, dynamic>)\r\n+            : null);\r\n   }\r\n+\r\n+  // DataPoint Cache methods\r\n+  void cacheDataPoint(\r\n+    String componentName,\r\n+    String parameter,\r\n+    DataPoint dataPoint, {\r\n+    int maxPoints = DataPointCache.DEFAULT_MAX_POINTS,\r\n+  }) {\r\n+    _dataPointCache.addDataPoint(\r\n+      componentName,\r\n+      parameter,\r\n+      dataPoint,\r\n+      maxPoints: maxPoints,\r\n+    );\r\n+  }\r\n+\r\n+  List<DataPoint> getCachedDataPoints(String componentName, String parameter) {\r\n+    return _dataPointCache.getDataPoints(componentName, parameter);\r\n+  }\r\n+\r\n+  DataPoint? getLatestDataPoint(String componentName, String parameter) {\r\n+    return _dataPointCache.getLatestDataPoint(componentName, parameter);\r\n+  }\r\n+\r\n+  void clearCache() {\r\n+    _dataPointCache.clearAll();\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734070480353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,19 @@\n         .doc(componentName)\r\n         .update({'currentValues': newState});\r\n   }\r\n \r\n+  Future<void> saveComponentState(SystemComponent component) async {\r\n+    final userId = _authService.currentUser?.uid;\r\n+    if (userId == null) {\r\n+      throw Exception('User not authenticated');\r\n+    }\r\n+\r\n+    await getUserCollection(userId)\r\n+        .doc(component.name)\r\n+        .set(component.toJson(), SetOptions(merge: true));\r\n+  }\r\n+\r\n   Stream<SystemComponent?> watchComponent(String componentName) {\r\n     final userId = _authService.currentUser?.uid;\r\n     if (userId == null) {\r\n       throw Exception('User not authenticated');\r\n"
                },
                {
                    "date": 1734070801058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // lib/blocs/component/repository/component_repository.dart\r\n \r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/data_point.dart';\r\n+import '../../../modules/system_operation_also_main_module/models/data_point.dart';\r\n+// Update other imports to use relative paths\r\n import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n import '../../../repositories/base_repository.dart';\r\n import '../../../services/auth_service.dart';\r\n import '../../../utils/data_point_cache.dart';\r\n"
                },
                {
                    "date": 1734272963057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,24 @@\n-// lib/blocs/component/repository/component_repository.dart\r\n-\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import '../../../modules/system_operation_also_main_module/models/data_point.dart';\r\n-// Update other imports to use relative paths\r\n-import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n-import '../../../repositories/base_repository.dart';\r\n-import '../../../services/auth_service.dart';\r\n-import '../../../utils/data_point_cache.dart';\r\n-\r\n-class ComponentRepository extends BaseRepository<SystemComponent> {\r\n-  final AuthService _authService;\r\n-  final DataPointCache _dataPointCache;\r\n-\r\n-  ComponentRepository(this._authService)\r\n-      : _dataPointCache = DataPointCache(),\r\n-        super('system_components');\r\n-\r\n-  @override\r\n-  SystemComponent fromJson(Map<String, dynamic> json) =>\r\n-      SystemComponent.fromJson(json);\r\n-\r\n-  Future<SystemComponent?> getComponent(String componentName) async {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-    return await get(componentName, userId: userId);\r\n-  }\r\n-\r\n-  Future<List<SystemComponent>> getAllComponents() async {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-    return await getAll(userId: userId);\r\n-  }\r\n-\r\n-  Future<List<SystemComponent>> getActiveComponents() async {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-\r\n-    QuerySnapshot activeComponents = await getUserCollection(userId)\r\n-        .where('isActivated', isEqualTo: true)\r\n-        .get();\r\n-\r\n-    return activeComponents.docs\r\n-        .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n-        .toList();\r\n-  }\r\n-\r\n-  Future<void> updateComponentState(\r\n-    String componentName,\r\n-    Map<String, double> newState,\r\n-  ) async {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-\r\n-    await getUserCollection(userId)\r\n-        .doc(componentName)\r\n-        .update({'currentValues': newState});\r\n-  }\r\n-\r\n-  Future<void> saveComponentState(SystemComponent component) async {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-\r\n-    await getUserCollection(userId)\r\n-        .doc(component.name)\r\n-        .set(component.toJson(), SetOptions(merge: true));\r\n-  }\r\n-\r\n-  Stream<SystemComponent?> watchComponent(String componentName) {\r\n-    final userId = _authService.currentUser?.uid;\r\n-    if (userId == null) {\r\n-      throw Exception('User not authenticated');\r\n-    }\r\n-\r\n-    return getUserCollection(userId)\r\n-        .doc(componentName)\r\n-        .snapshots()\r\n-        .map((doc) => doc.exists\r\n-            ? fromJson(doc.data() as Map<String, dynamic>)\r\n-            : null);\r\n-  }\r\n-\r\n-  // DataPoint Cache methods\r\n-  void cacheDataPoint(\r\n-    String componentName,\r\n-    String parameter,\r\n-    DataPoint dataPoint, {\r\n-    int maxPoints = DataPointCache.DEFAULT_MAX_POINTS,\r\n-  }) {\r\n-    _dataPointCache.addDataPoint(\r\n-      componentName,\r\n-      parameter,\r\n-      dataPoint,\r\n-      maxPoints: maxPoints,\r\n-    );\r\n-  }\r\n-\r\n-  List<DataPoint> getCachedDataPoints(String componentName, String parameter) {\r\n-    return _dataPointCache.getDataPoints(componentName, parameter);\r\n-  }\r\n-\r\n-  DataPoint? getLatestDataPoint(String componentName, String parameter) {\r\n-    return _dataPointCache.getLatestDataPoint(componentName, parameter);\r\n-  }\r\n-\r\n-  void clearCache() {\r\n-    _dataPointCache.clearAll();\r\n-  }\r\n-}\n\\ No newline at end of file\n+Performing hot restart...\r\n+Syncing files to device sdk gphone64 x86 64...\r\n+Restarted application in 1,426ms.\r\n+W/DynamiteModule( 5370): Local module descriptor class for com.google.android.gms.providerinstaller.dynamite not found.\r\n+I/DynamiteModule( 5370): Considering local module com.google.android.gms.providerinstaller.dynamite:0 and remote module com.google.android.gms.providerinstaller.dynamite:0\r\n+W/ProviderInstaller( 5370): Failed to load providerinstaller module: No acceptable module com.google.android.gms.providerinstaller.dynamite found. Local version is 0 and remote version is 0.\r\n+W/ProviderInstaller( 5370): Failed to report request stats: com.google.android.gms.common.security.ProviderInstallerImpl.reportRequestStats [class android.content.Context, long, long]\r\n+D/TrafficStats( 5370): tagSocket(142) with statsTag=0xffffffff, statsUid=-1\r\n+D/TrafficStats( 5370): tagSocket(143) with statsTag=0xffffffff, statsUid=-1\r\n+I/flutter ( 5370): ComponentListBloc: Processing event LoadComponents()\r\n+D/EGL_emulation( 5370): app_time_stats: avg=2062.46ms min=3.37ms max=16336.84ms count=8\r\n+I/flutter ( 5370): ComponentListBloc: Processing event LoadComponents()\r\n+I/flutter ( 5370): User role: user\r\n+I/flutter ( 5370): Updating user info - User role: UserRole.user, User status: active\r\n+D/EGL_emulation( 5370): app_time_stats: avg=16.05ms min=4.76ms max=79.87ms count=53\r\n+I/flutter ( 5370): User role: user\r\n+I/flutter ( 5370): Updating user info - User role: UserRole.user, User status: active\r\n+I/flutter ( 5370): SystemDiagramView: build called with 1 overlays\r\n+I/flutter ( 5370): SystemDiagramView: ComponentListState update - Components: 0\r\n+I/flutter ( 5370): SystemDiagramView: build called with 1 overlays\r\n+I/flutter ( 5370): SystemDiagramView: ComponentListState update - Components: 0\r\n+D/EGL_emulation( 5370): app_time_stats: avg=23.18ms min=2.59ms max=408.53ms count=31\r\n+I/flutter ( 5370): SystemDiagramView: build called with 1 overlays\r\n+I/flutter ( 5370): SystemDiagramView: ComponentListState update - Components: 0\r\n"
                }
            ],
            "date": 1734043322906,
            "name": "Commit-0",
            "content": "// lib/blocs/component/repository/component_repository.dart\r\n\r\nimport '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\nimport '../../../services/auth_service.dart';\r\nimport '../../../repositories/system_state_repository.dart';\r\n\r\nclass ComponentRepository {\r\n  final SystemStateRepository _systemStateRepository;\r\n  final AuthService _authService;\r\n\r\n  ComponentRepository(this._systemStateRepository, this._authService);\r\n\r\n  Future<SystemComponent?> getComponent(String componentName) async {\r\n    final userId = _authService.currentUser?.uid;\r\n    if (userId == null) {\r\n      throw Exception('User not authenticated');\r\n    }\r\n    return await _systemStateRepository.getComponentByName(userId, componentName);\r\n  }\r\n\r\n  Future<void> saveComponent(SystemComponent component) async {\r\n    final userId = _authService.currentUser?.uid;\r\n    if (userId == null) {\r\n      throw Exception('User not authenticated');\r\n    }\r\n    await _systemStateRepository.saveComponent(userId, component);\r\n  }\r\n\r\n  Future<void> saveComponentState(SystemComponent component) async {\r\n    final userId = _authService.currentUser?.uid;\r\n    if (userId == null) {\r\n      throw Exception('User not authenticated');\r\n    }\r\n    await _systemStateRepository.saveComponentState(userId, component);\r\n  }\r\n\r\n  Future<List<Map<String, dynamic>>> getComponentHistory(\r\n    String componentName,\r\n    DateTime start,\r\n    DateTime end,\r\n  ) async {\r\n    final userId = _authService.currentUser?.uid;\r\n    if (userId == null) {\r\n      throw Exception('User not authenticated');\r\n    }\r\n    return await _systemStateRepository.getComponentHistory(\r\n      userId,\r\n      componentName,\r\n      start,\r\n      end,\r\n    );\r\n  }\r\n\r\n  Stream<SystemComponent?> watchComponent(String componentName) async* {\r\n    final userId = _authService.currentUser?.uid;\r\n    if (userId == null) {\r\n      throw Exception('User not authenticated');\r\n    }\r\n\r\n    // This is where you'd implement real-time watching using Firestore\r\n    // For now, we'll just yield the current state\r\n    yield await getComponent(componentName);\r\n  }\r\n}"
        }
    ]
}