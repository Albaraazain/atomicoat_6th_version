{
    "sourceFile": "lib/blocs/safety/bloc/safety_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734048835318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734048922164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n     expect: () => [\r\n       predicate<SafetyState>((state) =>\r\n         state.isLoading == false &&\r\n-        !state.error.isNotEmpty\r\n+        !state.error!.isNotEmpty\r\n       ),\r\n     ],\r\n     verify: (_) {\r\n       verify(() => repository.addSafetyError(testError)).called(1);\r\n@@ -74,9 +74,9 @@\n     },\r\n     act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n     expect: () => [\r\n       predicate<SafetyState>((state) =>\r\n-        state.error.contains('Repository error')\r\n+        state.error?.contains('Repository error') ?? false\r\n       ),\r\n     ],\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734049297342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n // lib/blocs/safety/bloc/safety_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import '../../../modules/system_operation_also_main_module/models/safety_error.dart';\r\n-import '../../../services/auth_service.dart';\r\n-import '../../alarm/bloc/alarm_bloc.dart';\r\n-import '../repository/safety_repository.dart';\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/alarm.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n+import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n import 'safety_bloc.dart';\r\n import 'safety_event.dart';\r\n import 'safety_state.dart';\r\n \r\n@@ -19,8 +21,17 @@\n   late MockSafetyRepository repository;\r\n   late MockAuthService authService;\r\n   late MockAlarmBloc alarmBloc;\r\n \r\n+  setUpAll(() {\r\n+    registerFallbackValue(AddAlarm(\r\n+      message: 'test',\r\n+      severity: AlarmSeverity.warning,\r\n+      isSafetyAlert: true,\r\n+    ));\r\n+    registerFallbackValue(testError);\r\n+  });\r\n+\r\n   setUp(() {\r\n     repository = MockSafetyRepository();\r\n     authService = MockAuthService();\r\n     alarmBloc = MockAlarmBloc();\r\n"
                },
                {
                    "date": 1734049340784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,14 @@\n   late MockSafetyRepository repository;\r\n   late MockAuthService authService;\r\n   late MockAlarmBloc alarmBloc;\r\n \r\n+  final testError = SafetyError(\r\n+    id: '1',\r\n+    description: 'Test error',\r\n+    severity: SafetyErrorSeverity.warning,\r\n+  );\r\n+\r\n   setUpAll(() {\r\n     registerFallbackValue(AddAlarm(\r\n       message: 'test',\r\n       severity: AlarmSeverity.warning,\r\n@@ -43,15 +49,9 @@\n   });\r\n \r\n   tearDown(() {\r\n     safetyBloc.close();\r\n-  });\r\n-\r\n-  test('initial state is correct', () {\r\n-    expect(safetyBloc.state, equals(SafetyState.initial()));\r\n-  });\r\n-\r\n-  final testError = SafetyError(\r\n+  blocTest<SafetyBloc, SafetyState>(\r\n     id: '1',\r\n     description: 'Test error',\r\n     severity: SafetyErrorSeverity.warning,\r\n   );\r\n"
                },
                {
                    "date": 1734049362687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,12 @@\n \r\n   tearDown(() {\r\n     safetyBloc.close();\r\n   blocTest<SafetyBloc, SafetyState>(\r\n-    id: '1',\r\n-    description: 'Test error',\r\n-    severity: SafetyErrorSeverity.warning,\r\n+    'initial test',\r\n+    build: () => safetyBloc,\r\n+    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n+    expect: () => [],\r\n   );\r\n \r\n   blocTest<SafetyBloc, SafetyState>(\r\n     'emits new state when error is detected',\r\n"
                },
                {
                    "date": 1734049402300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,10 @@\n   });\r\n \r\n   tearDown(() {\r\n     safetyBloc.close();\r\n+  });\r\n+\r\n   blocTest<SafetyBloc, SafetyState>(\r\n     'initial test',\r\n     build: () => safetyBloc,\r\n     act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n@@ -89,6 +91,11 @@\n       predicate<SafetyState>((state) =>\r\n         state.error?.contains('Repository error') ?? false\r\n       ),\r\n     ],\r\n+\r\n+    verify: (_) {\r\n+      verify(() => repository.addSafetyError(testError)).called(1);\r\n+      verifyNever(() => alarmBloc.add(any()));\r\n+    },\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734049468102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,16 @@\n-// lib/blocs/safety/bloc/safety_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_state.dart';\r\n+import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/alarm.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n import 'package:experiment_planner/services/auth_service.dart';\r\n-import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n-import 'safety_bloc.dart';\r\n-import 'safety_event.dart';\r\n-import 'safety_state.dart';\r\n \r\n class MockSafetyRepository extends Mock implements SafetyRepository {}\r\n class MockAuthService extends Mock implements AuthService {}\r\n class MockAlarmBloc extends Mock implements AlarmBloc {}\r\n@@ -21,27 +20,28 @@\n   late MockSafetyRepository repository;\r\n   late MockAuthService authService;\r\n   late MockAlarmBloc alarmBloc;\r\n \r\n-  final testError = SafetyError(\r\n-    id: '1',\r\n-    description: 'Test error',\r\n-    severity: SafetyErrorSeverity.warning,\r\n-  );\r\n-\r\n   setUpAll(() {\r\n+    registerFallbackValue(const SafetyError(\r\n+      id: 'dummy',\r\n+      description: 'dummy',\r\n+      severity: SafetyErrorSeverity.warning,\r\n+    ));\r\n     registerFallbackValue(AddAlarm(\r\n       message: 'test',\r\n       severity: AlarmSeverity.warning,\r\n       isSafetyAlert: true,\r\n     ));\r\n-    registerFallbackValue(testError);\r\n   });\r\n \r\n   setUp(() {\r\n     repository = MockSafetyRepository();\r\n     authService = MockAuthService();\r\n     alarmBloc = MockAlarmBloc();\r\n+    when(() => repository.addSafetyError(any())).thenAnswer((_) async {});\r\n+    when(() => alarmBloc.add(any())).thenAnswer((_) async {});\r\n+\r\n     safetyBloc = SafetyBloc(\r\n       repository: repository,\r\n       authService: authService,\r\n       alarmBloc: alarmBloc,\r\n@@ -51,8 +51,14 @@\n   tearDown(() {\r\n     safetyBloc.close();\r\n   });\r\n \r\n+  final testError = SafetyError(\r\n+    id: '1',\r\n+    description: 'Test error',\r\n+    severity: SafetyErrorSeverity.warning,\r\n+  );\r\n+\r\n   blocTest<SafetyBloc, SafetyState>(\r\n     'initial test',\r\n     build: () => safetyBloc,\r\n     act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n@@ -60,22 +66,12 @@\n   );\r\n \r\n   blocTest<SafetyBloc, SafetyState>(\r\n     'emits new state when error is detected',\r\n-    build: () {\r\n-      when(() => repository.addSafetyError(testError))\r\n-          .thenAnswer((_) async {});\r\n-      return safetyBloc;\r\n-    },\r\n+    build: () => safetyBloc,\r\n     act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n-    expect: () => [\r\n-      predicate<SafetyState>((state) =>\r\n-        state.isLoading == false &&\r\n-        !state.error!.isNotEmpty\r\n-      ),\r\n-    ],\r\n     verify: (_) {\r\n-      verify(() => repository.addSafetyError(testError)).called(1);\r\n+      verify(() => repository.addSafetyError(any())).called(1);\r\n       verify(() => alarmBloc.add(any())).called(1);\r\n     },\r\n   );\r\n \r\n"
                }
            ],
            "date": 1734048835318,
            "name": "Commit-0",
            "content": "// lib/blocs/safety/bloc/safety_bloc_test.dart\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport '../../../modules/system_operation_also_main_module/models/safety_error.dart';\r\nimport '../../../services/auth_service.dart';\r\nimport '../../alarm/bloc/alarm_bloc.dart';\r\nimport '../repository/safety_repository.dart';\r\nimport 'safety_bloc.dart';\r\nimport 'safety_event.dart';\r\nimport 'safety_state.dart';\r\n\r\nclass MockSafetyRepository extends Mock implements SafetyRepository {}\r\nclass MockAuthService extends Mock implements AuthService {}\r\nclass MockAlarmBloc extends Mock implements AlarmBloc {}\r\n\r\nvoid main() {\r\n  late SafetyBloc safetyBloc;\r\n  late MockSafetyRepository repository;\r\n  late MockAuthService authService;\r\n  late MockAlarmBloc alarmBloc;\r\n\r\n  setUp(() {\r\n    repository = MockSafetyRepository();\r\n    authService = MockAuthService();\r\n    alarmBloc = MockAlarmBloc();\r\n    safetyBloc = SafetyBloc(\r\n      repository: repository,\r\n      authService: authService,\r\n      alarmBloc: alarmBloc,\r\n    );\r\n  });\r\n\r\n  tearDown(() {\r\n    safetyBloc.close();\r\n  });\r\n\r\n  test('initial state is correct', () {\r\n    expect(safetyBloc.state, equals(SafetyState.initial()));\r\n  });\r\n\r\n  final testError = SafetyError(\r\n    id: '1',\r\n    description: 'Test error',\r\n    severity: SafetyErrorSeverity.warning,\r\n  );\r\n\r\n  blocTest<SafetyBloc, SafetyState>(\r\n    'emits new state when error is detected',\r\n    build: () {\r\n      when(() => repository.addSafetyError(testError))\r\n          .thenAnswer((_) async {});\r\n      return safetyBloc;\r\n    },\r\n    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n    expect: () => [\r\n      predicate<SafetyState>((state) =>\r\n        state.isLoading == false &&\r\n        !state.error.isNotEmpty\r\n      ),\r\n    ],\r\n    verify: (_) {\r\n      verify(() => repository.addSafetyError(testError)).called(1);\r\n      verify(() => alarmBloc.add(any())).called(1);\r\n    },\r\n  );\r\n\r\n  blocTest<SafetyBloc, SafetyState>(\r\n    'emits error state when repository fails',\r\n    build: () {\r\n      when(() => repository.addSafetyError(testError))\r\n          .thenThrow(Exception('Repository error'));\r\n      return safetyBloc;\r\n    },\r\n    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n    expect: () => [\r\n      predicate<SafetyState>((state) =>\r\n        state.error.contains('Repository error')\r\n      ),\r\n    ],\r\n  );\r\n}"
        }
    ]
}