{
    "sourceFile": "lib/blocs/alarm/bloc/alarm_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734047828906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734047835381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n   final AlarmRepository _repository;\r\n   StreamSubscription? _alarmSubscription;\r\n \r\n-  AlarmBloc(this._repository) : super(const AlarmState()) {\r\n+  AlarmBloc(this._repository) : super( AlarmState()) {\r\n     on<LoadAlarms>(_onLoadAlarms);\r\n     on<AddAlarm>(_onAddAlarm);\r\n     on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n     on<ClearAlarm>(_onClearAlarm);\r\n"
                }
            ],
            "date": 1734047828906,
            "name": "Commit-0",
            "content": "// lib/blocs/alarm/bloc/alarm_bloc.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../../../modules/system_operation_also_main_module/models/alarm.dart';\r\nimport '../repository/alarm_repository.dart';\r\nimport '../../utils/bloc_utils.dart';\r\nimport 'alarm_event.dart';\r\nimport 'alarm_state.dart';\r\n\r\nclass AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n  final AlarmRepository _repository;\r\n  StreamSubscription? _alarmSubscription;\r\n\r\n  AlarmBloc(this._repository) : super(const AlarmState()) {\r\n    on<LoadAlarms>(_onLoadAlarms);\r\n    on<AddAlarm>(_onAddAlarm);\r\n    on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n    on<ClearAlarm>(_onClearAlarm);\r\n    on<ClearAllAcknowledgedAlarms>(_onClearAllAcknowledgedAlarms);\r\n    on<SubscribeToAlarms>(_onSubscribeToAlarms);\r\n    on<UnsubscribeFromAlarms>(_onUnsubscribeFromAlarms);\r\n  }\r\n\r\n  Future<void> _onLoadAlarms(\r\n    LoadAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      final activeAlarms = await _repository.getActiveAlarms();\r\n      final acknowledgedAlarms = await _repository.getAcknowledgedAlarms();\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: activeAlarms,\r\n        acknowledgedAlarms: acknowledgedAlarms,\r\n        isLoading: false,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddAlarm(\r\n    AddAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      final newAlarm = Alarm(\r\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n        message: event.message,\r\n        severity: event.severity,\r\n        timestamp: DateTime.now(),\r\n        isSafetyAlert: event.isSafetyAlert,\r\n      );\r\n\r\n      await _repository.addAlarm(newAlarm);\r\n\r\n      final updatedAlarms = [...state.activeAlarms, newAlarm];\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedAlarms,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAcknowledgeAlarm(\r\n    AcknowledgeAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.acknowledgeAlarm(event.alarmId);\r\n\r\n      final alarm = state.activeAlarms.firstWhere((a) => a.id == event.alarmId);\r\n      final acknowledgedAlarm = alarm.copyWith(acknowledged: true);\r\n\r\n      final updatedActive = state.activeAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      final updatedAcknowledged = [\r\n        ...state.acknowledgedAlarms,\r\n        acknowledgedAlarm,\r\n      ];\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedActive,\r\n        acknowledgedAlarms: updatedAcknowledged,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onClearAlarm(\r\n    ClearAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.clearAlarm(event.alarmId);\r\n\r\n      final updatedActive = state.activeAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      final updatedAcknowledged = state.acknowledgedAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedActive,\r\n        acknowledgedAlarms: updatedAcknowledged,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onClearAllAcknowledgedAlarms(\r\n    ClearAllAcknowledgedAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.clearAllAcknowledgedAlarms();\r\n\r\n      emit(state.copyWith(\r\n        acknowledgedAlarms: [],\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSubscribeToAlarms(\r\n    SubscribeToAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    await _alarmSubscription?.cancel();\r\n\r\n    _alarmSubscription = _repository.watchAlarms().listen(\r\n      (alarms) {\r\n        final activeAlarms = alarms.where((a) => !a.acknowledged).toList();\r\n        final acknowledgedAlarms = alarms.where((a) => a.acknowledged).toList();\r\n\r\n        emit(state.copyWith(\r\n          activeAlarms: activeAlarms,\r\n          acknowledgedAlarms: acknowledgedAlarms,\r\n          isSubscribed: true,\r\n          lastUpdate: DateTime.now(),\r\n        ));\r\n      },\r\n      onError: (error) {\r\n        emit(state.copyWith(\r\n          error: BlocUtils.handleError(error),\r\n          isSubscribed: false,\r\n        ));\r\n      },\r\n    );\r\n  }\r\n\r\n  Future<void> _onUnsubscribeFromAlarms(\r\n    UnsubscribeFromAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    await _alarmSubscription?.cancel();\r\n    _alarmSubscription = null;\r\n    emit(state.copyWith(isSubscribed: false));\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _alarmSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}