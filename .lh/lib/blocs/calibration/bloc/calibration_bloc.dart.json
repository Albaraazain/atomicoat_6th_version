{
    "sourceFile": "lib/blocs/calibration/bloc/calibration_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734045486243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734046372619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,10 @@\n \r\n       component.updateMinValues({event.parameter: event.minValue});\r\n       component.updateMaxValues({event.parameter: event.maxValue});\r\n \r\n-      await _componentRepository.saveComponentState(component);\r\n+      // Fix: Use the correct save method\r\n+      await _componentRepository.update(component.id, component);\r\n \r\n       // No state change needed for the calibration bloc as this affects component state\r\n     } catch (error) {\r\n       emit(state.copyWith(\r\n"
                }
            ],
            "date": 1734045486243,
            "name": "Commit-0",
            "content": "//lib/blocs/calibration/bloc/calibration_bloc.dart\r\n\r\nimport 'package:bloc/bloc.dart';\r\nimport '../../../modules/maintenance_module/services/calibration_service.dart';\r\nimport '../../../blocs/component/repository/component_repository.dart';\r\nimport 'calibration_event.dart';\r\nimport 'calibration_state.dart';\r\n\r\nclass CalibrationBloc extends Bloc<CalibrationEvent, CalibrationState> {\r\n  final CalibrationService _calibrationService;\r\n  final ComponentRepository _componentRepository;\r\n\r\n  CalibrationBloc(\r\n    this._calibrationService,\r\n    this._componentRepository,\r\n  ) : super(const CalibrationState()) {\r\n    on<LoadCalibrationRecords>(_onLoadCalibrationRecords);\r\n    on<LoadCalibrationProcedures>(_onLoadCalibrationProcedures);\r\n    on<AddCalibrationRecord>(_onAddCalibrationRecord);\r\n    on<UpdateCalibrationRecord>(_onUpdateCalibrationRecord);\r\n    on<DeleteCalibrationRecord>(_onDeleteCalibrationRecord);\r\n    on<CalibrateComponentParameter>(_onCalibrateComponentParameter);\r\n    on<ClearCalibrationError>(_onClearCalibrationError);\r\n  }\r\n\r\n  Future<void> _onLoadCalibrationRecords(\r\n    LoadCalibrationRecords event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n      final records = await _calibrationService.loadCalibrationRecords();\r\n      emit(state.copyWith(\r\n        calibrationRecords: records,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to load calibration records: $error',\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onLoadCalibrationProcedures(\r\n    LoadCalibrationProcedures event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n      final procedures = await _calibrationService.loadCalibrationProcedures();\r\n      emit(state.copyWith(\r\n        calibrationProcedures: procedures,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to load calibration procedures: $error',\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddCalibrationRecord(\r\n    AddCalibrationRecord event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      await _calibrationService.saveCalibrationRecord(event.record);\r\n      final updatedRecords = [...state.calibrationRecords, event.record];\r\n      emit(state.copyWith(\r\n        calibrationRecords: updatedRecords,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to add calibration record: $error',\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onUpdateCalibrationRecord(\r\n    UpdateCalibrationRecord event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      await _calibrationService.updateCalibrationRecord(event.record);\r\n      final updatedRecords = state.calibrationRecords.map((record) {\r\n        return record.id == event.record.id ? event.record : record;\r\n      }).toList();\r\n      emit(state.copyWith(\r\n        calibrationRecords: updatedRecords,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to update calibration record: $error',\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onDeleteCalibrationRecord(\r\n    DeleteCalibrationRecord event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      await _calibrationService.deleteCalibrationRecord(event.id);\r\n      final updatedRecords = state.calibrationRecords\r\n          .where((record) => record.id != event.id)\r\n          .toList();\r\n      emit(state.copyWith(\r\n        calibrationRecords: updatedRecords,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to delete calibration record: $error',\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onCalibrateComponentParameter(\r\n    CalibrateComponentParameter event,\r\n    Emitter<CalibrationState> emit,\r\n  ) async {\r\n    try {\r\n      final component = await _componentRepository.getComponent(event.componentName);\r\n      if (component == null) {\r\n        emit(state.copyWith(error: 'Component not found'));\r\n        return;\r\n      }\r\n\r\n      component.updateMinValues({event.parameter: event.minValue});\r\n      component.updateMaxValues({event.parameter: event.maxValue});\r\n\r\n      await _componentRepository.saveComponentState(component);\r\n\r\n      // No state change needed for the calibration bloc as this affects component state\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: 'Failed to calibrate parameter: $error',\r\n      ));\r\n    }\r\n  }\r\n\r\n  void _onClearCalibrationError(\r\n    ClearCalibrationError event,\r\n    Emitter<CalibrationState> emit,\r\n  ) {\r\n    emit(state.copyWith(error: null));\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    // Clean up any resources if needed\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}