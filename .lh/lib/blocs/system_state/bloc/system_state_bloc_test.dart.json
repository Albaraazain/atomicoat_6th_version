{
    "sourceFile": "lib/blocs/system_state/bloc/system_state_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734301795778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734301807993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n+import 'package:mocktail/mocktail.dart';\r\n \r\n @GenerateMocks([SystemStateRepository])\r\n void main() {\r\n   late SystemStateBloc bloc;\r\n"
                },
                {
                    "date": 1734301904634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n-import 'package:mocktail/mocktail.dart';\r\n \r\n @GenerateMocks([SystemStateRepository])\r\n void main() {\r\n   late SystemStateBloc bloc;\r\n"
                },
                {
                    "date": 1734301978127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,12 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n \r\n-@GenerateMocks([SystemStateRepository])\r\n+// Generate mock class\r\n+@GenerateNiceMocks([MockSpec<SystemStateRepository>()])\r\n+import 'system_state_bloc_test.mocks.dart';\r\n+\r\n void main() {\r\n   late SystemStateBloc bloc;\r\n   late MockSystemStateRepository repository;\r\n \r\n@@ -69,243 +72,6 @@\n               state.isLoading == false),\r\n         ]),\r\n       );\r\n     });\r\n-\r\n-    test('handles initialization error', () async {\r\n-      when(repository.getSystemState())\r\n-          .thenThrow(Exception('Test error'));\r\n-\r\n-      bloc.add(InitializeSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.initializing &&\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.error &&\r\n-              state.error != null &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-    });\r\n   });\r\n-\r\n-  group('System State Operations', () {\r\n-    test('starts system when ready', () async {\r\n-      // Setup initial state\r\n-      bloc = SystemStateBloc(repository);\r\n-      when(repository.saveSystemState(any))\r\n-          .thenAnswer((_) async => {});\r\n-\r\n-      final readyState = SystemStateState(\r\n-        status: SystemOperationalStatus.ready,\r\n-        isSystemRunning: false,\r\n-        systemIssues: [],\r\n-      );\r\n-\r\n-      bloc.emit(readyState);\r\n-      bloc.add(StartSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.running &&\r\n-              state.isSystemRunning == true &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-\r\n-      verify(repository.saveSystemState(any)).called(1);\r\n-    });\r\n-\r\n-    test('cannot start system with issues', () async {\r\n-      bloc = SystemStateBloc(repository);\r\n-      final stateWithIssues = SystemStateState(\r\n-        status: SystemOperationalStatus.ready,\r\n-        isSystemRunning: false,\r\n-        systemIssues: ['Test issue'],\r\n-      );\r\n-\r\n-      bloc.emit(stateWithIssues);\r\n-      bloc.add(StartSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emits(predicate<SystemStateState>((state) =>\r\n-            state.error == 'System cannot be started in current state')),\r\n-      );\r\n-\r\n-      verifyNever(repository.saveSystemState(any));\r\n-    });\r\n-\r\n-    test('handles emergency stop from any state', () async {\r\n-      when(repository.saveSystemState(any))\r\n-          .thenAnswer((_) async => {});\r\n-\r\n-      bloc.add(EmergencyStop());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.emergencyStopped &&\r\n-              state.isSystemRunning == false &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-\r\n-      verify(repository.saveSystemState(any)).called(1);\r\n-    });\r\n-  });\r\n-\r\n-  group('System Parameter Updates', () {\r\n-    test('updates component parameters correctly', () async {\r\n-      final initialState = {\r\n-        'components': {\r\n-          'component1': {\r\n-            'currentValues': {'temp': 20.0},\r\n-          }\r\n-        }\r\n-      };\r\n-\r\n-      bloc = SystemStateBloc(repository);\r\n-      bloc.emit(SystemStateState(currentSystemState: initialState));\r\n-\r\n-      when(repository.saveSystemState(any))\r\n-          .thenAnswer((_) async => {});\r\n-\r\n-      final updates = {\r\n-        'component1': {'temp': 25.0}\r\n-      };\r\n-\r\n-      bloc.add(UpdateSystemParameters(updates));\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) {\r\n-            final comp = state.currentSystemState['components']['component1'];\r\n-            return comp['currentValues']['temp'] == 25.0 &&\r\n-                   state.isLoading == false;\r\n-          }),\r\n-        ]),\r\n-      );\r\n-    });\r\n-  });\r\n-\r\n-  group('System Validation', () {\r\n-    test('detects component value mismatches', () async {\r\n-      final stateWithMismatch = {\r\n-        'components': {\r\n-          'component1': {\r\n-            'isActivated': true,\r\n-            'currentValues': {'temp': 25.0},\r\n-            'setValues': {'temp': 20.0},\r\n-          }\r\n-        }\r\n-      };\r\n-\r\n-      bloc = SystemStateBloc(repository);\r\n-      bloc.emit(SystemStateState(currentSystemState: stateWithMismatch));\r\n-\r\n-      bloc.add(CheckSystemReadiness());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.systemIssues.isNotEmpty &&\r\n-              state.systemIssues.first.contains('mismatch') &&\r\n-              state.isReadinessCheckPassed == false &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-    });\r\n-\r\n-    test('validates parameter bounds', () async {\r\n-      final stateWithOutOfBounds = {\r\n-        'components': {\r\n-          'component1': {\r\n-            'currentValues': {'temp': 100.0},\r\n-            'minValues': {'temp': 0.0},\r\n-            'maxValues': {'temp': 50.0},\r\n-          }\r\n-        }\r\n-      };\r\n-\r\n-      bloc = SystemStateBloc(repository);\r\n-      bloc.emit(SystemStateState(currentSystemState: stateWithOutOfBounds));\r\n-\r\n-      bloc.add(ValidateSystemState());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.systemIssues.isNotEmpty &&\r\n-              state.systemIssues.first.contains('above maximum') &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-    });\r\n-  });\r\n-\r\n-  group('System State Stream', () {\r\n-    test('handles stream updates correctly', () async {\r\n-      final mockState = SystemStateData(\r\n-        id: '1',\r\n-        data: {'status': 'running'},\r\n-        timestamp: DateTime.now(),\r\n-      );\r\n-\r\n-      when(repository.systemStateStream())\r\n-          .thenAnswer((_) => Stream.value(mockState));\r\n-      when(repository.saveSystemState(any))\r\n-          .thenAnswer((_) async => {});\r\n-\r\n-      bloc.add(InitializeSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.initializing),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.ready),\r\n-        ]),\r\n-      );\r\n-    });\r\n-\r\n-    test('handles stream errors', () async {\r\n-      when(repository.systemStateStream())\r\n-          .thenAnswer((_) => Stream.error(Exception('Stream error')));\r\n-      when(repository.saveSystemState(any))\r\n-          .thenAnswer((_) async => {});\r\n-\r\n-      bloc.add(InitializeSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.initializing),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.currentSystemState.containsKey('error')),\r\n-        ]),\r\n-      );\r\n-    });\r\n-  });\r\n-}\n\\ No newline at end of file\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734302023323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,12 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n \r\n // Generate mock class\r\n-@GenerateNiceMocks([MockSpec<SystemStateRepository>()])\r\n-import 'system_state_bloc_test.mocks.dart';\r\n+@GenerateNiceMocks([\r\n+  MockSpec<SystemStateRepository>(),\r\n+])\r\n+class TestHelper {}\r\n \r\n void main() {\r\n   late SystemStateBloc bloc;\r\n   late MockSystemStateRepository repository;\r\n@@ -73,5 +75,5 @@\n         ]),\r\n       );\r\n     });\r\n   });\r\n-});\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734301795778,
            "name": "Commit-0",
            "content": "// lib/blocs/system_state/bloc/system_state_bloc_test.dart\r\n\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mockito/mockito.dart';\r\nimport 'package:mockito/annotations.dart';\r\nimport 'package:experiment_planner/repositories/system_state_repository.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\nimport 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n\r\n@GenerateMocks([SystemStateRepository])\r\nvoid main() {\r\n  late SystemStateBloc bloc;\r\n  late MockSystemStateRepository repository;\r\n\r\n  setUp(() {\r\n    repository = MockSystemStateRepository();\r\n    bloc = SystemStateBloc(repository);\r\n  });\r\n\r\n  tearDown(() {\r\n    bloc.close();\r\n  });\r\n\r\n  group('SystemStateBloc Initialization', () {\r\n    test('initial state is correct', () {\r\n      expect(bloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n      expect(bloc.state.isSystemRunning, isFalse);\r\n      expect(bloc.state.systemIssues, isEmpty);\r\n      expect(bloc.state.currentSystemState, isEmpty);\r\n      expect(bloc.state.lastStateUpdate, isNull);\r\n      expect(bloc.state.isReadinessCheckPassed, isFalse);\r\n      expect(bloc.state.isLoading, isFalse);\r\n      expect(bloc.state.error, isNull);\r\n    });\r\n\r\n    test('initializes with existing state', () async {\r\n      final mockState = SystemStateData(\r\n        id: '1',\r\n        data: {\r\n          'components': {\r\n            'component1': {\r\n              'isActivated': true,\r\n              'currentValues': {'temp': 25.0},\r\n              'setValues': {'temp': 25.0},\r\n            }\r\n          }\r\n        },\r\n        timestamp: DateTime.now(),\r\n      );\r\n\r\n      when(repository.getSystemState())\r\n          .thenAnswer((_) async => mockState);\r\n      when(repository.systemStateStream())\r\n          .thenAnswer((_) => Stream.value(mockState));\r\n\r\n      bloc.add(InitializeSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.initializing &&\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.ready &&\r\n              state.currentSystemState == mockState.data &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n    });\r\n\r\n    test('handles initialization error', () async {\r\n      when(repository.getSystemState())\r\n          .thenThrow(Exception('Test error'));\r\n\r\n      bloc.add(InitializeSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.initializing &&\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.error &&\r\n              state.error != null &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n\r\n  group('System State Operations', () {\r\n    test('starts system when ready', () async {\r\n      // Setup initial state\r\n      bloc = SystemStateBloc(repository);\r\n      when(repository.saveSystemState(any))\r\n          .thenAnswer((_) async => {});\r\n\r\n      final readyState = SystemStateState(\r\n        status: SystemOperationalStatus.ready,\r\n        isSystemRunning: false,\r\n        systemIssues: [],\r\n      );\r\n\r\n      bloc.emit(readyState);\r\n      bloc.add(StartSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.running &&\r\n              state.isSystemRunning == true &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n\r\n      verify(repository.saveSystemState(any)).called(1);\r\n    });\r\n\r\n    test('cannot start system with issues', () async {\r\n      bloc = SystemStateBloc(repository);\r\n      final stateWithIssues = SystemStateState(\r\n        status: SystemOperationalStatus.ready,\r\n        isSystemRunning: false,\r\n        systemIssues: ['Test issue'],\r\n      );\r\n\r\n      bloc.emit(stateWithIssues);\r\n      bloc.add(StartSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emits(predicate<SystemStateState>((state) =>\r\n            state.error == 'System cannot be started in current state')),\r\n      );\r\n\r\n      verifyNever(repository.saveSystemState(any));\r\n    });\r\n\r\n    test('handles emergency stop from any state', () async {\r\n      when(repository.saveSystemState(any))\r\n          .thenAnswer((_) async => {});\r\n\r\n      bloc.add(EmergencyStop());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.emergencyStopped &&\r\n              state.isSystemRunning == false &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n\r\n      verify(repository.saveSystemState(any)).called(1);\r\n    });\r\n  });\r\n\r\n  group('System Parameter Updates', () {\r\n    test('updates component parameters correctly', () async {\r\n      final initialState = {\r\n        'components': {\r\n          'component1': {\r\n            'currentValues': {'temp': 20.0},\r\n          }\r\n        }\r\n      };\r\n\r\n      bloc = SystemStateBloc(repository);\r\n      bloc.emit(SystemStateState(currentSystemState: initialState));\r\n\r\n      when(repository.saveSystemState(any))\r\n          .thenAnswer((_) async => {});\r\n\r\n      final updates = {\r\n        'component1': {'temp': 25.0}\r\n      };\r\n\r\n      bloc.add(UpdateSystemParameters(updates));\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) {\r\n            final comp = state.currentSystemState['components']['component1'];\r\n            return comp['currentValues']['temp'] == 25.0 &&\r\n                   state.isLoading == false;\r\n          }),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n\r\n  group('System Validation', () {\r\n    test('detects component value mismatches', () async {\r\n      final stateWithMismatch = {\r\n        'components': {\r\n          'component1': {\r\n            'isActivated': true,\r\n            'currentValues': {'temp': 25.0},\r\n            'setValues': {'temp': 20.0},\r\n          }\r\n        }\r\n      };\r\n\r\n      bloc = SystemStateBloc(repository);\r\n      bloc.emit(SystemStateState(currentSystemState: stateWithMismatch));\r\n\r\n      bloc.add(CheckSystemReadiness());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.systemIssues.isNotEmpty &&\r\n              state.systemIssues.first.contains('mismatch') &&\r\n              state.isReadinessCheckPassed == false &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n    });\r\n\r\n    test('validates parameter bounds', () async {\r\n      final stateWithOutOfBounds = {\r\n        'components': {\r\n          'component1': {\r\n            'currentValues': {'temp': 100.0},\r\n            'minValues': {'temp': 0.0},\r\n            'maxValues': {'temp': 50.0},\r\n          }\r\n        }\r\n      };\r\n\r\n      bloc = SystemStateBloc(repository);\r\n      bloc.emit(SystemStateState(currentSystemState: stateWithOutOfBounds));\r\n\r\n      bloc.add(ValidateSystemState());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.systemIssues.isNotEmpty &&\r\n              state.systemIssues.first.contains('above maximum') &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n\r\n  group('System State Stream', () {\r\n    test('handles stream updates correctly', () async {\r\n      final mockState = SystemStateData(\r\n        id: '1',\r\n        data: {'status': 'running'},\r\n        timestamp: DateTime.now(),\r\n      );\r\n\r\n      when(repository.systemStateStream())\r\n          .thenAnswer((_) => Stream.value(mockState));\r\n      when(repository.saveSystemState(any))\r\n          .thenAnswer((_) async => {});\r\n\r\n      bloc.add(InitializeSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.initializing),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.ready),\r\n        ]),\r\n      );\r\n    });\r\n\r\n    test('handles stream errors', () async {\r\n      when(repository.systemStateStream())\r\n          .thenAnswer((_) => Stream.error(Exception('Stream error')));\r\n      when(repository.saveSystemState(any))\r\n          .thenAnswer((_) async => {});\r\n\r\n      bloc.add(InitializeSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.initializing),\r\n          predicate<SystemStateState>((state) =>\r\n              state.currentSystemState.containsKey('error')),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n}"
        }
    ]
}