{
    "sourceFile": "lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734049554698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734049618426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n // lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import '../../../safety/bloc/safety_bloc.dart';\r\n-import '../../../safety/bloc/safety_event.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n import 'parameter_monitoring_bloc.dart';\r\n import 'parameter_monitoring_event.dart';\r\n import 'parameter_monitoring_state.dart';\r\n \r\n@@ -13,10 +14,26 @@\n void main() {\r\n   late ParameterMonitoringBloc monitoringBloc;\r\n   late MockSafetyBloc safetyBloc;\r\n \r\n+  setUpAll(() {\r\n+    registerFallbackValue(SafetyError(\r\n+      id: 'dummy',\r\n+      description: 'dummy',\r\n+      severity: SafetyErrorSeverity.warning,\r\n+    ));\r\n+    registerFallbackValue(SafetyErrorDetected(\r\n+      SafetyError(\r\n+        id: 'dummy',\r\n+        description: 'dummy',\r\n+        severity: SafetyErrorSeverity.warning,\r\n+      ),\r\n+    ));\r\n+  });\r\n+\r\n   setUp(() {\r\n     safetyBloc = MockSafetyBloc();\r\n+    when(() => safetyBloc.add(any())).thenAnswer((_) async {});\r\n     monitoringBloc = ParameterMonitoringBloc(safetyBloc: safetyBloc);\r\n   });\r\n \r\n   tearDown(() {\r\n"
                },
                {
                    "date": 1734049707090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,15 @@\n       'pressure': {'min': 1.0, 'max': 2.0},\r\n     };\r\n \r\n     test('initial state is correct', () {\r\n-      expect(monitoringBloc.state, equals(ParameterMonitoringState.initial()));\r\n+      final state = monitoringBloc.state;\r\n+      expect(state.isLoading, false);\r\n+      expect(state.error, null);\r\n+      expect(state.monitoringStatus, isEmpty);\r\n+      expect(state.currentValues, isEmpty);\r\n+      expect(state.thresholds, isEmpty);\r\n+      expect(state.violations, isEmpty);\r\n     });\r\n \r\n     blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n       'starts monitoring with thresholds',\r\n@@ -57,38 +63,41 @@\n         componentId: 'test-component',\r\n         thresholds: testThresholds,\r\n       )),\r\n       expect: () => [\r\n-        predicate<ParameterMonitoringState>((state) =>\r\n-          state.monitoringStatus['test-component'] == true &&\r\n-          state.thresholds['test-component'] == testThresholds\r\n-        ),\r\n+        isA<ParameterMonitoringState>()\r\n+          .having((s) => s.monitoringStatus['test-component'], 'monitoring active', true)\r\n+          .having((s) => s.thresholds['test-component'], 'thresholds set', testThresholds),\r\n       ],\r\n     );\r\n \r\n     blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n       'detects threshold violations',\r\n       build: () => monitoringBloc,\r\n-      act: (bloc) async {\r\n-        bloc.add(StartParameterMonitoring(\r\n-          componentId: 'test-component',\r\n-          thresholds: testThresholds,\r\n-        ));\r\n-        await Future.delayed(Duration(milliseconds: 10));\r\n-        bloc.add(ParameterValueUpdated(\r\n-          componentId: 'test-component',\r\n-          parameterName: 'temperature',\r\n-          value: 35.0, // Above max threshold\r\n-        ));\r\n-      },\r\n+      seed: () => ParameterMonitoringState(\r\n+        isLoading: false,\r\n+        monitoringStatus: {'test-component': true},\r\n+        currentValues: const {},\r\n+        thresholds: {'test-component': testThresholds},\r\n+        violations: const {},\r\n+      ),\r\n+      act: (bloc) => bloc.add(ParameterValueUpdated(\r\n+        componentId: 'test-component',\r\n+        parameterName: 'temperature',\r\n+        value: 35.0, // Above max threshold\r\n+      )),\r\n       expect: () => [\r\n-        predicate<ParameterMonitoringState>((state) =>\r\n-          state.monitoringStatus['test-component'] == true\r\n-        ),\r\n-        predicate<ParameterMonitoringState>((state) =>\r\n-          state.violations['test-component']?['temperature'] == true &&\r\n-          state.currentValues['test-component']?['temperature'] == 35.0\r\n-        ),\r\n+        isA<ParameterMonitoringState>()\r\n+          .having(\r\n+            (s) => s.violations['test-component']?['temperature'],\r\n+            'temperature violation',\r\n+            true,\r\n+          )\r\n+          .having(\r\n+            (s) => s.currentValues['test-component']?['temperature'],\r\n+            'temperature value',\r\n+            35.0,\r\n+          ),\r\n       ],\r\n       verify: (_) {\r\n         verify(() => safetyBloc.add(any())).called(1);\r\n       },\r\n"
                },
                {
                    "date": 1734049855504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,13 +74,16 @@\n       'detects threshold violations',\r\n       build: () => monitoringBloc,\r\n       seed: () => ParameterMonitoringState(\r\n         isLoading: false,\r\n+        error: null,\r\n+        lastUpdated: DateTime.now(),\r\n         monitoringStatus: {'test-component': true},\r\n         currentValues: const {},\r\n         thresholds: {'test-component': testThresholds},\r\n         violations: const {},\r\n       ),\r\n+      wait: const Duration(milliseconds: 100),\r\n       act: (bloc) => bloc.add(ParameterValueUpdated(\r\n         componentId: 'test-component',\r\n         parameterName: 'temperature',\r\n         value: 35.0, // Above max threshold\r\n"
                }
            ],
            "date": 1734049554698,
            "name": "Commit-0",
            "content": "// lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc_test.dart\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport '../../../safety/bloc/safety_bloc.dart';\r\nimport '../../../safety/bloc/safety_event.dart';\r\nimport 'parameter_monitoring_bloc.dart';\r\nimport 'parameter_monitoring_event.dart';\r\nimport 'parameter_monitoring_state.dart';\r\n\r\nclass MockSafetyBloc extends Mock implements SafetyBloc {}\r\n\r\nvoid main() {\r\n  late ParameterMonitoringBloc monitoringBloc;\r\n  late MockSafetyBloc safetyBloc;\r\n\r\n  setUp(() {\r\n    safetyBloc = MockSafetyBloc();\r\n    monitoringBloc = ParameterMonitoringBloc(safetyBloc: safetyBloc);\r\n  });\r\n\r\n  tearDown(() {\r\n    monitoringBloc.close();\r\n  });\r\n\r\n  group('ParameterMonitoringBloc', () {\r\n    final testThresholds = {\r\n      'temperature': {'min': 20.0, 'max': 30.0},\r\n      'pressure': {'min': 1.0, 'max': 2.0},\r\n    };\r\n\r\n    test('initial state is correct', () {\r\n      expect(monitoringBloc.state, equals(ParameterMonitoringState.initial()));\r\n    });\r\n\r\n    blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n      'starts monitoring with thresholds',\r\n      build: () => monitoringBloc,\r\n      act: (bloc) => bloc.add(StartParameterMonitoring(\r\n        componentId: 'test-component',\r\n        thresholds: testThresholds,\r\n      )),\r\n      expect: () => [\r\n        predicate<ParameterMonitoringState>((state) =>\r\n          state.monitoringStatus['test-component'] == true &&\r\n          state.thresholds['test-component'] == testThresholds\r\n        ),\r\n      ],\r\n    );\r\n\r\n    blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n      'detects threshold violations',\r\n      build: () => monitoringBloc,\r\n      act: (bloc) async {\r\n        bloc.add(StartParameterMonitoring(\r\n          componentId: 'test-component',\r\n          thresholds: testThresholds,\r\n        ));\r\n        await Future.delayed(Duration(milliseconds: 10));\r\n        bloc.add(ParameterValueUpdated(\r\n          componentId: 'test-component',\r\n          parameterName: 'temperature',\r\n          value: 35.0, // Above max threshold\r\n        ));\r\n      },\r\n      expect: () => [\r\n        predicate<ParameterMonitoringState>((state) =>\r\n          state.monitoringStatus['test-component'] == true\r\n        ),\r\n        predicate<ParameterMonitoringState>((state) =>\r\n          state.violations['test-component']?['temperature'] == true &&\r\n          state.currentValues['test-component']?['temperature'] == 35.0\r\n        ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => safetyBloc.add(any())).called(1);\r\n      },\r\n    );\r\n  });\r\n}"
        }
    ]
}