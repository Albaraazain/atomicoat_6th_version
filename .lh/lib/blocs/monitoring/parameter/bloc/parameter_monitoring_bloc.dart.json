{
    "sourceFile": "lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734049507937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734049516701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n // lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart\r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n+import 'package:experiment_planner/blocs/utils/bloc_utils.dart';\r\n import '../../../safety/bloc/safety_bloc.dart';\r\n import '../../../../modules/system_operation_also_main_module/models/safety_error.dart';\r\n-import '../../utils/bloc_utils.dart';\r\n import 'parameter_monitoring_event.dart';\r\n import 'parameter_monitoring_state.dart';\r\n \r\n class ParameterMonitoringBloc extends Bloc<ParameterMonitoringEvent, ParameterMonitoringState> {\r\n"
                },
                {
                    "date": 1734049641325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n // lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart\r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n import 'package:experiment_planner/blocs/utils/bloc_utils.dart';\r\n-import '../../../safety/bloc/safety_bloc.dart';\r\n-import '../../../../modules/system_operation_also_main_module/models/safety_error.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n import 'parameter_monitoring_event.dart';\r\n import 'parameter_monitoring_state.dart';\r\n \r\n class ParameterMonitoringBloc extends Bloc<ParameterMonitoringEvent, ParameterMonitoringState> {\r\n@@ -78,15 +78,9 @@\n         final min = thresholds['min'] ?? double.negativeInfinity;\r\n         final max = thresholds['max'] ?? double.infinity;\r\n \r\n         if (event.value < min || event.value > max) {\r\n-          _safetyBloc.add(SafetyErrorDetected(\r\n-            SafetyError(\r\n-              id: '${event.componentId}-${event.parameterName}-${DateTime.now().millisecondsSinceEpoch}',\r\n-              description: 'Parameter ${event.parameterName} out of range in ${event.componentId}',\r\n-              severity: event.value < min ? SafetyErrorSeverity.warning : SafetyErrorSeverity.critical,\r\n-            ),\r\n-          ));\r\n+          _checkThresholdViolation(event.componentId, event.parameterName, event.value);\r\n \r\n           // Update violations map\r\n           final componentViolations = state.violations[event.componentId] ?? {};\r\n           final updatedViolations = Map<String, Map<String, bool>>.from(state.violations)\r\n@@ -129,8 +123,18 @@\n       emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n \r\n+  void _checkThresholdViolation(String componentId, String parameterName, double value) {\r\n+    _safetyBloc.add(SafetyErrorDetected(\r\n+      SafetyError(\r\n+        id: '$componentId-$parameterName-${DateTime.now().millisecondsSinceEpoch}',\r\n+        description: 'Parameter $parameterName exceeded threshold: $value',\r\n+        severity: SafetyErrorSeverity.warning,\r\n+      ),\r\n+    ));\r\n+  }\r\n+\r\n   @override\r\n   Future<void> close() {\r\n     for (var subscription in _monitoringSubscriptions.values) {\r\n       subscription.cancel();\r\n"
                },
                {
                    "date": 1734049793405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,22 +78,24 @@\n         final min = thresholds['min'] ?? double.negativeInfinity;\r\n         final max = thresholds['max'] ?? double.infinity;\r\n \r\n         if (event.value < min || event.value > max) {\r\n-          _checkThresholdViolation(event.componentId, event.parameterName, event.value);\r\n-\r\n           // Update violations map\r\n           final componentViolations = state.violations[event.componentId] ?? {};\r\n           final updatedViolations = Map<String, Map<String, bool>>.from(state.violations)\r\n             ..[event.componentId] = {\r\n               ...componentViolations,\r\n               event.parameterName: true,\r\n             };\r\n \r\n+          // First emit state update\r\n           emit(state.copyWith(\r\n             currentValues: updatedValues,\r\n             violations: updatedViolations,\r\n           ));\r\n+\r\n+          // Then notify safety bloc\r\n+          _checkThresholdViolation(event.componentId, event.parameterName, event.value);\r\n           return;\r\n         }\r\n       }\r\n \r\n"
                },
                {
                    "date": 1734049854247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,21 +86,29 @@\n               ...componentViolations,\r\n               event.parameterName: true,\r\n             };\r\n \r\n-          // First emit state update\r\n+          // Emit state update\r\n           emit(state.copyWith(\r\n             currentValues: updatedValues,\r\n             violations: updatedViolations,\r\n+            lastUpdated: DateTime.now(),\r\n           ));\r\n \r\n-          // Then notify safety bloc\r\n+          // Notify safety bloc after state update\r\n           _checkThresholdViolation(event.componentId, event.parameterName, event.value);\r\n-          return;\r\n+        } else {\r\n+          emit(state.copyWith(\r\n+            currentValues: updatedValues,\r\n+            lastUpdated: DateTime.now(),\r\n+          ));\r\n         }\r\n+      } else {\r\n+        emit(state.copyWith(\r\n+          currentValues: updatedValues,\r\n+          lastUpdated: DateTime.now(),\r\n+        ));\r\n       }\r\n-\r\n-      emit(state.copyWith(currentValues: updatedValues));\r\n     } catch (error) {\r\n       emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n"
                }
            ],
            "date": 1734049507937,
            "name": "Commit-0",
            "content": "// lib/blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../../../safety/bloc/safety_bloc.dart';\r\nimport '../../../../modules/system_operation_also_main_module/models/safety_error.dart';\r\nimport '../../utils/bloc_utils.dart';\r\nimport 'parameter_monitoring_event.dart';\r\nimport 'parameter_monitoring_state.dart';\r\n\r\nclass ParameterMonitoringBloc extends Bloc<ParameterMonitoringEvent, ParameterMonitoringState> {\r\n  final SafetyBloc _safetyBloc;\r\n  final Map<String, StreamSubscription> _monitoringSubscriptions = {};\r\n\r\n  ParameterMonitoringBloc({\r\n    required SafetyBloc safetyBloc,\r\n  }) : _safetyBloc = safetyBloc,\r\n       super(ParameterMonitoringState.initial()) {\r\n    on<StartParameterMonitoring>(_onStartMonitoring);\r\n    on<StopParameterMonitoring>(_onStopMonitoring);\r\n    on<ParameterValueUpdated>(_onParameterValueUpdated);\r\n    on<UpdateParameterThresholds>(_onUpdateThresholds);\r\n  }\r\n\r\n  Future<void> _onStartMonitoring(\r\n    StartParameterMonitoring event,\r\n    Emitter<ParameterMonitoringState> emit,\r\n  ) async {\r\n    try {\r\n      final updatedStatus = Map<String, bool>.from(state.monitoringStatus)\r\n        ..[event.componentId] = true;\r\n\r\n      final updatedThresholds = Map<String, Map<String, Map<String, double>>>.from(state.thresholds)\r\n        ..[event.componentId] = event.thresholds;\r\n\r\n      emit(state.copyWith(\r\n        monitoringStatus: updatedStatus,\r\n        thresholds: updatedThresholds,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  Future<void> _onStopMonitoring(\r\n    StopParameterMonitoring event,\r\n    Emitter<ParameterMonitoringState> emit,\r\n  ) async {\r\n    try {\r\n      await _monitoringSubscriptions[event.componentId]?.cancel();\r\n      _monitoringSubscriptions.remove(event.componentId);\r\n\r\n      final updatedStatus = Map<String, bool>.from(state.monitoringStatus)\r\n        ..remove(event.componentId);\r\n\r\n      emit(state.copyWith(monitoringStatus: updatedStatus));\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  Future<void> _onParameterValueUpdated(\r\n    ParameterValueUpdated event,\r\n    Emitter<ParameterMonitoringState> emit,\r\n  ) async {\r\n    try {\r\n      // Update current values\r\n      final componentValues = state.currentValues[event.componentId] ?? {};\r\n      final updatedComponentValues = Map<String, double>.from(componentValues)\r\n        ..[event.parameterName] = event.value;\r\n\r\n      final updatedValues = Map<String, Map<String, double>>.from(state.currentValues)\r\n        ..[event.componentId] = updatedComponentValues;\r\n\r\n      // Check thresholds\r\n      final thresholds = state.thresholds[event.componentId]?[event.parameterName];\r\n      if (thresholds != null) {\r\n        final min = thresholds['min'] ?? double.negativeInfinity;\r\n        final max = thresholds['max'] ?? double.infinity;\r\n\r\n        if (event.value < min || event.value > max) {\r\n          _safetyBloc.add(SafetyErrorDetected(\r\n            SafetyError(\r\n              id: '${event.componentId}-${event.parameterName}-${DateTime.now().millisecondsSinceEpoch}',\r\n              description: 'Parameter ${event.parameterName} out of range in ${event.componentId}',\r\n              severity: event.value < min ? SafetyErrorSeverity.warning : SafetyErrorSeverity.critical,\r\n            ),\r\n          ));\r\n\r\n          // Update violations map\r\n          final componentViolations = state.violations[event.componentId] ?? {};\r\n          final updatedViolations = Map<String, Map<String, bool>>.from(state.violations)\r\n            ..[event.componentId] = {\r\n              ...componentViolations,\r\n              event.parameterName: true,\r\n            };\r\n\r\n          emit(state.copyWith(\r\n            currentValues: updatedValues,\r\n            violations: updatedViolations,\r\n          ));\r\n          return;\r\n        }\r\n      }\r\n\r\n      emit(state.copyWith(currentValues: updatedValues));\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  Future<void> _onUpdateThresholds(\r\n    UpdateParameterThresholds event,\r\n    Emitter<ParameterMonitoringState> emit,\r\n  ) async {\r\n    try {\r\n      final componentThresholds = state.thresholds[event.componentId] ?? {};\r\n      final updatedComponentThresholds = Map<String, Map<String, double>>.from(componentThresholds)\r\n        ..[event.parameterName] = {\r\n          'min': event.minValue,\r\n          'max': event.maxValue,\r\n        };\r\n\r\n      final updatedThresholds = Map<String, Map<String, Map<String, double>>>.from(state.thresholds)\r\n        ..[event.componentId] = updatedComponentThresholds;\r\n\r\n      emit(state.copyWith(thresholds: updatedThresholds));\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    for (var subscription in _monitoringSubscriptions.values) {\r\n      subscription.cancel();\r\n    }\r\n    _monitoringSubscriptions.clear();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}