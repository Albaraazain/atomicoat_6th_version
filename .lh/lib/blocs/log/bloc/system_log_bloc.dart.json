{
    "sourceFile": "lib/blocs/log/bloc/system_log_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734050442910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734050449831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n // lib/blocs/log/bloc/system_log_bloc.dart\r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/repositories/system_log_entry_repository.dart';\r\n import '../../../../services/auth_service.dart';\r\n import '../../utils/bloc_utils.dart';\r\n-import '../repository/system_log_repository.dart';\r\n import 'system_log_event.dart';\r\n import 'system_log_state.dart';\r\n \r\n class SystemLogBloc extends Bloc<SystemLogEvent, SystemLogState> {\r\n"
                },
                {
                    "date": 1734050631648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,15 @@\n // lib/blocs/log/bloc/system_log_bloc.dart\r\n-import 'dart:async';\r\n-import 'package:bloc/bloc.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/repositories/system_log_entry_repository.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_log_entry.dart';\r\n-import 'package:experiment_planner/repositories/system_log_entry_repository.dart';\r\n-import '../../../../services/auth_service.dart';\r\n-import '../../utils/bloc_utils.dart';\r\n import 'system_log_event.dart';\r\n import 'system_log_state.dart';\r\n \r\n class SystemLogBloc extends Bloc<SystemLogEvent, SystemLogState> {\r\n   final SystemLogEntryRepository _repository;\r\n   final AuthService _authService;\r\n-  StreamSubscription? _logSubscription;\r\n \r\n   SystemLogBloc({\r\n     required SystemLogEntryRepository repository,\r\n     required AuthService authService,\r\n@@ -21,75 +18,55 @@\n         super(SystemLogState.initial()) {\r\n     on<LogEntryAdded>(_onLogEntryAdded);\r\n     on<LogEntriesLoaded>(_onLogEntriesLoaded);\r\n     on<LogEntriesFiltered>(_onLogEntriesFiltered);\r\n-    on<LogStreamStarted>(_onLogStreamStarted);\r\n-    on<LogStreamStopped>(_onLogStreamStopped);\r\n   }\r\n \r\n   Future<void> _onLogEntryAdded(\r\n     LogEntryAdded event,\r\n     Emitter<SystemLogState> emit,\r\n   ) async {\r\n+    final userId = _authService.currentUserId;\r\n+    if (userId == null) {\r\n+      emit(state.copyWith(error: 'User not authenticated'));\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n-      final userId = _authService.currentUserId;\r\n-      if (userId == null) {\r\n-        emit(state.copyWith(\r\n-          error: 'User not authenticated',\r\n-        ));\r\n-        return;\r\n-      }\r\n-\r\n-      final entry = SystemLogEntry(\r\n-        timestamp: DateTime.now(),\r\n-        message: event.message,\r\n-        severity: event.severity,\r\n+      await _repository.add(event.message, event.severity, userId: userId);\r\n+      final entries = [...state.entries];\r\n+      entries.insert(\r\n+        0,\r\n+        SystemLogEntry(\r\n+          timestamp: DateTime.now(),\r\n+          message: event.message,\r\n+          severity: event.severity,\r\n+        ),\r\n       );\r\n-\r\n-      await _repository.add(\r\n-        DateTime.now().millisecondsSinceEpoch.toString(),\r\n-        entry,\r\n-        userId: userId,\r\n-      );\r\n-\r\n-      final updatedEntries = [entry, ...state.entries];\r\n-      emit(state.copyWith(\r\n-        entries: updatedEntries,\r\n-        lastUpdated: DateTime.now(),\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-      ));\r\n+      emit(state.copyWith(entries: entries));\r\n+    } catch (e) {\r\n+      emit(state.copyWith(error: e.toString()));\r\n     }\r\n   }\r\n \r\n   Future<void> _onLogEntriesLoaded(\r\n     LogEntriesLoaded event,\r\n     Emitter<SystemLogState> emit,\r\n   ) async {\r\n+    emit(state.copyWith(isLoading: true));\r\n     try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      final userId = _authService.currentUserId;\r\n-      if (userId == null) {\r\n-        emit(state.copyWith(\r\n-          error: 'User not authenticated',\r\n-          isLoading: false,\r\n-        ));\r\n-        return;\r\n-      }\r\n-\r\n-      final entries = await _repository.getRecentEntries(userId, limit: event.limit);\r\n+      final entries = await _repository.getRecentEntries(\r\n+        _authService.currentUserId!,\r\n+        limit: event.limit,\r\n+      );\r\n       emit(state.copyWith(\r\n         entries: entries,\r\n         isLoading: false,\r\n-        lastUpdated: DateTime.now(),\r\n         hasMoreEntries: entries.length >= event.limit,\r\n       ));\r\n-    } catch (error) {\r\n+    } catch (e) {\r\n       emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n+        error: e.toString(),\r\n         isLoading: false,\r\n       ));\r\n     }\r\n   }\r\n@@ -97,73 +74,25 @@\n   Future<void> _onLogEntriesFiltered(\r\n     LogEntriesFiltered event,\r\n     Emitter<SystemLogState> emit,\r\n   ) async {\r\n+    emit(state.copyWith(isLoading: true));\r\n     try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      final userId = _authService.currentUserId;\r\n-      if (userId == null) {\r\n-        emit(state.copyWith(\r\n-          error: 'User not authenticated',\r\n-          isLoading: false,\r\n-        ));\r\n-        return;\r\n-      }\r\n-\r\n       final entries = await _repository.getEntriesByDateRange(\r\n-        userId,\r\n+        _authService.currentUserId!,\r\n         event.startDate,\r\n         event.endDate,\r\n       );\r\n-\r\n-      final filteredEntries = event.severityFilter != null\r\n-          ? entries.where((e) => e.severity == event.severityFilter).toList()\r\n-          : entries;\r\n-\r\n       emit(state.copyWith(\r\n-        entries: filteredEntries,\r\n+        entries: entries,\r\n         isLoading: false,\r\n         startDate: event.startDate,\r\n         endDate: event.endDate,\r\n-        lastUpdated: DateTime.now(),\r\n       ));\r\n-    } catch (error) {\r\n+    } catch (e) {\r\n       emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n+        error: e.toString(),\r\n         isLoading: false,\r\n       ));\r\n     }\r\n   }\r\n-\r\n-  Future<void> _onLogStreamStarted(\r\n-    LogStreamStarted event,\r\n-    Emitter<SystemLogState> emit,\r\n-  ) async {\r\n-    await _logSubscription?.cancel();\r\n-\r\n-    final userId = _authService.currentUserId;\r\n-    if (userId == null) {\r\n-      emit(state.copyWith(\r\n-        error: 'User not authenticated',\r\n-      ));\r\n-      return;\r\n-    }\r\n-\r\n-    emit(state.copyWith(isStreaming: true));\r\n-  }\r\n-\r\n-  Future<void> _onLogStreamStopped(\r\n-    LogStreamStopped event,\r\n-    Emitter<SystemLogState> emit,\r\n-  ) async {\r\n-    await _logSubscription?.cancel();\r\n-    _logSubscription = null;\r\n-    emit(state.copyWith(isStreaming: false));\r\n-  }\r\n-\r\n-  @override\r\n-  Future<void> close() {\r\n-    _logSubscription?.cancel();\r\n-    return super.close();\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734050741508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-// lib/blocs/log/bloc/system_log_bloc.dart\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import 'package:experiment_planner/services/auth_service.dart';\r\n import 'package:experiment_planner/repositories/system_log_entry_repository.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_log_entry.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'system_log_event.dart';\r\n import 'system_log_state.dart';\r\n \r\n class SystemLogBloc extends Bloc<SystemLogEvent, SystemLogState> {\r\n"
                }
            ],
            "date": 1734050442910,
            "name": "Commit-0",
            "content": "// lib/blocs/log/bloc/system_log_bloc.dart\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../../../../services/auth_service.dart';\r\nimport '../../utils/bloc_utils.dart';\r\nimport '../repository/system_log_repository.dart';\r\nimport 'system_log_event.dart';\r\nimport 'system_log_state.dart';\r\n\r\nclass SystemLogBloc extends Bloc<SystemLogEvent, SystemLogState> {\r\n  final SystemLogEntryRepository _repository;\r\n  final AuthService _authService;\r\n  StreamSubscription? _logSubscription;\r\n\r\n  SystemLogBloc({\r\n    required SystemLogEntryRepository repository,\r\n    required AuthService authService,\r\n  })  : _repository = repository,\r\n        _authService = authService,\r\n        super(SystemLogState.initial()) {\r\n    on<LogEntryAdded>(_onLogEntryAdded);\r\n    on<LogEntriesLoaded>(_onLogEntriesLoaded);\r\n    on<LogEntriesFiltered>(_onLogEntriesFiltered);\r\n    on<LogStreamStarted>(_onLogStreamStarted);\r\n    on<LogStreamStopped>(_onLogStreamStopped);\r\n  }\r\n\r\n  Future<void> _onLogEntryAdded(\r\n    LogEntryAdded event,\r\n    Emitter<SystemLogState> emit,\r\n  ) async {\r\n    try {\r\n      final userId = _authService.currentUserId;\r\n      if (userId == null) {\r\n        emit(state.copyWith(\r\n          error: 'User not authenticated',\r\n        ));\r\n        return;\r\n      }\r\n\r\n      final entry = SystemLogEntry(\r\n        timestamp: DateTime.now(),\r\n        message: event.message,\r\n        severity: event.severity,\r\n      );\r\n\r\n      await _repository.add(\r\n        DateTime.now().millisecondsSinceEpoch.toString(),\r\n        entry,\r\n        userId: userId,\r\n      );\r\n\r\n      final updatedEntries = [entry, ...state.entries];\r\n      emit(state.copyWith(\r\n        entries: updatedEntries,\r\n        lastUpdated: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onLogEntriesLoaded(\r\n    LogEntriesLoaded event,\r\n    Emitter<SystemLogState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      final userId = _authService.currentUserId;\r\n      if (userId == null) {\r\n        emit(state.copyWith(\r\n          error: 'User not authenticated',\r\n          isLoading: false,\r\n        ));\r\n        return;\r\n      }\r\n\r\n      final entries = await _repository.getRecentEntries(userId, limit: event.limit);\r\n      emit(state.copyWith(\r\n        entries: entries,\r\n        isLoading: false,\r\n        lastUpdated: DateTime.now(),\r\n        hasMoreEntries: entries.length >= event.limit,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onLogEntriesFiltered(\r\n    LogEntriesFiltered event,\r\n    Emitter<SystemLogState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      final userId = _authService.currentUserId;\r\n      if (userId == null) {\r\n        emit(state.copyWith(\r\n          error: 'User not authenticated',\r\n          isLoading: false,\r\n        ));\r\n        return;\r\n      }\r\n\r\n      final entries = await _repository.getEntriesByDateRange(\r\n        userId,\r\n        event.startDate,\r\n        event.endDate,\r\n      );\r\n\r\n      final filteredEntries = event.severityFilter != null\r\n          ? entries.where((e) => e.severity == event.severityFilter).toList()\r\n          : entries;\r\n\r\n      emit(state.copyWith(\r\n        entries: filteredEntries,\r\n        isLoading: false,\r\n        startDate: event.startDate,\r\n        endDate: event.endDate,\r\n        lastUpdated: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onLogStreamStarted(\r\n    LogStreamStarted event,\r\n    Emitter<SystemLogState> emit,\r\n  ) async {\r\n    await _logSubscription?.cancel();\r\n\r\n    final userId = _authService.currentUserId;\r\n    if (userId == null) {\r\n      emit(state.copyWith(\r\n        error: 'User not authenticated',\r\n      ));\r\n      return;\r\n    }\r\n\r\n    emit(state.copyWith(isStreaming: true));\r\n  }\r\n\r\n  Future<void> _onLogStreamStopped(\r\n    LogStreamStopped event,\r\n    Emitter<SystemLogState> emit,\r\n  ) async {\r\n    await _logSubscription?.cancel();\r\n    _logSubscription = null;\r\n    emit(state.copyWith(isStreaming: false));\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _logSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}