{
    "sourceFile": "lib/blocs/simulation/models/component_simulation_behavior.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734072643879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734072651698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+// lib/blocs/simulation/models/component_simulation_behavior.dart\r\n+import 'dart:math';\r\n+import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n+\r\n+abstract class ComponentBehavior {\r\n+  Map<String, double> generateValues(Map<String, double> currentValues);\r\n+  bool validateValues(Map<String, double> values);\r\n+  Map<String, double> getDefaultValues();\r\n+}\r\n+\r\n+class ReactorChamberBehavior implements ComponentBehavior {\r\n+  final Random _random = Random();\r\n+  static const double TEMPERATURE_FLUCTUATION = 2.0;\r\n+  static const double PRESSURE_FLUCTUATION = 0.05;\r\n+\r\n+  @override\r\n+  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n+    final temperature = currentValues['temperature'] ?? 150.0;\r\n+    final pressure = currentValues['pressure'] ?? 1.0;\r\n+\r\n+    return {\r\n+      'temperature': _generateTemperature(temperature),\r\n+      'pressure': _generatePressure(pressure),\r\n+    };\r\n+  }\r\n+\r\n+  double _generateTemperature(double current) {\r\n+    final delta = (_random.nextDouble() * TEMPERATURE_FLUCTUATION * 2) - TEMPERATURE_FLUCTUATION;\r\n+    return current + delta;\r\n+  }\r\n+\r\n+  double _generatePressure(double current) {\r\n+    final delta = (_random.nextDouble() * PRESSURE_FLUCTUATION * 2) - PRESSURE_FLUCTUATION;\r\n+    return (current + delta).clamp(0.0, 10.0);\r\n+  }\r\n+\r\n+  @override\r\n+  bool validateValues(Map<String, double> values) {\r\n+    final temperature = values['temperature'];\r\n+    final pressure = values['pressure'];\r\n+\r\n+    if (temperature == null || pressure == null) return false;\r\n+\r\n+    return temperature >= 100.0 &&\r\n+           temperature <= 300.0 &&\r\n+           pressure >= 0.1 &&\r\n+           pressure <= 10.0;\r\n+  }\r\n+\r\n+  @override\r\n+  Map<String, double> getDefaultValues() => {\r\n+    'temperature': 150.0,\r\n+    'pressure': 1.0,\r\n+  };\r\n+}\r\n+\r\n+class MFCBehavior implements ComponentBehavior {\r\n+  final Random _random = Random();\r\n+  static const double FLOW_FLUCTUATION = 0.5;\r\n+\r\n+  @override\r\n+  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n+    final flowRate = currentValues['flow_rate'] ?? 0.0;\r\n+    final setpoint = currentValues['setpoint'] ?? flowRate;\r\n+\r\n+    return {\r\n+      'flow_rate': _generateFlowRate(flowRate, setpoint),\r\n+      'pressure': _generatePressure(currentValues['pressure'] ?? 1.0),\r\n+    };\r\n+  }\r\n+\r\n+  double _generateFlowRate(double current, double setpoint) {\r\n+    // Gradually move towards setpoint with noise\r\n+    final difference = setpoint - current;\r\n+    final step = difference * 0.1; // 10% movement towards setpoint\r\n+    final noise = (_random.nextDouble() * FLOW_FLUCTUATION * 2) - FLOW_FLUCTUATION;\r\n+    return (current + step + noise).clamp(0.0, 100.0);\r\n+  }\r\n+\r\n+  double _generatePressure(double current) {\r\n+    const fluctuation = 0.02;\r\n+    final delta = (_random.nextDouble() * fluctuation * 2) - fluctuation;\r\n+    return (current + delta).clamp(0.5, 2.0);\r\n+  }\r\n+\r\n+  @override\r\n+  bool validateValues(Map<String, double> values) {\r\n+    final flowRate = values['flow_rate'];\r\n+    final pressure = values['pressure'];\r\n+\r\n+    if (flowRate == null || pressure == null) return false;\r\n+\r\n+    return flowRate >= 0.0 &&\r\n+           flowRate <= 100.0 &&\r\n+           pressure >= 0.5 &&\r\n+           pressure <= 2.0;\r\n+  }\r\n+\r\n+  @override\r\n+  Map<String, double> getDefaultValues() => {\r\n+    'flow_rate': 0.0,\r\n+    'pressure': 1.0,\r\n+  };\r\n+}\r\n+\r\n+class ValveBehavior implements ComponentBehavior {\r\n+  @override\r\n+  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n+    // Valves are binary - they don't need fluctuation\r\n+    return {'status': currentValues['status'] ?? 0.0};\r\n+  }\r\n+\r\n+  @override\r\n+  bool validateValues(Map<String, double> values) {\r\n+    final status = values['status'];\r\n+    if (status == null) return false;\r\n+    return status == 0.0 || status == 1.0;\r\n+  }\r\n+\r\n+  @override\r\n+  Map<String, double> getDefaultValues() => {\r\n+    'status': 0.0,\r\n+  };\r\n+}\r\n+\r\n+class HeaterBehavior implements ComponentBehavior {\r\n+  final Random _random = Random();\r\n+  static const double TEMPERATURE_FLUCTUATION = 1.0;\r\n+\r\n+  @override\r\n+  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n+    final temperature = currentValues['temperature'] ?? 25.0;\r\n+    final setpoint = currentValues['setpoint'] ?? temperature;\r\n+\r\n+    return {\r\n+      'temperature': _generateTemperature(temperature, setpoint),\r\n+    };\r\n+  }\r\n+\r\n+  double _generateTemperature(double current, double setpoint) {\r\n+    final difference = setpoint - current;\r\n+    final step = difference * 0.05; // 5% movement towards setpoint\r\n+    final noise = (_random.nextDouble() * TEMPERATURE_FLUCTUATION * 2) - TEMPERATURE_FLUCTUATION;\r\n+    return current + step + noise;\r\n+  }\r\n+\r\n+  @override\r\n+  bool validateValues(Map<String, double> values) {\r\n+    final temperature = values['temperature'];\r\n+    if (temperature == null) return false;\r\n+    return temperature >= 0.0 && temperature <= 400.0;\r\n+  }\r\n+\r\n+  @override\r\n+  Map<String, double> getDefaultValues() => {\r\n+    'temperature': 25.0,\r\n+  };\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734072643879,
            "name": "Commit-0",
            "content": "// lib/blocs/simulation/models/component_simulation_behavior.dart\r\nimport 'dart:math';\r\nimport '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n\r\nabstract class ComponentBehavior {\r\n  Map<String, double> generateValues(Map<String, double> currentValues);\r\n  bool validateValues(Map<String, double> values);\r\n  Map<String, double> getDefaultValues();\r\n}\r\n\r\nclass ReactorChamberBehavior implements ComponentBehavior {\r\n  final Random _random = Random();\r\n  static const double TEMPERATURE_FLUCTUATION = 2.0;\r\n  static const double PRESSURE_FLUCTUATION = 0.05;\r\n\r\n  @override\r\n  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n    final temperature = currentValues['temperature'] ?? 150.0;\r\n    final pressure = currentValues['pressure'] ?? 1.0;\r\n\r\n    return {\r\n      'temperature': _generateTemperature(temperature),\r\n      'pressure': _generatePressure(pressure),\r\n    };\r\n  }\r\n\r\n  double _generateTemperature(double current) {\r\n    final delta = (_random.nextDouble() * TEMPERATURE_FLUCTUATION * 2) - TEMPERATURE_FLUCTUATION;\r\n    return current + delta;\r\n  }\r\n\r\n  double _generatePressure(double current) {\r\n    final delta = (_random.nextDouble() * PRESSURE_FLUCTUATION * 2) - PRESSURE_FLUCTUATION;\r\n    return (current + delta).clamp(0.0, 10.0);\r\n  }\r\n\r\n  @override\r\n  bool validateValues(Map<String, double> values) {\r\n    final temperature = values['temperature'];\r\n    final pressure = values['pressure'];\r\n\r\n    if (temperature == null || pressure == null) return false;\r\n\r\n    return temperature >= 100.0 &&\r\n           temperature <= 300.0 &&\r\n           pressure >= 0.1 &&\r\n           pressure <= 10.0;\r\n  }\r\n\r\n  @override\r\n  Map<String, double> getDefaultValues() => {\r\n    'temperature': 150.0,\r\n    'pressure': 1.0,\r\n  };\r\n}\r\n\r\nclass MFCBehavior implements ComponentBehavior {\r\n  final Random _random = Random();\r\n  static const double FLOW_FLUCTUATION = 0.5;\r\n\r\n  @override\r\n  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n    final flowRate = currentValues['flow_rate'] ?? 0.0;\r\n    final setpoint = currentValues['setpoint'] ?? flowRate;\r\n\r\n    return {\r\n      'flow_rate': _generateFlowRate(flowRate, setpoint),\r\n      'pressure': _generatePressure(currentValues['pressure'] ?? 1.0),\r\n    };\r\n  }\r\n\r\n  double _generateFlowRate(double current, double setpoint) {\r\n    // Gradually move towards setpoint with noise\r\n    final difference = setpoint - current;\r\n    final step = difference * 0.1; // 10% movement towards setpoint\r\n    final noise = (_random.nextDouble() * FLOW_FLUCTUATION * 2) - FLOW_FLUCTUATION;\r\n    return (current + step + noise).clamp(0.0, 100.0);\r\n  }\r\n\r\n  double _generatePressure(double current) {\r\n    const fluctuation = 0.02;\r\n    final delta = (_random.nextDouble() * fluctuation * 2) - fluctuation;\r\n    return (current + delta).clamp(0.5, 2.0);\r\n  }\r\n\r\n  @override\r\n  bool validateValues(Map<String, double> values) {\r\n    final flowRate = values['flow_rate'];\r\n    final pressure = values['pressure'];\r\n\r\n    if (flowRate == null || pressure == null) return false;\r\n\r\n    return flowRate >= 0.0 &&\r\n           flowRate <= 100.0 &&\r\n           pressure >= 0.5 &&\r\n           pressure <= 2.0;\r\n  }\r\n\r\n  @override\r\n  Map<String, double> getDefaultValues() => {\r\n    'flow_rate': 0.0,\r\n    'pressure': 1.0,\r\n  };\r\n}\r\n\r\nclass ValveBehavior implements ComponentBehavior {\r\n  @override\r\n  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n    // Valves are binary - they don't need fluctuation\r\n    return {'status': currentValues['status'] ?? 0.0};\r\n  }\r\n\r\n  @override\r\n  bool validateValues(Map<String, double> values) {\r\n    final status = values['status'];\r\n    if (status == null) return false;\r\n    return status == 0.0 || status == 1.0;\r\n  }\r\n\r\n  @override\r\n  Map<String, double> getDefaultValues() => {\r\n    'status': 0.0,\r\n  };\r\n}\r\n\r\nclass HeaterBehavior implements ComponentBehavior {\r\n  final Random _random = Random();\r\n  static const double TEMPERATURE_FLUCTUATION = 1.0;\r\n\r\n  @override\r\n  Map<String, double> generateValues(Map<String, double> currentValues) {\r\n    final temperature = currentValues['temperature'] ?? 25.0;\r\n    final setpoint = currentValues['setpoint'] ?? temperature;\r\n\r\n    return {\r\n      'temperature': _generateTemperature(temperature, setpoint),\r\n    };\r\n  }\r\n\r\n  double _generateTemperature(double current, double setpoint) {\r\n    final difference = setpoint - current;\r\n    final step = difference * 0.05; // 5% movement towards setpoint\r\n    final noise = (_random.nextDouble() * TEMPERATURE_FLUCTUATION * 2) - TEMPERATURE_FLUCTUATION;\r\n    return current + step + noise;\r\n  }\r\n\r\n  @override\r\n  bool validateValues(Map<String, double> values) {\r\n    final temperature = values['temperature'];\r\n    if (temperature == null) return false;\r\n    return temperature >= 0.0 && temperature <= 400.0;\r\n  }\r\n\r\n  @override\r\n  Map<String, double> getDefaultValues() => {\r\n    'temperature': 25.0,\r\n  };\r\n}"
        }
    ]
}