{
    "sourceFile": "lib/blocs/recipe/repository/recipe_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734144745590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734283191043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+// lib/repositories/recipe_reposiory.dart\r\n+\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import '../blocs/utils/bloc_exception.dart';\r\n+import '../modules/system_operation_also_main_module/models/recipe.dart';\r\n+\r\n+class RecipeRepository {\r\n+  final FirebaseFirestore _firestore;\r\n+  static const String _collection = 'recipes';\r\n+\r\n+  RecipeRepository({FirebaseFirestore? firestore})\r\n+      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n+\r\n+  // Get all recipes for a user\r\n+  Future<List<Recipe>> getAll({required String userId}) async {\r\n+    try {\r\n+      final querySnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .where('userId', isEqualTo: userId)\r\n+          .orderBy('lastModified', descending: true)\r\n+          .get();\r\n+\r\n+      return querySnapshot.docs\r\n+          .map((doc) => Recipe.fromJson(doc.data()))\r\n+          .toList();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipes: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Add a new recipe\r\n+  Future<void> add(String id, Recipe recipe, {required String userId}) async {\r\n+    try {\r\n+      final data = recipe.toJson();\r\n+      data['userId'] = userId;\r\n+\r\n+      await _firestore\r\n+          .collection(_collection)\r\n+          .doc(id)\r\n+          .set(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to add recipe: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Update an existing recipe\r\n+  Future<void> update(String id, Recipe recipe, {required String userId}) async {\r\n+    try {\r\n+      final docRef = _firestore.collection(_collection).doc(id);\r\n+      final doc = await docRef.get();\r\n+\r\n+      if (!doc.exists) {\r\n+        throw BlocException('Recipe not found');\r\n+      }\r\n+\r\n+      final existingData = doc.data();\r\n+      if (existingData?['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to update this recipe');\r\n+      }\r\n+\r\n+      final data = recipe.toJson();\r\n+      data['userId'] = userId;\r\n+      data['lastModified'] = Timestamp.now();\r\n+\r\n+      await docRef.update(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to update recipe: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Delete a recipe\r\n+  Future<void> delete(String id, {required String userId}) async {\r\n+    try {\r\n+      final docRef = _firestore.collection(_collection).doc(id);\r\n+      final doc = await docRef.get();\r\n+\r\n+      if (!doc.exists) {\r\n+        throw BlocException('Recipe not found');\r\n+      }\r\n+\r\n+      final data = doc.data();\r\n+      if (data?['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to delete this recipe');\r\n+      }\r\n+\r\n+      await docRef.delete();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to delete recipe: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Get a specific recipe by ID\r\n+  Future<Recipe?> getById(String id, {required String userId}) async {\r\n+    try {\r\n+      final docSnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .doc(id)\r\n+          .get();\r\n+\r\n+      if (!docSnapshot.exists) {\r\n+        return null;\r\n+      }\r\n+\r\n+      final data = docSnapshot.data()!;\r\n+      if (data['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to access this recipe');\r\n+      }\r\n+\r\n+      return Recipe.fromJson(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipe: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Get recipes by substrate type\r\n+  Future<List<Recipe>> getBySubstrate(String substrate, {required String userId}) async {\r\n+    try {\r\n+      final querySnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .where('userId', isEqualTo: userId)\r\n+          .where('substrate', isEqualTo: substrate)\r\n+          .orderBy('lastModified', descending: true)\r\n+          .get();\r\n+\r\n+      return querySnapshot.docs\r\n+          .map((doc) => Recipe.fromJson(doc.data()))\r\n+          .toList();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipes by substrate: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Stream of recipe updates\r\n+  Stream<Recipe> watchRecipe(String id, {required String userId}) {\r\n+    return _firestore\r\n+        .collection(_collection)\r\n+        .doc(id)\r\n+        .snapshots()\r\n+        .map((snapshot) {\r\n+          if (!snapshot.exists) {\r\n+            throw BlocException('Recipe not found');\r\n+          }\r\n+\r\n+          final data = snapshot.data()!;\r\n+          if (data['userId'] != userId) {\r\n+            throw BlocException('Unauthorized to access this recipe');\r\n+          }\r\n+\r\n+          return Recipe.fromJson(data);\r\n+        });\r\n+  }\r\n+\r\n+  // Duplicate a recipe\r\n+  Future<void> duplicate(String sourceId, String newId, String newName, {required String userId}) async {\r\n+    try {\r\n+      final sourceRecipe = await getById(sourceId, userId: userId);\r\n+      if (sourceRecipe == null) {\r\n+        throw BlocException('Source recipe not found');\r\n+      }\r\n+\r\n+      final newRecipe = sourceRecipe.copyWith(\r\n+        id: newId,\r\n+        name: newName,\r\n+        version: 1,\r\n+        lastModified: DateTime.now(),\r\n+      );\r\n+\r\n+      await add(newId, newRecipe, userId: userId);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to duplicate recipe: ${e.toString()}',\r\n+        stackTrace: StackTrace.current,\r\n+      );\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734283523855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+// lib/repositories/recipe_reposiory.dart\r\n+\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/blocs/utils/bloc_exception.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\n+import '../blocs/utils/bloc_exception.dart';\r\n+\r\n+class RecipeRepository {\r\n+  final FirebaseFirestore _firestore;\r\n+  static const String _collection = 'recipes';\r\n+\r\n+  RecipeRepository({FirebaseFirestore? firestore})\r\n+      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n+\r\n+  // Get all recipes for a user\r\n+  Future<List<Recipe>> getAll({required String userId}) async {\r\n+    try {\r\n+      final querySnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .where('userId', isEqualTo: userId)\r\n+          .orderBy('lastModified', descending: true)\r\n+          .get();\r\n+\r\n+      return querySnapshot.docs\r\n+          .map((doc) => Recipe.fromJson(doc.data()))\r\n+          .toList();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipes: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Add a new recipe\r\n+  Future<void> add(String id, Recipe recipe, {required String userId}) async {\r\n+    try {\r\n+      final data = recipe.toJson();\r\n+      data['userId'] = userId;\r\n+\r\n+      await _firestore\r\n+          .collection(_collection)\r\n+          .doc(id)\r\n+          .set(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to add recipe: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Update an existing recipe\r\n+  Future<void> update(String id, Recipe recipe, {required String userId}) async {\r\n+    try {\r\n+      final docRef = _firestore.collection(_collection).doc(id);\r\n+      final doc = await docRef.get();\r\n+\r\n+      if (!doc.exists) {\r\n+        throw BlocException('Recipe not found');\r\n+      }\r\n+\r\n+      final existingData = doc.data();\r\n+      if (existingData?['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to update this recipe');\r\n+      }\r\n+\r\n+      final data = recipe.toJson();\r\n+      data['userId'] = userId;\r\n+      data['lastModified'] = Timestamp.now();\r\n+\r\n+      await docRef.update(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to update recipe: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Delete a recipe\r\n+  Future<void> delete(String id, {required String userId}) async {\r\n+    try {\r\n+      final docRef = _firestore.collection(_collection).doc(id);\r\n+      final doc = await docRef.get();\r\n+\r\n+      if (!doc.exists) {\r\n+        throw BlocException('Recipe not found');\r\n+      }\r\n+\r\n+      final data = doc.data();\r\n+      if (data?['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to delete this recipe');\r\n+      }\r\n+\r\n+      await docRef.delete();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to delete recipe: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Get a specific recipe by ID\r\n+  Future<Recipe?> getById(String id, {required String userId}) async {\r\n+    try {\r\n+      final docSnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .doc(id)\r\n+          .get();\r\n+\r\n+      if (!docSnapshot.exists) {\r\n+        return null;\r\n+      }\r\n+\r\n+      final data = docSnapshot.data()!;\r\n+      if (data['userId'] != userId) {\r\n+        throw BlocException('Unauthorized to access this recipe');\r\n+      }\r\n+\r\n+      return Recipe.fromJson(data);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipe: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Get recipes by substrate type\r\n+  Future<List<Recipe>> getBySubstrate(String substrate, {required String userId}) async {\r\n+    try {\r\n+      final querySnapshot = await _firestore\r\n+          .collection(_collection)\r\n+          .where('userId', isEqualTo: userId)\r\n+          .where('substrate', isEqualTo: substrate)\r\n+          .orderBy('lastModified', descending: true)\r\n+          .get();\r\n+\r\n+      return querySnapshot.docs\r\n+          .map((doc) => Recipe.fromJson(doc.data()))\r\n+          .toList();\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to fetch recipes by substrate: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  // Stream of recipe updates\r\n+  Stream<Recipe> watchRecipe(String id, {required String userId}) {\r\n+    return _firestore\r\n+        .collection(_collection)\r\n+        .doc(id)\r\n+        .snapshots()\r\n+        .map((snapshot) {\r\n+          if (!snapshot.exists) {\r\n+            throw BlocException('Recipe not found');\r\n+          }\r\n+\r\n+          final data = snapshot.data()!;\r\n+          if (data['userId'] != userId) {\r\n+            throw BlocException('Unauthorized to access this recipe');\r\n+          }\r\n+\r\n+          return Recipe.fromJson(data);\r\n+        });\r\n+  }\r\n+\r\n+  // Duplicate a recipe\r\n+  Future<void> duplicate(String sourceId, String newId, String newName, {required String userId}) async {\r\n+    try {\r\n+      final sourceRecipe = await getById(sourceId, userId: userId);\r\n+      if (sourceRecipe == null) {\r\n+        throw BlocException('Source recipe not found');\r\n+      }\r\n+\r\n+      final newRecipe = sourceRecipe.copyWith(\r\n+        id: newId,\r\n+        name: newName,\r\n+        version: 1,\r\n+        lastModified: DateTime.now(),\r\n+      );\r\n+\r\n+      await add(newId, newRecipe, userId: userId);\r\n+    } catch (e) {\r\n+      throw BlocException(\r\n+        'Failed to duplicate recipe: ${e.toString()}',\r\n+      );\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734283531043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:experiment_planner/blocs/utils/bloc_exception.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\n-import '../blocs/utils/bloc_exception.dart';\r\n \r\n class RecipeRepository {\r\n   final FirebaseFirestore _firestore;\r\n   static const String _collection = 'recipes';\r\n@@ -36,21 +35,19 @@\n     try {\r\n       final data = recipe.toJson();\r\n       data['userId'] = userId;\r\n \r\n-      await _firestore\r\n-          .collection(_collection)\r\n-          .doc(id)\r\n-          .set(data);\r\n+      await _firestore.collection(_collection).doc(id).set(data);\r\n     } catch (e) {\r\n       throw BlocException(\r\n         'Failed to add recipe: ${e.toString()}',\r\n       );\r\n     }\r\n   }\r\n \r\n   // Update an existing recipe\r\n-  Future<void> update(String id, Recipe recipe, {required String userId}) async {\r\n+  Future<void> update(String id, Recipe recipe,\r\n+      {required String userId}) async {\r\n     try {\r\n       final docRef = _firestore.collection(_collection).doc(id);\r\n       final doc = await docRef.get();\r\n \r\n@@ -100,12 +97,10 @@\n \r\n   // Get a specific recipe by ID\r\n   Future<Recipe?> getById(String id, {required String userId}) async {\r\n     try {\r\n-      final docSnapshot = await _firestore\r\n-          .collection(_collection)\r\n-          .doc(id)\r\n-          .get();\r\n+      final docSnapshot =\r\n+          await _firestore.collection(_collection).doc(id).get();\r\n \r\n       if (!docSnapshot.exists) {\r\n         return null;\r\n       }\r\n@@ -123,9 +118,10 @@\n     }\r\n   }\r\n \r\n   // Get recipes by substrate type\r\n-  Future<List<Recipe>> getBySubstrate(String substrate, {required String userId}) async {\r\n+  Future<List<Recipe>> getBySubstrate(String substrate,\r\n+      {required String userId}) async {\r\n     try {\r\n       final querySnapshot = await _firestore\r\n           .collection(_collection)\r\n           .where('userId', isEqualTo: userId)\r\n@@ -149,216 +145,24 @@\n         .collection(_collection)\r\n         .doc(id)\r\n         .snapshots()\r\n         .map((snapshot) {\r\n-          if (!snapshot.exists) {\r\n-            throw BlocException('Recipe not found');\r\n-          }\r\n-\r\n-          final data = snapshot.data()!;\r\n-          if (data['userId'] != userId) {\r\n-            throw BlocException('Unauthorized to access this recipe');\r\n-          }\r\n-\r\n-          return Recipe.fromJson(data);\r\n-        });\r\n-  }\r\n-\r\n-  // Duplicate a recipe\r\n-  Future<void> duplicate(String sourceId, String newId, String newName, {required String userId}) async {\r\n-    try {\r\n-      final sourceRecipe = await getById(sourceId, userId: userId);\r\n-      if (sourceRecipe == null) {\r\n-        throw BlocException('Source recipe not found');\r\n-      }\r\n-\r\n-      final newRecipe = sourceRecipe.copyWith(\r\n-        id: newId,\r\n-        name: newName,\r\n-        version: 1,\r\n-        lastModified: DateTime.now(),\r\n-      );\r\n-\r\n-      await add(newId, newRecipe, userId: userId);\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to duplicate recipe: ${e.toString()}',\r\n-      );\r\n-    }\r\n-  }\r\n-}\n-// lib/repositories/recipe_reposiory.dart\r\n-\r\n-import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import '../blocs/utils/bloc_exception.dart';\r\n-import '../modules/system_operation_also_main_module/models/recipe.dart';\r\n-\r\n-class RecipeRepository {\r\n-  final FirebaseFirestore _firestore;\r\n-  static const String _collection = 'recipes';\r\n-\r\n-  RecipeRepository({FirebaseFirestore? firestore})\r\n-      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n-\r\n-  // Get all recipes for a user\r\n-  Future<List<Recipe>> getAll({required String userId}) async {\r\n-    try {\r\n-      final querySnapshot = await _firestore\r\n-          .collection(_collection)\r\n-          .where('userId', isEqualTo: userId)\r\n-          .orderBy('lastModified', descending: true)\r\n-          .get();\r\n-\r\n-      return querySnapshot.docs\r\n-          .map((doc) => Recipe.fromJson(doc.data()))\r\n-          .toList();\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to fetch recipes: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  // Add a new recipe\r\n-  Future<void> add(String id, Recipe recipe, {required String userId}) async {\r\n-    try {\r\n-      final data = recipe.toJson();\r\n-      data['userId'] = userId;\r\n-\r\n-      await _firestore\r\n-          .collection(_collection)\r\n-          .doc(id)\r\n-          .set(data);\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to add recipe: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  // Update an existing recipe\r\n-  Future<void> update(String id, Recipe recipe, {required String userId}) async {\r\n-    try {\r\n-      final docRef = _firestore.collection(_collection).doc(id);\r\n-      final doc = await docRef.get();\r\n-\r\n-      if (!doc.exists) {\r\n+      if (!snapshot.exists) {\r\n         throw BlocException('Recipe not found');\r\n       }\r\n \r\n-      final existingData = doc.data();\r\n-      if (existingData?['userId'] != userId) {\r\n-        throw BlocException('Unauthorized to update this recipe');\r\n-      }\r\n-\r\n-      final data = recipe.toJson();\r\n-      data['userId'] = userId;\r\n-      data['lastModified'] = Timestamp.now();\r\n-\r\n-      await docRef.update(data);\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to update recipe: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  // Delete a recipe\r\n-  Future<void> delete(String id, {required String userId}) async {\r\n-    try {\r\n-      final docRef = _firestore.collection(_collection).doc(id);\r\n-      final doc = await docRef.get();\r\n-\r\n-      if (!doc.exists) {\r\n-        throw BlocException('Recipe not found');\r\n-      }\r\n-\r\n-      final data = doc.data();\r\n-      if (data?['userId'] != userId) {\r\n-        throw BlocException('Unauthorized to delete this recipe');\r\n-      }\r\n-\r\n-      await docRef.delete();\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to delete recipe: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  // Get a specific recipe by ID\r\n-  Future<Recipe?> getById(String id, {required String userId}) async {\r\n-    try {\r\n-      final docSnapshot = await _firestore\r\n-          .collection(_collection)\r\n-          .doc(id)\r\n-          .get();\r\n-\r\n-      if (!docSnapshot.exists) {\r\n-        return null;\r\n-      }\r\n-\r\n-      final data = docSnapshot.data()!;\r\n+      final data = snapshot.data()!;\r\n       if (data['userId'] != userId) {\r\n         throw BlocException('Unauthorized to access this recipe');\r\n       }\r\n \r\n       return Recipe.fromJson(data);\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to fetch recipe: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n+    });\r\n   }\r\n \r\n-  // Get recipes by substrate type\r\n-  Future<List<Recipe>> getBySubstrate(String substrate, {required String userId}) async {\r\n-    try {\r\n-      final querySnapshot = await _firestore\r\n-          .collection(_collection)\r\n-          .where('userId', isEqualTo: userId)\r\n-          .where('substrate', isEqualTo: substrate)\r\n-          .orderBy('lastModified', descending: true)\r\n-          .get();\r\n-\r\n-      return querySnapshot.docs\r\n-          .map((doc) => Recipe.fromJson(doc.data()))\r\n-          .toList();\r\n-    } catch (e) {\r\n-      throw BlocException(\r\n-        'Failed to fetch recipes by substrate: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  // Stream of recipe updates\r\n-  Stream<Recipe> watchRecipe(String id, {required String userId}) {\r\n-    return _firestore\r\n-        .collection(_collection)\r\n-        .doc(id)\r\n-        .snapshots()\r\n-        .map((snapshot) {\r\n-          if (!snapshot.exists) {\r\n-            throw BlocException('Recipe not found');\r\n-          }\r\n-\r\n-          final data = snapshot.data()!;\r\n-          if (data['userId'] != userId) {\r\n-            throw BlocException('Unauthorized to access this recipe');\r\n-          }\r\n-\r\n-          return Recipe.fromJson(data);\r\n-        });\r\n-  }\r\n-\r\n   // Duplicate a recipe\r\n-  Future<void> duplicate(String sourceId, String newId, String newName, {required String userId}) async {\r\n+  Future<void> duplicate(String sourceId, String newId, String newName,\r\n+      {required String userId}) async {\r\n     try {\r\n       final sourceRecipe = await getById(sourceId, userId: userId);\r\n       if (sourceRecipe == null) {\r\n         throw BlocException('Source recipe not found');\r\n@@ -374,9 +178,8 @@\n       await add(newId, newRecipe, userId: userId);\r\n     } catch (e) {\r\n       throw BlocException(\r\n         'Failed to duplicate recipe: ${e.toString()}',\r\n-        stackTrace: StackTrace.current,\r\n       );\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1734144745589,
            "name": "Commit-0",
            "content": ""
        }
    ]
}