{
    "sourceFile": "lib/features/safety/bloc/safety_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376765348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434772058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,9 @@\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n-import 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\n-import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n-import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n-import 'package:experiment_planner/blocs/safety/bloc/safety_state.dart';\r\n-import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n import 'package:experiment_planner/features/safety/models/safety_error.dart';\r\n-import 'package:experiment_planner/features/auth/services/auth_service.dart';\r\n \r\n class MockSafetyRepository extends Mock implements SafetyRepository {}\r\n class MockAuthService extends Mock implements AuthService {}\r\n class MockAlarmBloc extends Mock implements AlarmBloc {}\r\n"
                },
                {
                    "date": 1734434780812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n import 'package:bloc_test/bloc_test.dart';\r\n+import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/features/safety/repository/safety_repository.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n import 'package:experiment_planner/features/safety/models/safety_error.dart';\r\n"
                }
            ],
            "date": 1734376765348,
            "name": "Commit-0",
            "content": "import 'package:bloc_test/bloc_test.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\nimport 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\nimport 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\nimport 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\nimport 'package:experiment_planner/blocs/safety/bloc/safety_state.dart';\r\nimport 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\nimport 'package:experiment_planner/features/alarms/models/alarm.dart';\r\nimport 'package:experiment_planner/features/safety/models/safety_error.dart';\r\nimport 'package:experiment_planner/features/auth/services/auth_service.dart';\r\n\r\nclass MockSafetyRepository extends Mock implements SafetyRepository {}\r\nclass MockAuthService extends Mock implements AuthService {}\r\nclass MockAlarmBloc extends Mock implements AlarmBloc {}\r\n\r\nvoid main() {\r\n  late SafetyBloc safetyBloc;\r\n  late MockSafetyRepository repository;\r\n  late MockAuthService authService;\r\n  late MockAlarmBloc alarmBloc;\r\n\r\n  setUpAll(() {\r\n    registerFallbackValue( SafetyError(\r\n      id: 'dummy',\r\n      description: 'dummy',\r\n      severity: SafetyErrorSeverity.warning,\r\n    ));\r\n    registerFallbackValue(AddAlarm(\r\n      message: 'test',\r\n      severity: AlarmSeverity.warning,\r\n      isSafetyAlert: true,\r\n    ));\r\n  });\r\n\r\n  setUp(() {\r\n    repository = MockSafetyRepository();\r\n    authService = MockAuthService();\r\n    alarmBloc = MockAlarmBloc();\r\n    when(() => repository.addSafetyError(any())).thenAnswer((_) async {});\r\n    when(() => alarmBloc.add(any())).thenAnswer((_) async {});\r\n\r\n    safetyBloc = SafetyBloc(\r\n      repository: repository,\r\n      authService: authService,\r\n      alarmBloc: alarmBloc,\r\n    );\r\n  });\r\n\r\n  tearDown(() {\r\n    safetyBloc.close();\r\n  });\r\n\r\n  final testError = SafetyError(\r\n    id: '1',\r\n    description: 'Test error',\r\n    severity: SafetyErrorSeverity.warning,\r\n  );\r\n\r\n  blocTest<SafetyBloc, SafetyState>(\r\n    'initial test',\r\n    build: () => safetyBloc,\r\n    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n    expect: () => [],\r\n  );\r\n\r\n  blocTest<SafetyBloc, SafetyState>(\r\n    'emits new state when error is detected',\r\n    build: () => safetyBloc,\r\n    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n    verify: (_) {\r\n      verify(() => repository.addSafetyError(any())).called(1);\r\n      verify(() => alarmBloc.add(any())).called(1);\r\n    },\r\n  );\r\n\r\n  blocTest<SafetyBloc, SafetyState>(\r\n    'emits error state when repository fails',\r\n    build: () {\r\n      when(() => repository.addSafetyError(testError))\r\n          .thenThrow(Exception('Repository error'));\r\n      return safetyBloc;\r\n    },\r\n    act: (bloc) => bloc.add(SafetyErrorDetected(testError)),\r\n    expect: () => [\r\n      predicate<SafetyState>((state) =>\r\n        state.error?.contains('Repository error') ?? false\r\n      ),\r\n    ],\r\n\r\n    verify: (_) {\r\n      verify(() => repository.addSafetyError(testError)).called(1);\r\n      verifyNever(() => alarmBloc.add(any()));\r\n    },\r\n  );\r\n}"
        }
    ]
}