{
    "sourceFile": "lib/features/safety/bloc/safety_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1734376760278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734432834491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\n+import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n import '../models/safety_error.dart';\r\n import '../../components/models/system_component.dart';\r\n import '../../auth/services/auth_service.dart';\r\n"
                },
                {
                    "date": 1734433230632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import 'dart:async';\r\n+import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_bloc.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n+import '../models/safety_error.dart';\r\n+import '../../utils/bloc_utils.dart';\r\n+import '../repository/safety_repository.dart';\r\n+import 'safety_event.dart';\r\n+import 'safety_state.dart';\r\n+\r\n+class SafetyBloc extends Bloc<SafetyEvent, SafetyState> {\r\n+  final SafetyRepository _repository;\r\n+  final AlarmBloc _alarmBloc;\r\n+  final AuthBloc _authBloc;\r\n+  StreamSubscription? _errorSubscription;\r\n+  StreamSubscription? _authSubscription;\r\n+\r\n+  SafetyBloc({\r\n+    required SafetyRepository repository,\r\n+    required AlarmBloc alarmBloc,\r\n+    required AuthBloc authBloc,\r\n+  })  : _repository = repository,\r\n+        _alarmBloc = alarmBloc,\r\n+        _authBloc = authBloc,\r\n+        super(SafetyState.initial()) {\r\n+    on<SafetyMonitoringStarted>(_onMonitoringStarted);\r\n+    on<SafetyMonitoringPaused>(_onMonitoringPaused);\r\n+    on<SafetyErrorDetected>(_onErrorDetected);\r\n+    on<SafetyErrorCleared>(_onErrorCleared);\r\n+    on<SafetyThresholdAdjusted>(_onThresholdAdjusted);\r\n+\r\n+    _authSubscription = _authBloc.stream.listen((authState) {\r\n+      if (authState.status == AuthStatus.authenticated) {\r\n+        add(SafetyMonitoringStarted());\r\n+      } else if (authState.status == AuthStatus.unauthenticated) {\r\n+        add(SafetyMonitoringPaused());\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  String? get _currentUserId => _authBloc.state.user?.id;\r\n+\r\n+  Future<void> _onMonitoringStarted(\r\n+    SafetyMonitoringStarted event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _errorSubscription?.cancel();\r\n+\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) {\r\n+        emit(state.copyWith(\r\n+          error: 'User not authenticated',\r\n+          isMonitoringActive: false,\r\n+        ));\r\n+        return;\r\n+      }\r\n+\r\n+      _errorSubscription = _repository.watchActiveErrors().listen(\r\n+        (errors) {\r\n+          emit(state.copyWith(\r\n+            isLoading: false,\r\n+            isMonitoringActive: true,\r\n+            activeErrors: errors,\r\n+          ));\r\n+        },\r\n+        onError: (error) {\r\n+          emit(state.copyWith(\r\n+            isLoading: false,\r\n+            error: BlocUtils.handleError(error),\r\n+          ));\r\n+        },\r\n+      );\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        isLoading: false,\r\n+        error: BlocUtils.handleError(error),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onMonitoringPaused(\r\n+    SafetyMonitoringPaused event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    await _errorSubscription?.cancel();\r\n+    _errorSubscription = null;\r\n+    emit(state.copyWith(isMonitoringActive: false));\r\n+  }\r\n+\r\n+  Future<void> _onErrorDetected(\r\n+    SafetyErrorDetected event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.addSafetyError(event.error);\r\n+\r\n+      // Add corresponding alarm using constructor\r\n+      _alarmBloc.add(AddAlarm(\r\n+        message: event.error.description,\r\n+        severity: _mapSafetyToAlarmSeverity(event.error.severity),\r\n+        isSafetyAlert: true,\r\n+      ));\r\n+\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onErrorCleared(\r\n+    SafetyErrorCleared event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.resolveError(event.errorId);\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onThresholdAdjusted(\r\n+    SafetyThresholdAdjusted event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.updateThresholds(\r\n+        event.componentId,\r\n+        event.parameterName,\r\n+        event.minThreshold,\r\n+        event.maxThreshold,\r\n+      );\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  AlarmSeverity _mapSafetyToAlarmSeverity(SafetyErrorSeverity severity) {\r\n+    switch (severity) {\r\n+      case SafetyErrorSeverity.critical:\r\n+        return AlarmSeverity.critical;\r\n+      case SafetyErrorSeverity.warning:\r\n+        return AlarmSeverity.warning;\r\n+      default:\r\n+        return AlarmSeverity.info;\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> close() async {\r\n+    await _errorSubscription?.cancel();\r\n+    await _authSubscription?.cancel();\r\n+    return super.close();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734433238465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import 'dart:async';\r\n+import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n+import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_bloc.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n+import '../models/safety_error.dart';\r\n+import '../../utils/bloc_utils.dart';\r\n+import '../repository/safety_repository.dart';\r\n+import 'safety_event.dart';\r\n+import 'safety_state.dart';\r\n+\r\n+class SafetyBloc extends Bloc<SafetyEvent, SafetyState> {\r\n+  final SafetyRepository _repository;\r\n+  final AlarmBloc _alarmBloc;\r\n+  final AuthBloc _authBloc;\r\n+  StreamSubscription? _errorSubscription;\r\n+  StreamSubscription? _authSubscription;\r\n+\r\n+  SafetyBloc({\r\n+    required SafetyRepository repository,\r\n+    required AlarmBloc alarmBloc,\r\n+    required AuthBloc authBloc,\r\n+  })  : _repository = repository,\r\n+        _alarmBloc = alarmBloc,\r\n+        _authBloc = authBloc,\r\n+        super(SafetyState.initial()) {\r\n+    on<SafetyMonitoringStarted>(_onMonitoringStarted);\r\n+    on<SafetyMonitoringPaused>(_onMonitoringPaused);\r\n+    on<SafetyErrorDetected>(_onErrorDetected);\r\n+    on<SafetyErrorCleared>(_onErrorCleared);\r\n+    on<SafetyThresholdAdjusted>(_onThresholdAdjusted);\r\n+\r\n+    _authSubscription = _authBloc.stream.listen((authState) {\r\n+      if (authState.status == AuthStatus.authenticated) {\r\n+        add(SafetyMonitoringStarted());\r\n+      } else if (authState.status == AuthStatus.unauthenticated) {\r\n+        add(SafetyMonitoringPaused());\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  String? get _currentUserId => _authBloc.state.user?.id;\r\n+\r\n+  Future<void> _onMonitoringStarted(\r\n+    SafetyMonitoringStarted event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _errorSubscription?.cancel();\r\n+\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) {\r\n+        emit(state.copyWith(\r\n+          error: 'User not authenticated',\r\n+          isMonitoringActive: false,\r\n+        ));\r\n+        return;\r\n+      }\r\n+\r\n+      _errorSubscription = _repository.watchActiveErrors().listen(\r\n+        (errors) {\r\n+          emit(state.copyWith(\r\n+            isLoading: false,\r\n+            isMonitoringActive: true,\r\n+            activeErrors: errors,\r\n+          ));\r\n+        },\r\n+        onError: (error) {\r\n+          emit(state.copyWith(\r\n+            isLoading: false,\r\n+            error: BlocUtils.handleError(error),\r\n+          ));\r\n+        },\r\n+      );\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        isLoading: false,\r\n+        error: BlocUtils.handleError(error),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onMonitoringPaused(\r\n+    SafetyMonitoringPaused event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    await _errorSubscription?.cancel();\r\n+    _errorSubscription = null;\r\n+    emit(state.copyWith(isMonitoringActive: false));\r\n+  }\r\n+\r\n+  Future<void> _onErrorDetected(\r\n+    SafetyErrorDetected event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.addSafetyError(event.error);\r\n+\r\n+      // Add corresponding alarm using constructor\r\n+      _alarmBloc.add(AddAlarm(\r\n+        message: event.error.description,\r\n+        severity: _mapSafetyToAlarmSeverity(event.error.severity),\r\n+        isSafetyAlert: true,\r\n+      ));\r\n+\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onErrorCleared(\r\n+    SafetyErrorCleared event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.resolveError(event.errorId);\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onThresholdAdjusted(\r\n+    SafetyThresholdAdjusted event,\r\n+    Emitter<SafetyState> emit,\r\n+  ) async {\r\n+    try {\r\n+      await _repository.updateThresholds(\r\n+        event.componentId,\r\n+        event.parameterName,\r\n+        event.minThreshold,\r\n+        event.maxThreshold,\r\n+      );\r\n+    } catch (error) {\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n+    }\r\n+  }\r\n+\r\n+  AlarmSeverity _mapSafetyToAlarmSeverity(SafetyErrorSeverity severity) {\r\n+    switch (severity) {\r\n+      case SafetyErrorSeverity.critical:\r\n+        return AlarmSeverity.critical;\r\n+      case SafetyErrorSeverity.warning:\r\n+        return AlarmSeverity.warning;\r\n+      default:\r\n+        return AlarmSeverity.info;\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> close() async {\r\n+    await _errorSubscription?.cancel();\r\n+    await _authSubscription?.cancel();\r\n+    return super.close();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734433246635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/features/alarms/bloc/alarm_event.dart';\r\n+import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_bloc.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n import '../models/safety_error.dart';\r\n import '../../utils/bloc_utils.dart';\r\n"
                },
                {
                    "date": 1734433252773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_bloc.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n import '../models/safety_error.dart';\r\n-import '../../utils/bloc_utils.dart';\r\n import '../repository/safety_repository.dart';\r\n import 'safety_event.dart';\r\n import 'safety_state.dart';\r\n \r\n"
                }
            ],
            "date": 1734376760277,
            "name": "Commit-0",
            "content": "\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\nimport 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\nimport 'package:experiment_planner/features/alarms/models/alarm.dart';\r\nimport '../models/safety_error.dart';\r\nimport '../../components/models/system_component.dart';\r\nimport '../../auth/services/auth_service.dart';\r\nimport '../../utils/bloc_utils.dart';\r\nimport '../repository/safety_repository.dart';\r\nimport 'safety_event.dart';\r\nimport 'safety_state.dart';\r\n\r\nclass SafetyBloc extends Bloc<SafetyEvent, SafetyState> {\r\n  final SafetyRepository _repository;\r\n  final AuthService _authService;\r\n  final AlarmBloc _alarmBloc;\r\n  StreamSubscription? _errorSubscription;\r\n\r\n  SafetyBloc({\r\n    required SafetyRepository repository,\r\n    required AuthService authService,\r\n    required AlarmBloc alarmBloc,\r\n  })  : _repository = repository,\r\n        _authService = authService,\r\n        _alarmBloc = alarmBloc,\r\n        super(SafetyState.initial()) {\r\n    on<SafetyMonitoringStarted>(_onMonitoringStarted);\r\n    on<SafetyMonitoringPaused>(_onMonitoringPaused);\r\n    on<SafetyErrorDetected>(_onErrorDetected);\r\n    on<SafetyErrorCleared>(_onErrorCleared);\r\n    on<SafetyThresholdAdjusted>(_onThresholdAdjusted);\r\n  }\r\n\r\n  Future<void> _onMonitoringStarted(\r\n    SafetyMonitoringStarted event,\r\n    Emitter<SafetyState> emit,\r\n  ) async {\r\n    try {\r\n      await _errorSubscription?.cancel();\r\n\r\n      _errorSubscription = _repository.watchActiveErrors().listen(\r\n        (errors) {\r\n          emit(state.copyWith(\r\n            isLoading: false,\r\n            isMonitoringActive: true,\r\n            activeErrors: errors,\r\n          ));\r\n        },\r\n        onError: (error) {\r\n          emit(state.copyWith(\r\n            isLoading: false,\r\n            error: BlocUtils.handleError(error),\r\n          ));\r\n        },\r\n      );\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        isLoading: false,\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onMonitoringPaused(\r\n    SafetyMonitoringPaused event,\r\n    Emitter<SafetyState> emit,\r\n  ) async {\r\n    await _errorSubscription?.cancel();\r\n    _errorSubscription = null;\r\n    emit(state.copyWith(isMonitoringActive: false));\r\n  }\r\n\r\n  Future<void> _onErrorDetected(\r\n    SafetyErrorDetected event,\r\n    Emitter<SafetyState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.addSafetyError(event.error);\r\n\r\n      // Add corresponding alarm using constructor\r\n      _alarmBloc.add(AddAlarm(\r\n        message: event.error.description,\r\n        severity: _mapSafetyToAlarmSeverity(event.error.severity),\r\n        isSafetyAlert: true,\r\n      ));\r\n\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  Future<void> _onErrorCleared(\r\n    SafetyErrorCleared event,\r\n    Emitter<SafetyState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.resolveError(event.errorId);\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  Future<void> _onThresholdAdjusted(\r\n    SafetyThresholdAdjusted event,\r\n    Emitter<SafetyState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.updateThresholds(\r\n        event.componentId,\r\n        event.parameterName,\r\n        event.minThreshold,\r\n        event.maxThreshold,\r\n      );\r\n    } catch (error) {\r\n      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n    }\r\n  }\r\n\r\n  AlarmSeverity _mapSafetyToAlarmSeverity(SafetyErrorSeverity severity) {\r\n    switch (severity) {\r\n      case SafetyErrorSeverity.critical:\r\n        return AlarmSeverity.critical;\r\n      case SafetyErrorSeverity.warning:\r\n        return AlarmSeverity.warning;\r\n      default:\r\n        return AlarmSeverity.info;\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _errorSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}