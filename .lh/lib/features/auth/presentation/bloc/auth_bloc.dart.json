{
    "sourceFile": "lib/features/auth/presentation/bloc/auth_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734378797971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734378797971,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/bloc/auth_bloc.dart\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:freezed_annotation/freezed_annotation.dart';\r\nimport 'package:injectable/injectable.dart';\r\nimport '../../domain/entities/user.dart';\r\nimport '../../domain/usecases/sign_in.dart';\r\nimport '../../domain/usecases/sign_up.dart';\r\nimport '../../domain/usecases/sign_out.dart';\r\nimport '../../../../core/errors/failures.dart';\r\n\r\npart 'auth_event.dart';\r\npart 'auth_state.dart';\r\npart 'auth_bloc.freezed.dart';\r\n\r\n@injectable\r\nclass AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n  final SignIn _signIn;\r\n  final SignUp _signUp;\r\n  final SignOut _signOut;\r\n\r\n  AuthBloc(this._signIn, this._signUp, this._signOut) : super(const AuthState.initial()) {\r\n    on<AuthEvent>((event, emit) async {\r\n      await event.map(\r\n        signInRequested: (e) => _handleSignIn(e, emit),\r\n        signUpRequested: (e) => _handleSignUp(e, emit),\r\n        signOutRequested: (e) => _handleSignOut(e, emit),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> _handleSignIn(SignInRequested event, Emitter<AuthState> emit) async {\r\n    emit(const AuthState.authenticating());\r\n\r\n    final result = await _signIn(SignInParams(\r\n      email: event.email,\r\n      password: event.password,\r\n    ));\r\n\r\n    result.fold(\r\n      (failure) => emit(AuthState.failure(failure)),\r\n      (user) => emit(AuthState.authenticated(user)),\r\n    );\r\n  }\r\n\r\n  Future<void> _handleSignUp(SignUpRequested event, Emitter<AuthState> emit) async {\r\n    emit(const AuthState.authenticating());\r\n\r\n    final result = await _signUp(SignUpParams(\r\n      email: event.email,\r\n      password: event.password,\r\n      name: event.name,\r\n      machineSerial: event.machineSerial,\r\n    ));\r\n\r\n    result.fold(\r\n      (failure) => emit(AuthState.failure(failure)),\r\n      (user) => emit(AuthState.authenticated(user)),\r\n    );\r\n  }\r\n\r\n  Future<void> _handleSignOut(SignOutRequested event, Emitter<AuthState> emit) async {\r\n    emit(const AuthState.authenticating());\r\n\r\n    final result = await _signOut();\r\n\r\n    result.fold(\r\n      (failure) => emit(AuthState.failure(failure)),\r\n      (_) => emit(const AuthState.unauthenticated()),\r\n    );\r\n  }\r\n}\r\n\r\n"
        }
    ]
}