{
    "sourceFile": "lib/features/auth/presentation/bloc/admin_dashboard_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734379092393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734379092393,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/bloc/admin_dashboard_bloc.dart\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:freezed_annotation/freezed_annotation.dart';\r\nimport 'package:injectable/injectable.dart';\r\nimport '../../domain/repositories/i_user_request_repository.dart';\r\nimport '../../domain/repositories/i_auth_repository.dart';\r\nimport '../../../../core/errors/failures.dart';\r\n\r\npart 'admin_dashboard_event.dart';\r\npart 'admin_dashboard_state.dart';\r\npart 'admin_dashboard_bloc.freezed.dart';\r\n\r\n@injectable\r\nclass AdminDashboardBloc extends Bloc<AdminDashboardEvent, AdminDashboardState> {\r\n  final IUserRequestRepository _userRequestRepository;\r\n  final IAuthRepository _authRepository;\r\n\r\n  AdminDashboardBloc(\r\n    this._userRequestRepository,\r\n    this._authRepository,\r\n  ) : super(const AdminDashboardState.initial()) {\r\n    on<AdminDashboardEvent>((event, emit) async {\r\n      await event.map(\r\n        loaded: (_) => _handleLoaded(emit),\r\n        refreshRequested: (_) => _handleLoaded(emit),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> _handleLoaded(Emitter<AdminDashboardState> emit) async {\r\n    emit(const AdminDashboardState.loading());\r\n\r\n    final pendingRequestsCount = await _userRequestRepository.getPendingRequestCount();\r\n    final usersCount = await _authRepository.getUserCount();\r\n\r\n    emit(\r\n      pendingRequestsCount.fold(\r\n        (failure) => AdminDashboardState.failure(failure),\r\n        (requestCount) => usersCount.fold(\r\n          (failure) => AdminDashboardState.failure(failure),\r\n          (userCount) => AdminDashboardState.loaded(\r\n            pendingRequestsCount: requestCount,\r\n            totalUsersCount: userCount,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n"
        }
    ]
}