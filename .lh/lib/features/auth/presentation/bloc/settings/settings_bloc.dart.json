{
    "sourceFile": "lib/features/auth/presentation/bloc/settings/settings_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734427531262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734429838351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+// lib/features/auth/presentation/bloc/settings/settings_bloc.dart\r\n+import 'package:experiment_planner/features/auth/domain/entities/app_settings.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import 'package:freezed_annotation/freezed_annotation.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+import '../../../domain/repositories/i_settings_repository.dart';\r\n+import '../../../domain/entities/notification_settings.dart';\r\n+import '../../../../../core/errors/failures.dart';\r\n+\r\n+part 'settings_event.dart';\r\n+part 'settings_state.dart';\r\n+part 'settings_bloc.freezed.dart';\r\n+\r\n+@injectable\r\n+class SettingsBloc extends Bloc<SettingsEvent, SettingsState> {\r\n+  final ISettingsRepository _settingsRepository;\r\n+\r\n+  SettingsBloc(this._settingsRepository) : super(const SettingsState.initial()) {\r\n+    on<SettingsEvent>((event, emit) async {\r\n+      await event.map(\r\n+        started: (_) => _handleStarted(emit),\r\n+        themeChanged: (e) => _handleThemeChanged(e, emit),\r\n+        notificationSettingsChanged: (e) => _handleNotificationSettingsChanged(e, emit),\r\n+        languageChanged: (e) => _handleLanguageChanged(e, emit),\r\n+      );\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _handleStarted(Emitter<SettingsState> emit) async {\r\n+    emit(const SettingsState.loading());\r\n+\r\n+    final settings = await _settingsRepository.getSettings();\r\n+    settings.fold(\r\n+      (failure) => emit(SettingsState.failure(failure)),\r\n+      (settings) => emit(SettingsState.loaded(settings)),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _handleThemeChanged(\r\n+    ThemeChanged event,\r\n+    Emitter<SettingsState> emit,\r\n+  ) async {\r\n+    final currentState = state;\r\n+    if (currentState is! SettingsLoaded) return;\r\n+\r\n+    emit(const SettingsState.loading());\r\n+\r\n+    final result = await _settingsRepository.updateTheme(event.isDarkMode);\r\n+    result.fold(\r\n+      (failure) => emit(SettingsState.failure(failure)),\r\n+      (_) => add(const SettingsEvent.started()),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _handleNotificationSettingsChanged(\r\n+    NotificationSettingsChanged event,\r\n+    Emitter<SettingsState> emit,\r\n+  ) async {\r\n+    final currentState = state;\r\n+    if (currentState is! SettingsLoaded) return;\r\n+\r\n+    emit(const SettingsState.loading());\r\n+\r\n+    final result = await _settingsRepository.updateNotificationSettings(\r\n+      event.settings,\r\n+    );\r\n+\r\n+    result.fold(\r\n+      (failure) => emit(SettingsState.failure(failure)),\r\n+      (_) => add(const SettingsEvent.started()),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _handleLanguageChanged(\r\n+    LanguageChanged event,\r\n+    Emitter<SettingsState> emit,\r\n+  ) async {\r\n+    final currentState = state;\r\n+    if (currentState is! SettingsLoaded) return;\r\n+\r\n+    emit(const SettingsState.loading());\r\n+\r\n+    final result = await _settingsRepository.updateLanguage(event.languageCode);\r\n+    result.fold(\r\n+      (failure) => emit(SettingsState.failure(failure)),\r\n+      (_) => add(const SettingsEvent.started()),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n"
                }
            ],
            "date": 1734427531262,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/bloc/settings/settings_bloc.dart\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:freezed_annotation/freezed_annotation.dart';\r\nimport 'package:injectable/injectable.dart';\r\nimport '../../../domain/repositories/i_settings_repository.dart';\r\nimport '../../../domain/entities/notification_settings.dart';\r\nimport '../../../../../core/errors/failures.dart';\r\n\r\npart 'settings_event.dart';\r\npart 'settings_state.dart';\r\npart 'settings_bloc.freezed.dart';\r\n\r\n@injectable\r\nclass SettingsBloc extends Bloc<SettingsEvent, SettingsState> {\r\n  final ISettingsRepository _settingsRepository;\r\n\r\n  SettingsBloc(this._settingsRepository) : super(const SettingsState.initial()) {\r\n    on<SettingsEvent>((event, emit) async {\r\n      await event.map(\r\n        started: (_) => _handleStarted(emit),\r\n        themeChanged: (e) => _handleThemeChanged(e, emit),\r\n        notificationSettingsChanged: (e) => _handleNotificationSettingsChanged(e, emit),\r\n        languageChanged: (e) => _handleLanguageChanged(e, emit),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> _handleStarted(Emitter<SettingsState> emit) async {\r\n    emit(const SettingsState.loading());\r\n\r\n    final settings = await _settingsRepository.getSettings();\r\n    settings.fold(\r\n      (failure) => emit(SettingsState.failure(failure)),\r\n      (settings) => emit(SettingsState.loaded(settings)),\r\n    );\r\n  }\r\n\r\n  Future<void> _handleThemeChanged(\r\n    ThemeChanged event,\r\n    Emitter<SettingsState> emit,\r\n  ) async {\r\n    final currentState = state;\r\n    if (currentState is! SettingsLoaded) return;\r\n\r\n    emit(const SettingsState.loading());\r\n\r\n    final result = await _settingsRepository.updateTheme(event.isDarkMode);\r\n    result.fold(\r\n      (failure) => emit(SettingsState.failure(failure)),\r\n      (_) => add(const SettingsEvent.started()),\r\n    );\r\n  }\r\n\r\n  Future<void> _handleNotificationSettingsChanged(\r\n    NotificationSettingsChanged event,\r\n    Emitter<SettingsState> emit,\r\n  ) async {\r\n    final currentState = state;\r\n    if (currentState is! SettingsLoaded) return;\r\n\r\n    emit(const SettingsState.loading());\r\n\r\n    final result = await _settingsRepository.updateNotificationSettings(\r\n      event.settings,\r\n    );\r\n\r\n    result.fold(\r\n      (failure) => emit(SettingsState.failure(failure)),\r\n      (_) => add(const SettingsEvent.started()),\r\n    );\r\n  }\r\n\r\n  Future<void> _handleLanguageChanged(\r\n    LanguageChanged event,\r\n    Emitter<SettingsState> emit,\r\n  ) async {\r\n    final currentState = state;\r\n    if (currentState is! SettingsLoaded) return;\r\n\r\n    emit(const SettingsState.loading());\r\n\r\n    final result = await _settingsRepository.updateLanguage(event.languageCode);\r\n    result.fold(\r\n      (failure) => emit(SettingsState.failure(failure)),\r\n      (_) => add(const SettingsEvent.started()),\r\n    );\r\n  }\r\n}\r\n\r\n"
        }
    ]
}