{
    "sourceFile": "lib/features/auth/presentation/screens/settings_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734427629466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734429525305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/features/auth/presentation/screens/settings_screen.dart\r\n+import 'package:experiment_planner/features/auth/domain/entities/app_settings.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../bloc/settings/settings_bloc.dart';\r\n import '../widgets/settings_section.dart';\r\n"
                },
                {
                    "date": 1734429579778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+// lib/features/auth/presentation/screens/settings_screen.dart\r\n+import 'package:experiment_planner/features/auth/domain/entities/app_settings.dart';\r\n+import 'package:experiment_planner/features/auth/domain/entities/notification_settings.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../bloc/settings/settings_bloc.dart';\r\n+import '../widgets/settings_section.dart';\r\n+import '../widgets/notification_settings_dialog.dart';\r\n+import '../../../../core/presentation/widgets/loading_overlay.dart';\r\n+\r\n+@RoutePage()\r\n+class SettingsScreen extends StatelessWidget {\r\n+  const SettingsScreen({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocConsumer<SettingsBloc, SettingsState>(\r\n+      listener: (context, state) {\r\n+        state.mapOrNull(\r\n+          failure: (state) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Text(state.failure.toString()),\r\n+                backgroundColor: Colors.red,\r\n+              ),\r\n+            );\r\n+          },\r\n+        );\r\n+      },\r\n+      builder: (context, state) {\r\n+        return LoadingOverlay(\r\n+          isLoading: state is Loading,\r\n+          child: Scaffold(\r\n+            appBar: AppBar(\r\n+              title: const Text('Settings'),\r\n+            ),\r\n+            body: state.maybeMap(\r\n+              loaded: (state) => _buildSettings(context, state.settings),\r\n+              orElse: () => const SizedBox.shrink(),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSettings(BuildContext context, AppSettings settings) {\r\n+    return ListView(\r\n+      padding: const EdgeInsets.all(16),\r\n+      children: [\r\n+        SettingsSection(\r\n+          title: 'Appearance',\r\n+          children: [\r\n+            SwitchListTile(\r\n+              title: const Text('Dark Mode'),\r\n+              value: settings.isDarkMode,\r\n+              onChanged: (value) {\r\n+                context.read<SettingsBloc>().add(\r\n+                  SettingsEvent.themeChanged(value),\r\n+                );\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+        const SizedBox(height: 16),\r\n+        SettingsSection(\r\n+          title: 'Language',\r\n+          children: [\r\n+            ListTile(\r\n+              title: const Text('Language'),\r\n+              subtitle: Text(_getLanguageName(settings.languageCode)),\r\n+              trailing: const Icon(Icons.chevron_right),\r\n+              onTap: () => _showLanguageDialog(context, settings.languageCode),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+        const SizedBox(height: 16),\r\n+        SettingsSection(\r\n+          title: 'Notifications',\r\n+          children: [\r\n+            ListTile(\r\n+              title: const Text('Notification Settings'),\r\n+              subtitle: const Text('Manage notification preferences'),\r\n+              trailing: const Icon(Icons.chevron_right),\r\n+              onTap: () => _showNotificationSettings(\r\n+                context,\r\n+                settings.notificationSettings,\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  String _getLanguageName(String code) {\r\n+    switch (code) {\r\n+      case 'en':\r\n+        return 'English';\r\n+      case 'es':\r\n+        return 'Español';\r\n+      default:\r\n+        return 'Unknown';\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _showLanguageDialog(BuildContext context, String currentCode) async {\r\n+    final languages = {\r\n+      'en': 'English',\r\n+      'es': 'Español',\r\n+    };\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Select Language'),\r\n+        content: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: languages.entries.map((entry) {\r\n+            return RadioListTile<String>(\r\n+              title: Text(entry.value),\r\n+              value: entry.key,\r\n+              groupValue: currentCode,\r\n+              onChanged: (value) {\r\n+                Navigator.pop(context);\r\n+                if (value != null) {\r\n+                  context.read<SettingsBloc>().add(\r\n+                    SettingsEvent.languageChanged(value),\r\n+                  );\r\n+                }\r\n+              },\r\n+            );\r\n+          }).toList(),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _showNotificationSettings(\r\n+    BuildContext context,\r\n+    NotificationSettings settings,\r\n+  ) async {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => NotificationSettingsDialog(\r\n+        settings: settings,\r\n+        onSave: (newSettings) {\r\n+          context.read<SettingsBloc>().add(\r\n+            SettingsEvent.notificationSettingsChanged(newSettings),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class RoutePage {\r\n+  const RoutePage();\r\n+}\r\n+\r\n"
                }
            ],
            "date": 1734427629466,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/screens/settings_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../bloc/settings/settings_bloc.dart';\r\nimport '../widgets/settings_section.dart';\r\nimport '../widgets/notification_settings_dialog.dart';\r\nimport '../../../../core/presentation/widgets/loading_overlay.dart';\r\n\r\n@RoutePage()\r\nclass SettingsScreen extends StatelessWidget {\r\n  const SettingsScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocConsumer<SettingsBloc, SettingsState>(\r\n      listener: (context, state) {\r\n        state.mapOrNull(\r\n          failure: (state) {\r\n            ScaffoldMessenger.of(context).showSnackBar(\r\n              SnackBar(\r\n                content: Text(state.failure.toString()),\r\n                backgroundColor: Colors.red,\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n      builder: (context, state) {\r\n        return LoadingOverlay(\r\n          isLoading: state is Loading,\r\n          child: Scaffold(\r\n            appBar: AppBar(\r\n              title: const Text('Settings'),\r\n            ),\r\n            body: state.maybeMap(\r\n              loaded: (state) => _buildSettings(context, state.settings),\r\n              orElse: () => const SizedBox.shrink(),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildSettings(BuildContext context, AppSettings settings) {\r\n    return ListView(\r\n      padding: const EdgeInsets.all(16),\r\n      children: [\r\n        SettingsSection(\r\n          title: 'Appearance',\r\n          children: [\r\n            SwitchListTile(\r\n              title: const Text('Dark Mode'),\r\n              value: settings.isDarkMode,\r\n              onChanged: (value) {\r\n                context.read<SettingsBloc>().add(\r\n                  SettingsEvent.themeChanged(value),\r\n                );\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n        const SizedBox(height: 16),\r\n        SettingsSection(\r\n          title: 'Language',\r\n          children: [\r\n            ListTile(\r\n              title: const Text('Language'),\r\n              subtitle: Text(_getLanguageName(settings.languageCode)),\r\n              trailing: const Icon(Icons.chevron_right),\r\n              onTap: () => _showLanguageDialog(context, settings.languageCode),\r\n            ),\r\n          ],\r\n        ),\r\n        const SizedBox(height: 16),\r\n        SettingsSection(\r\n          title: 'Notifications',\r\n          children: [\r\n            ListTile(\r\n              title: const Text('Notification Settings'),\r\n              subtitle: const Text('Manage notification preferences'),\r\n              trailing: const Icon(Icons.chevron_right),\r\n              onTap: () => _showNotificationSettings(\r\n                context,\r\n                settings.notificationSettings,\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  String _getLanguageName(String code) {\r\n    switch (code) {\r\n      case 'en':\r\n        return 'English';\r\n      case 'es':\r\n        return 'Español';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  }\r\n\r\n  Future<void> _showLanguageDialog(BuildContext context, String currentCode) async {\r\n    final languages = {\r\n      'en': 'English',\r\n      'es': 'Español',\r\n    };\r\n\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: const Text('Select Language'),\r\n        content: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: languages.entries.map((entry) {\r\n            return RadioListTile<String>(\r\n              title: Text(entry.value),\r\n              value: entry.key,\r\n              groupValue: currentCode,\r\n              onChanged: (value) {\r\n                Navigator.pop(context);\r\n                if (value != null) {\r\n                  context.read<SettingsBloc>().add(\r\n                    SettingsEvent.languageChanged(value),\r\n                  );\r\n                }\r\n              },\r\n            );\r\n          }).toList(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _showNotificationSettings(\r\n    BuildContext context,\r\n    NotificationSettings settings,\r\n  ) async {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => NotificationSettingsDialog(\r\n        settings: settings,\r\n        onSave: (newSettings) {\r\n          context.read<SettingsBloc>().add(\r\n            SettingsEvent.notificationSettingsChanged(newSettings),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n"
        }
    ]
}