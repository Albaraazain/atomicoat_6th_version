{
    "sourceFile": "lib/features/auth/presentation/screens/admin/user_management_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734379171463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734428737407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/features/auth/presentation/screens/admin/user_management_screen.dart\r\n+import 'package:experiment_planner/features/auth/domain/entities/user.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../bloc/user_management_bloc.dart';\r\n import '../../widgets/user_list_item.dart';\r\n"
                },
                {
                    "date": 1734428748539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/features/auth/presentation/screens/admin/user_management_screen.dart\r\n+import 'package:auto_route/auto_route.dart';\r\n import 'package:experiment_planner/features/auth/domain/entities/user.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../bloc/user_management_bloc.dart';\r\n"
                }
            ],
            "date": 1734379171463,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/screens/admin/user_management_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../bloc/user_management_bloc.dart';\r\nimport '../../widgets/user_list_item.dart';\r\nimport '../../../../../core/enums/user_role.dart';\r\n\r\n@RoutePage()\r\nclass UserManagementScreen extends StatelessWidget {\r\n  const UserManagementScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('User Management'),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.refresh),\r\n            onPressed: () {\r\n              context.read<UserManagementBloc>().add(\r\n                const UserManagementEvent.refreshRequested(),\r\n              );\r\n            },\r\n          ),\r\n        ],\r\n      ),\r\n      body: BlocBuilder<UserManagementBloc, UserManagementState>(\r\n        builder: (context, state) {\r\n          return state.map(\r\n            initial: (_) => const Center(child: CircularProgressIndicator()),\r\n            loading: (_) => const Center(child: CircularProgressIndicator()),\r\n            loaded: (state) => _buildUserList(context, state.users),\r\n            failure: (state) => Center(\r\n              child: Text('Error: ${state.failure}'),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildUserList(BuildContext context, List<User> users) {\r\n    return ListView.builder(\r\n      itemCount: users.length,\r\n      itemBuilder: (context, index) {\r\n        final user = users[index];\r\n        return UserListItem(\r\n          user: user,\r\n          onRoleChanged: (newRole) {\r\n            context.read<UserManagementBloc>().add(\r\n              UserManagementEvent.roleChanged(\r\n                userId: user.id,\r\n                newRole: newRole,\r\n              ),\r\n            );\r\n          },\r\n          onStatusChanged: (newStatus) {\r\n            context.read<UserManagementBloc>().add(\r\n              UserManagementEvent.statusChanged(\r\n                userId: user.id,\r\n                newStatus: newStatus,\r\n              ),\r\n            );\r\n          },\r\n          onDelete: () {\r\n            showDialog(\r\n              context: context,\r\n              builder: (context) => AlertDialog(\r\n                title: const Text('Delete User'),\r\n                content: Text('Are you sure you want to delete ${user.name}?'),\r\n                actions: [\r\n                  TextButton(\r\n                    onPressed: () => Navigator.pop(context),\r\n                    child: const Text('Cancel'),\r\n                  ),\r\n                  TextButton(\r\n                    onPressed: () {\r\n                      Navigator.pop(context);\r\n                      context.read<UserManagementBloc>().add(\r\n                        UserManagementEvent.userDeleted(userId: user.id),\r\n                      );\r\n                    },\r\n                    child: const Text('Delete'),\r\n                    style: TextButton.styleFrom(\r\n                      foregroundColor: Colors.red,\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}