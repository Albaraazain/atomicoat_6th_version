{
    "sourceFile": "lib/features/auth/presentation/screens/admin/admin_dashboard_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734379056159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734379056159,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/screens/admin/admin_dashboard_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:auto_route/auto_route.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../bloc/admin_dashboard_bloc.dart';\r\nimport '../../widgets/dashboard_card.dart';\r\n\r\n@RoutePage()\r\nclass AdminDashboardScreen extends StatelessWidget {\r\n  const AdminDashboardScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Admin Dashboard'),\r\n      ),\r\n      body: BlocBuilder<AdminDashboardBloc, AdminDashboardState>(\r\n        builder: (context, state) {\r\n          return state.map(\r\n            initial: (_) => const Center(child: CircularProgressIndicator()),\r\n            loading: (_) => const Center(child: CircularProgressIndicator()),\r\n            loaded: (state) => _buildDashboard(context, state),\r\n            failure: (state) => Center(\r\n              child: Text('Error: ${state.failure}'),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDashboard(BuildContext context, AdminDashboardLoaded state) {\r\n    return GridView.count(\r\n      crossAxisCount: 2,\r\n      padding: const EdgeInsets.all(16),\r\n      children: [\r\n        DashboardCard(\r\n          title: 'Pending Requests',\r\n          value: state.pendingRequestsCount.toString(),\r\n          icon: Icons.pending_actions,\r\n          onTap: () => context.router.push(const PendingRequestsRoute()),\r\n        ),\r\n        DashboardCard(\r\n          title: 'Total Users',\r\n          value: state.totalUsersCount.toString(),\r\n          icon: Icons.people,\r\n          onTap: () => context.router.push(const UserManagementRoute()),\r\n        ),\r\n        // Add more cards as needed\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\n"
        }
    ]
}