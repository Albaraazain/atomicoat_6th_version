{
    "sourceFile": "lib/features/auth/presentation/screens/profile_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734427032917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734430456634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/features/auth/presentation/screens/profile_screen.dart\r\n+import 'package:experiment_planner/features/auth/presentation/screens/settings_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../bloc/profile/profile_bloc.dart';\r\n import '../widgets/profile_header.dart';\r\n"
                },
                {
                    "date": 1734430464919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+// lib/features/auth/presentation/screens/profile_screen.dart\r\n+import 'package:auto_route/auto_route.dart';\r\n+import 'package:experiment_planner/features/auth/presentation/screens/settings_screen.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../bloc/profile/profile_bloc.dart';\r\n+import '../widgets/profile_header.dart';\r\n+import '../widgets/profile_menu_item.dart';\r\n+import '../../../../core/presentation/widgets/loading_overlay.dart';\r\n+\r\n+@RoutePage()\r\n+class ProfileScreen extends StatelessWidget {\r\n+  const ProfileScreen({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocConsumer<ProfileBloc, ProfileState>(\r\n+      listener: (context, state) {\r\n+        state.mapOrNull(\r\n+          failure: (state) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Text(state.failure.toString()),\r\n+                backgroundColor: Colors.red,\r\n+              ),\r\n+            );\r\n+          },\r\n+          passwordChangeSuccess: (_) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              const SnackBar(\r\n+                content: Text('Password updated successfully'),\r\n+                backgroundColor: Colors.green,\r\n+              ),\r\n+            );\r\n+          },\r\n+        );\r\n+      },\r\n+      builder: (context, state) {\r\n+        return LoadingOverlay(\r\n+          isLoading: state is Loading,\r\n+          child: Scaffold(\r\n+            appBar: AppBar(\r\n+              title: const Text('Profile'),\r\n+              actions: [\r\n+                IconButton(\r\n+                  icon: const Icon(Icons.settings),\r\n+                  onPressed: () => context.router.push(const SettingsRoute()),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            body: state.maybeMap(\r\n+              loaded: (state) => _buildProfile(context, state.user),\r\n+              orElse: () => const SizedBox.shrink(),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildProfile(BuildContext context, User user) {\r\n+    return SingleChildScrollView(\r\n+      padding: const EdgeInsets.all(16),\r\n+      child: Column(\r\n+        children: [\r\n+          ProfileHeader(\r\n+            user: user,\r\n+            onImageTap: () => _selectProfileImage(context),\r\n+          ),\r\n+          const SizedBox(height: 24),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.person_outline,\r\n+            title: 'Edit Name',\r\n+            subtitle: user.name,\r\n+            onTap: () => _showEditNameDialog(context, user.name),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.lock_outline,\r\n+            title: 'Change Password',\r\n+            subtitle: '********',\r\n+            onTap: () => _showChangePasswordDialog(context),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.computer,\r\n+            title: 'Machine Serial',\r\n+            subtitle: user.machineSerial,\r\n+            onTap: null,\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.badge_outlined,\r\n+            title: 'Role',\r\n+            subtitle: user.role.toString().split('.').last,\r\n+            onTap: null,\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _selectProfileImage(BuildContext context) async {\r\n+    // Implement image picker functionality\r\n+  }\r\n+\r\n+  Future<void> _showEditNameDialog(BuildContext context, String currentName) async {\r\n+    final nameController = TextEditingController(text: currentName);\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Edit Name'),\r\n+        content: TextField(\r\n+          controller: nameController,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Name',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+          autofocus: true,\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.nameUpdated(nameController.text.trim()),\r\n+              );\r\n+            },\r\n+            child: const Text('Save'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _showChangePasswordDialog(BuildContext context) async {\r\n+    final currentPasswordController = TextEditingController();\r\n+    final newPasswordController = TextEditingController();\r\n+    final confirmPasswordController = TextEditingController();\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Change Password'),\r\n+        content: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            TextField(\r\n+              controller: currentPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Current Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: newPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: confirmPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Confirm New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+          ],\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              if (newPasswordController.text != confirmPasswordController.text) {\r\n+                ScaffoldMessenger.of(context).showSnackBar(\r\n+                  const SnackBar(\r\n+                    content: Text('Passwords do not match'),\r\n+                    backgroundColor: Colors.red,\r\n+                  ),\r\n+                );\r\n+                return;\r\n+              }\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.passwordChangeRequested(\r\n+                  currentPassword: currentPasswordController.text,\r\n+                  newPassword: newPasswordController.text,\r\n+                ),\r\n+              );\r\n+            },\r\n+            child: const Text('Change'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734430479781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+// lib/features/auth/presentation/screens/profile_screen.dart\r\n+import 'package:auto_route/auto_route.dart';\r\n+import 'package:experiment_planner/features/auth/presentation/screens/settings_screen.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../bloc/profile/profile_bloc.dart';\r\n+import '../widgets/profile_header.dart';\r\n+import '../widgets/profile_menu_item.dart';\r\n+import '../../../../core/presentation/widgets/loading_overlay.dart';\r\n+\r\n+@RoutePage()\r\n+class ProfileScreen extends StatelessWidget {\r\n+  const ProfileScreen({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocConsumer<ProfileBloc, ProfileState>(\r\n+      listener: (context, state) {\r\n+        state.mapOrNull(\r\n+          failure: (state) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Text(state.failure.toString()),\r\n+                backgroundColor: Colors.red,\r\n+              ),\r\n+            );\r\n+          },\r\n+          passwordChangeSuccess: (_) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              const SnackBar(\r\n+                content: Text('Password updated successfully'),\r\n+                backgroundColor: Colors.green,\r\n+              ),\r\n+            );\r\n+          },\r\n+        );\r\n+      },\r\n+      builder: (context, state) {\r\n+        return LoadingOverlay(\r\n+          isLoading: state is Loading,\r\n+          child: Scaffold(\r\n+            appBar: AppBar(\r\n+              title: const Text('Profile'),\r\n+              actions: [\r\n+                IconButton(\r\n+                  icon: const Icon(Icons.settings),\r\n+                  onPressed: () => context.router.push(const SettingsRoute()),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            body: state.maybeMap(\r\n+              loaded: (state) => _buildProfile(context, state.user),\r\n+              orElse: () => const SizedBox.shrink(),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildProfile(BuildContext context, User user) {\r\n+    return SingleChildScrollView(\r\n+      padding: const EdgeInsets.all(16),\r\n+      child: Column(\r\n+        children: [\r\n+          ProfileHeader(\r\n+            user: user,\r\n+            onImageTap: () => _selectProfileImage(context),\r\n+          ),\r\n+          const SizedBox(height: 24),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.person_outline,\r\n+            title: 'Edit Name',\r\n+            subtitle: user.name,\r\n+            onTap: () => _showEditNameDialog(context, user.name),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.lock_outline,\r\n+            title: 'Change Password',\r\n+            subtitle: '********',\r\n+            onTap: () => _showChangePasswordDialog(context),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.computer,\r\n+            title: 'Machine Serial',\r\n+            subtitle: user.machineSerial,\r\n+            onTap: null,\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.badge_outlined,\r\n+            title: 'Role',\r\n+            subtitle: user.role.toString().split('.').last,\r\n+            onTap: null,\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _selectProfileImage(BuildContext context) async {\r\n+    // Implement image picker functionality\r\n+  }\r\n+\r\n+  Future<void> _showEditNameDialog(BuildContext context, String currentName) async {\r\n+    final nameController = TextEditingController(text: currentName);\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Edit Name'),\r\n+        content: TextField(\r\n+          controller: nameController,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Name',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+          autofocus: true,\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.nameUpdated(nameController.text.trim()),\r\n+              );\r\n+            },\r\n+            child: const Text('Save'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _showChangePasswordDialog(BuildContext context) async {\r\n+    final currentPasswordController = TextEditingController();\r\n+    final newPasswordController = TextEditingController();\r\n+    final confirmPasswordController = TextEditingController();\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Change Password'),\r\n+        content: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            TextField(\r\n+              controller: currentPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Current Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: newPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: confirmPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Confirm New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+          ],\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              if (newPasswordController.text != confirmPasswordController.text) {\r\n+                ScaffoldMessenger.of(context).showSnackBar(\r\n+                  const SnackBar(\r\n+                    content: Text('Passwords do not match'),\r\n+                    backgroundColor: Colors.red,\r\n+                  ),\r\n+                );\r\n+                return;\r\n+              }\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.passwordChangeRequested(\r\n+                  currentPassword: currentPasswordController.text,\r\n+                  newPassword: newPasswordController.text,\r\n+                ),\r\n+              );\r\n+            },\r\n+            child: const Text('Change'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734430519318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+// lib/features/auth/presentation/screens/profile_screen.dart\r\n+import 'package:auto_route/auto_route.dart' as auto_route;\r\n+import 'package:experiment_planner/features/auth/presentation/screens/settings_screen.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../bloc/profile/profile_bloc.dart';\r\n+import '../widgets/profile_header.dart';\r\n+import '../widgets/profile_menu_item.dart';\r\n+import '../../../../core/presentation/widgets/loading_overlay.dart';\r\n+\r\n+@auto_route.RoutePage()\r\n+class ProfileScreen extends StatelessWidget {\r\n+  const ProfileScreen({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocConsumer<ProfileBloc, ProfileState>(\r\n+      listener: (context, state) {\r\n+        state.mapOrNull(\r\n+          failure: (state) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Text(state.failure.toString()),\r\n+                backgroundColor: Colors.red,\r\n+              ),\r\n+            );\r\n+          },\r\n+          passwordChangeSuccess: (_) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              const SnackBar(\r\n+                content: Text('Password updated successfully'),\r\n+                backgroundColor: Colors.green,\r\n+              ),\r\n+            );\r\n+          },\r\n+        );\r\n+      },\r\n+      builder: (context, state) {\r\n+        return LoadingOverlay(\r\n+          isLoading: state is Loading,\r\n+          child: Scaffold(\r\n+            appBar: AppBar(\r\n+              title: const Text('Profile'),\r\n+              actions: [\r\n+                IconButton(\r\n+                  icon: const Icon(Icons.settings),\r\n+                  onPressed: () => context.router.push(const SettingsRoute()),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            body: state.maybeMap(\r\n+              loaded: (state) => _buildProfile(context, state.user),\r\n+              orElse: () => const SizedBox.shrink(),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildProfile(BuildContext context, User user) {\r\n+    return SingleChildScrollView(\r\n+      padding: const EdgeInsets.all(16),\r\n+      child: Column(\r\n+        children: [\r\n+          ProfileHeader(\r\n+            user: user,\r\n+            onImageTap: () => _selectProfileImage(context),\r\n+          ),\r\n+          const SizedBox(height: 24),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.person_outline,\r\n+            title: 'Edit Name',\r\n+            subtitle: user.name,\r\n+            onTap: () => _showEditNameDialog(context, user.name),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.lock_outline,\r\n+            title: 'Change Password',\r\n+            subtitle: '********',\r\n+            onTap: () => _showChangePasswordDialog(context),\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.computer,\r\n+            title: 'Machine Serial',\r\n+            subtitle: user.machineSerial,\r\n+            onTap: null,\r\n+          ),\r\n+          const Divider(),\r\n+          ProfileMenuItem(\r\n+            icon: Icons.badge_outlined,\r\n+            title: 'Role',\r\n+            subtitle: user.role.toString().split('.').last,\r\n+            onTap: null,\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _selectProfileImage(BuildContext context) async {\r\n+    // Implement image picker functionality\r\n+  }\r\n+\r\n+  Future<void> _showEditNameDialog(BuildContext context, String currentName) async {\r\n+    final nameController = TextEditingController(text: currentName);\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Edit Name'),\r\n+        content: TextField(\r\n+          controller: nameController,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Name',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+          autofocus: true,\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.nameUpdated(nameController.text.trim()),\r\n+              );\r\n+            },\r\n+            child: const Text('Save'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _showChangePasswordDialog(BuildContext context) async {\r\n+    final currentPasswordController = TextEditingController();\r\n+    final newPasswordController = TextEditingController();\r\n+    final confirmPasswordController = TextEditingController();\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Change Password'),\r\n+        content: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            TextField(\r\n+              controller: currentPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Current Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: newPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+            const SizedBox(height: 16),\r\n+            TextField(\r\n+              controller: confirmPasswordController,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Confirm New Password',\r\n+                border: OutlineInputBorder(),\r\n+              ),\r\n+              obscureText: true,\r\n+            ),\r\n+          ],\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Cancel'),\r\n+          ),\r\n+          TextButton(\r\n+            onPressed: () {\r\n+              if (newPasswordController.text != confirmPasswordController.text) {\r\n+                ScaffoldMessenger.of(context).showSnackBar(\r\n+                  const SnackBar(\r\n+                    content: Text('Passwords do not match'),\r\n+                    backgroundColor: Colors.red,\r\n+                  ),\r\n+                );\r\n+                return;\r\n+              }\r\n+              Navigator.pop(context);\r\n+              context.read<ProfileBloc>().add(\r\n+                ProfileEvent.passwordChangeRequested(\r\n+                  currentPassword: currentPasswordController.text,\r\n+                  newPassword: newPasswordController.text,\r\n+                ),\r\n+              );\r\n+            },\r\n+            child: const Text('Change'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1734427032917,
            "name": "Commit-0",
            "content": "// lib/features/auth/presentation/screens/profile_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../bloc/profile/profile_bloc.dart';\r\nimport '../widgets/profile_header.dart';\r\nimport '../widgets/profile_menu_item.dart';\r\nimport '../../../../core/presentation/widgets/loading_overlay.dart';\r\n\r\n@RoutePage()\r\nclass ProfileScreen extends StatelessWidget {\r\n  const ProfileScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocConsumer<ProfileBloc, ProfileState>(\r\n      listener: (context, state) {\r\n        state.mapOrNull(\r\n          failure: (state) {\r\n            ScaffoldMessenger.of(context).showSnackBar(\r\n              SnackBar(\r\n                content: Text(state.failure.toString()),\r\n                backgroundColor: Colors.red,\r\n              ),\r\n            );\r\n          },\r\n          passwordChangeSuccess: (_) {\r\n            ScaffoldMessenger.of(context).showSnackBar(\r\n              const SnackBar(\r\n                content: Text('Password updated successfully'),\r\n                backgroundColor: Colors.green,\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n      builder: (context, state) {\r\n        return LoadingOverlay(\r\n          isLoading: state is Loading,\r\n          child: Scaffold(\r\n            appBar: AppBar(\r\n              title: const Text('Profile'),\r\n              actions: [\r\n                IconButton(\r\n                  icon: const Icon(Icons.settings),\r\n                  onPressed: () => context.router.push(const SettingsRoute()),\r\n                ),\r\n              ],\r\n            ),\r\n            body: state.maybeMap(\r\n              loaded: (state) => _buildProfile(context, state.user),\r\n              orElse: () => const SizedBox.shrink(),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildProfile(BuildContext context, User user) {\r\n    return SingleChildScrollView(\r\n      padding: const EdgeInsets.all(16),\r\n      child: Column(\r\n        children: [\r\n          ProfileHeader(\r\n            user: user,\r\n            onImageTap: () => _selectProfileImage(context),\r\n          ),\r\n          const SizedBox(height: 24),\r\n          ProfileMenuItem(\r\n            icon: Icons.person_outline,\r\n            title: 'Edit Name',\r\n            subtitle: user.name,\r\n            onTap: () => _showEditNameDialog(context, user.name),\r\n          ),\r\n          const Divider(),\r\n          ProfileMenuItem(\r\n            icon: Icons.lock_outline,\r\n            title: 'Change Password',\r\n            subtitle: '********',\r\n            onTap: () => _showChangePasswordDialog(context),\r\n          ),\r\n          const Divider(),\r\n          ProfileMenuItem(\r\n            icon: Icons.computer,\r\n            title: 'Machine Serial',\r\n            subtitle: user.machineSerial,\r\n            onTap: null,\r\n          ),\r\n          const Divider(),\r\n          ProfileMenuItem(\r\n            icon: Icons.badge_outlined,\r\n            title: 'Role',\r\n            subtitle: user.role.toString().split('.').last,\r\n            onTap: null,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _selectProfileImage(BuildContext context) async {\r\n    // Implement image picker functionality\r\n  }\r\n\r\n  Future<void> _showEditNameDialog(BuildContext context, String currentName) async {\r\n    final nameController = TextEditingController(text: currentName);\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: const Text('Edit Name'),\r\n        content: TextField(\r\n          controller: nameController,\r\n          decoration: const InputDecoration(\r\n            labelText: 'Name',\r\n            border: OutlineInputBorder(),\r\n          ),\r\n          autofocus: true,\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: const Text('Cancel'),\r\n          ),\r\n          TextButton(\r\n            onPressed: () {\r\n              Navigator.pop(context);\r\n              context.read<ProfileBloc>().add(\r\n                ProfileEvent.nameUpdated(nameController.text.trim()),\r\n              );\r\n            },\r\n            child: const Text('Save'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _showChangePasswordDialog(BuildContext context) async {\r\n    final currentPasswordController = TextEditingController();\r\n    final newPasswordController = TextEditingController();\r\n    final confirmPasswordController = TextEditingController();\r\n\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: const Text('Change Password'),\r\n        content: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            TextField(\r\n              controller: currentPasswordController,\r\n              decoration: const InputDecoration(\r\n                labelText: 'Current Password',\r\n                border: OutlineInputBorder(),\r\n              ),\r\n              obscureText: true,\r\n            ),\r\n            const SizedBox(height: 16),\r\n            TextField(\r\n              controller: newPasswordController,\r\n              decoration: const InputDecoration(\r\n                labelText: 'New Password',\r\n                border: OutlineInputBorder(),\r\n              ),\r\n              obscureText: true,\r\n            ),\r\n            const SizedBox(height: 16),\r\n            TextField(\r\n              controller: confirmPasswordController,\r\n              decoration: const InputDecoration(\r\n                labelText: 'Confirm New Password',\r\n                border: OutlineInputBorder(),\r\n              ),\r\n              obscureText: true,\r\n            ),\r\n          ],\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: const Text('Cancel'),\r\n          ),\r\n          TextButton(\r\n            onPressed: () {\r\n              if (newPasswordController.text != confirmPasswordController.text) {\r\n                ScaffoldMessenger.of(context).showSnackBar(\r\n                  const SnackBar(\r\n                    content: Text('Passwords do not match'),\r\n                    backgroundColor: Colors.red,\r\n                  ),\r\n                );\r\n                return;\r\n              }\r\n              Navigator.pop(context);\r\n              context.read<ProfileBloc>().add(\r\n                ProfileEvent.passwordChangeRequested(\r\n                  currentPassword: currentPasswordController.text,\r\n                  newPassword: newPasswordController.text,\r\n                ),\r\n              );\r\n            },\r\n            child: const Text('Change'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}