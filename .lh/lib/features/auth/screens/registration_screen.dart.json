{
    "sourceFile": "lib/features/auth/screens/registration_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734376760282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734431621629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+// lib/features/auth/screens/registration_screen.dart\r\n+class RegistrationScreen extends StatefulWidget {\r\n+  const RegistrationScreen({Key? key}) : super(key: key);\r\n+\r\n+  @override\r\n+  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n+}\r\n+\r\n+class _RegistrationScreenState extends State<RegistrationScreen> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  final _nameController = TextEditingController();\r\n+  final _emailController = TextEditingController();\r\n+  final _passwordController = TextEditingController();\r\n+  final _machineSerialController = TextEditingController();\r\n+  bool _obscurePassword = true;\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _emailController.dispose();\r\n+    _passwordController.dispose();\r\n+    _machineSerialController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignUpRequested(\r\n+          email: _emailController.text.trim(),\r\n+          password: _passwordController.text,\r\n+          name: _nameController.text.trim(),\r\n+          machineSerial: _machineSerialController.text.trim(),\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+    TextInputType? keyboardType,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Register'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+            if (state.errorMessage!.contains('Registration successful')) {\r\n+              Future.delayed(const Duration(seconds: 2), () {\r\n+                Navigator.pop(context);\r\n+              });\r\n+            }\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Create Account',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Name',\r\n+                          icon: Icons.person,\r\n+                          controller: _nameController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your name';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          keyboardType: TextInputType.emailAddress,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignInRequested(\r\n+          _emailController.text.trim(),\r\n+          _passwordController.text,\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n+      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Login'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+          } else if (state.isAuthenticated) {\r\n+            Navigator.of(context).pushReplacementNamed(\r\n+              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n+            );\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Welcome Back',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+)\r\n+                                .hasMatch(value!)) {\r\n+                              return 'Please enter a valid email address';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Password',\r\n+                          icon: Icons.lock,\r\n+                          controller: _passwordController,\r\n+                          isPassword: true,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your password';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        SizedBox(\r\n+                          width: double.infinity,\r\n+                          child: ElevatedButton(\r\n+                            onPressed: state.isLoading ? null : _submit,\r\n+                            style: ElevatedButton.styleFrom(\r\n+                              backgroundColor: Colors.blueAccent,\r\n+                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                              shape: RoundedRectangleBorder(\r\n+                                borderRadius: BorderRadius.circular(12),\r\n+                              ),\r\n+                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n+                            ),\r\n+                            child: state.isLoading\r\n+                                ? const SizedBox(\r\n+                                    height: 20,\r\n+                                    width: 20,\r\n+                                    child: CircularProgressIndicator(\r\n+                                      strokeWidth: 2,\r\n+                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                                    ),\r\n+                                  )\r\n+                                : const Text(\r\n+                                    'Register',\r\n+                                    style: TextStyle(fontSize: 16),\r\n+                                  ),\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734431630996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+// lib/features/auth/screens/registration_screen.dart\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class RegistrationScreen extends StatefulWidget {\r\n+  const RegistrationScreen({Key? key}) : super(key: key);\r\n+\r\n+  @override\r\n+  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n+}\r\n+\r\n+class _RegistrationScreenState extends State<RegistrationScreen> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  final _nameController = TextEditingController();\r\n+  final _emailController = TextEditingController();\r\n+  final _passwordController = TextEditingController();\r\n+  final _machineSerialController = TextEditingController();\r\n+  bool _obscurePassword = true;\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _emailController.dispose();\r\n+    _passwordController.dispose();\r\n+    _machineSerialController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignUpRequested(\r\n+          email: _emailController.text.trim(),\r\n+          password: _passwordController.text,\r\n+          name: _nameController.text.trim(),\r\n+          machineSerial: _machineSerialController.text.trim(),\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+    TextInputType? keyboardType,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Register'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+            if (state.errorMessage!.contains('Registration successful')) {\r\n+              Future.delayed(const Duration(seconds: 2), () {\r\n+                Navigator.pop(context);\r\n+              });\r\n+            }\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Create Account',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Name',\r\n+                          icon: Icons.person,\r\n+                          controller: _nameController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your name';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          keyboardType: TextInputType.emailAddress,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignInRequested(\r\n+          _emailController.text.trim(),\r\n+          _passwordController.text,\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n+      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Login'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+          } else if (state.isAuthenticated) {\r\n+            Navigator.of(context).pushReplacementNamed(\r\n+              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n+            );\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Welcome Back',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+)\r\n+                                .hasMatch(value!)) {\r\n+                              return 'Please enter a valid email address';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Password',\r\n+                          icon: Icons.lock,\r\n+                          controller: _passwordController,\r\n+                          isPassword: true,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your password';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        SizedBox(\r\n+                          width: double.infinity,\r\n+                          child: ElevatedButton(\r\n+                            onPressed: state.isLoading ? null : _submit,\r\n+                            style: ElevatedButton.styleFrom(\r\n+                              backgroundColor: Colors.blueAccent,\r\n+                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                              shape: RoundedRectangleBorder(\r\n+                                borderRadius: BorderRadius.circular(12),\r\n+                              ),\r\n+                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n+                            ),\r\n+                            child: state.isLoading\r\n+                                ? const SizedBox(\r\n+                                    height: 20,\r\n+                                    width: 20,\r\n+                                    child: CircularProgressIndicator(\r\n+                                      strokeWidth: 2,\r\n+                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                                    ),\r\n+                                  )\r\n+                                : const Text(\r\n+                                    'Register',\r\n+                                    style: TextStyle(fontSize: 16),\r\n+                                  ),\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734431643240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+// lib/features/auth/screens/registration_screen.dart\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class RegistrationScreen extends StatefulWidget {\r\n+  const RegistrationScreen({Key? key}) : super(key: key);\r\n+\r\n+  @override\r\n+  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n+}\r\n+\r\n+class _RegistrationScreenState extends State<RegistrationScreen> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  final _nameController = TextEditingController();\r\n+  final _emailController = TextEditingController();\r\n+  final _passwordController = TextEditingController();\r\n+  final _machineSerialController = TextEditingController();\r\n+  bool _obscurePassword = true;\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _emailController.dispose();\r\n+    _passwordController.dispose();\r\n+    _machineSerialController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignUpRequested(\r\n+          email: _emailController.text.trim(),\r\n+          password: _passwordController.text,\r\n+          name: _nameController.text.trim(),\r\n+          machineSerial: _machineSerialController.text.trim(),\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+    TextInputType? keyboardType,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Register'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+            if (state.errorMessage!.contains('Registration successful')) {\r\n+              Future.delayed(const Duration(seconds: 2), () {\r\n+                Navigator.pop(context);\r\n+              });\r\n+            }\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Create Account',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Name',\r\n+                          icon: Icons.person,\r\n+                          controller: _nameController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your name';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          keyboardType: TextInputType.emailAddress,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignInRequested(\r\n+          _emailController.text.trim(),\r\n+          _passwordController.text,\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n+      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Login'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+          } else if (state.isAuthenticated) {\r\n+            Navigator.of(context).pushReplacementNamed(\r\n+              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n+            );\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Welcome Back',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$')\r\n+                                .hasMatch(value!)) {\r\n+                              return 'Please enter a valid email address';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Password',\r\n+                          icon: Icons.lock,\r\n+                          controller: _passwordController,\r\n+                          isPassword: true,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your password';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        SizedBox(\r\n+                          width: double.infinity,\r\n+                          child: ElevatedButton(\r\n+                            onPressed: state.isLoading ? null : _submit,\r\n+                            style: ElevatedButton.styleFrom(\r\n+                              backgroundColor: Colors.blueAccent,\r\n+                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                              shape: RoundedRectangleBorder(\r\n+                                borderRadius: BorderRadius.circular(12),\r\n+                              ),\r\n+                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n+                            ),\r\n+                            child: state.isLoading\r\n+                                ? const SizedBox(\r\n+                                    height: 20,\r\n+                                    width: 20,\r\n+                                    child: CircularProgressIndicator(\r\n+                                      strokeWidth: 2,\r\n+                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                                    ),\r\n+                                  )\r\n+                                : const Text(\r\n+                                    'Register',\r\n+                                    style: TextStyle(fontSize: 16),\r\n+                                  ),\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734431769816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../bloc/auth_bloc.dart';\r\n+import '../bloc/auth_state.dart';\r\n+import '../bloc/auth_event.dart';\r\n+\r\n+class RegistrationScreen extends StatefulWidget {\r\n+  const RegistrationScreen({Key? key}) : super(key: key);\r\n+\r\n+  @override\r\n+  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n+}\r\n+\r\n+class _RegistrationScreenState extends State<RegistrationScreen> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  final _nameController = TextEditingController();\r\n+  final _emailController = TextEditingController();\r\n+  final _passwordController = TextEditingController();\r\n+  final _machineSerialController = TextEditingController();\r\n+  bool _obscurePassword = true;\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _emailController.dispose();\r\n+    _passwordController.dispose();\r\n+    _machineSerialController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _submit() {\r\n+    if (_formKey.currentState?.validate() ?? false) {\r\n+      context.read<AuthBloc>().add(\r\n+        SignUpRequested(\r\n+          email: _emailController.text.trim(),\r\n+          password: _passwordController.text,\r\n+          name: _nameController.text.trim(),\r\n+          machineSerial: _machineSerialController.text.trim(),\r\n+        ),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required String label,\r\n+    required IconData icon,\r\n+    required TextEditingController controller,\r\n+    bool isPassword = false,\r\n+    String? Function(String?)? validator,\r\n+    TextInputType? keyboardType,\r\n+  }) {\r\n+    return TextFormField(\r\n+      controller: controller,\r\n+      style: const TextStyle(color: Colors.white),\r\n+      obscureText: isPassword && _obscurePassword,\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: const TextStyle(color: Colors.white70),\r\n+        prefixIcon: Icon(icon, color: Colors.white70),\r\n+        enabledBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white38),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderSide: const BorderSide(color: Colors.white70),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        errorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade300),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        focusedErrorBorder: OutlineInputBorder(\r\n+          borderSide: BorderSide(color: Colors.red.shade400),\r\n+          borderRadius: BorderRadius.circular(12),\r\n+        ),\r\n+        suffixIcon: isPassword\r\n+            ? IconButton(\r\n+                icon: Icon(\r\n+                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n+                  color: Colors.white70,\r\n+                ),\r\n+                onPressed: () {\r\n+                  setState(() {\r\n+                    _obscurePassword = !_obscurePassword;\r\n+                  });\r\n+                },\r\n+              )\r\n+            : null,\r\n+      ),\r\n+      validator: validator,\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      backgroundColor: Colors.black87,\r\n+      appBar: AppBar(\r\n+        title: const Text('Register'),\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+      ),\r\n+      body: BlocConsumer<AuthBloc, AuthState>(\r\n+        listener: (context, state) {\r\n+          if (state.hasError) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(\r\n+                content: Row(\r\n+                  children: [\r\n+                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    const SizedBox(width: 8),\r\n+                    Expanded(child: Text(state.errorMessage!)),\r\n+                  ],\r\n+                ),\r\n+                backgroundColor: Colors.red.shade700,\r\n+                behavior: SnackBarBehavior.floating,\r\n+                action: SnackBarAction(\r\n+                  label: 'Dismiss',\r\n+                  onPressed: () {},\r\n+                  textColor: Colors.white,\r\n+                ),\r\n+              ),\r\n+            );\r\n+          } else if (state.isRegistrationSuccessful) {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              const SnackBar(\r\n+                content: Text('Registration successful! Please login.'),\r\n+                backgroundColor: Colors.green,\r\n+              ),\r\n+            );\r\n+            Future.delayed(const Duration(seconds: 2), () {\r\n+              Navigator.pop(context);\r\n+            });\r\n+          }\r\n+        },\r\n+        builder: (context, state) {\r\n+          return Center(\r\n+            child: SingleChildScrollView(\r\n+              padding: const EdgeInsets.all(24.0),\r\n+              child: Card(\r\n+                color: Colors.grey[850],\r\n+                shape: RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(16),\r\n+                ),\r\n+                elevation: 10,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(24.0),\r\n+                  child: Form(\r\n+                    key: _formKey,\r\n+                    child: Column(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(\r\n+                          'Create Account',\r\n+                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n+                            color: Colors.white,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        _buildTextField(\r\n+                          label: 'Name',\r\n+                          icon: Icons.person,\r\n+                          controller: _nameController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your name';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Email',\r\n+                          icon: Icons.email,\r\n+                          controller: _emailController,\r\n+                          keyboardType: TextInputType.emailAddress,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your email';\r\n+                            }\r\n+                            if (!RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+').hasMatch(value!)) {\r\n+                              return 'Please enter a valid email address';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Password',\r\n+                          icon: Icons.lock,\r\n+                          controller: _passwordController,\r\n+                          isPassword: true,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter your password';\r\n+                            }\r\n+                            if (value!.length < 6) {\r\n+                              return 'Password must be at least 6 characters';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 16),\r\n+                        _buildTextField(\r\n+                          label: 'Machine Serial Number',\r\n+                          icon: Icons.qr_code,\r\n+                          controller: _machineSerialController,\r\n+                          validator: (value) {\r\n+                            if (value?.isEmpty ?? true) {\r\n+                              return 'Please enter machine serial number';\r\n+                            }\r\n+                            return null;\r\n+                          },\r\n+                        ),\r\n+                        const SizedBox(height: 24),\r\n+                        SizedBox(\r\n+                          width: double.infinity,\r\n+                          child: ElevatedButton(\r\n+                            onPressed: state.isLoading ? null : _submit,\r\n+                            style: ElevatedButton.styleFrom(\r\n+                              backgroundColor: Colors.blueAccent,\r\n+                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n+                              shape: RoundedRectangleBorder(\r\n+                                borderRadius: BorderRadius.circular(12),\r\n+                              ),\r\n+                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n+                            ),\r\n+                            child: state.isLoading\r\n+                                ? const SizedBox(\r\n+                                    height: 20,\r\n+                                    width: 20,\r\n+                                    child: CircularProgressIndicator(\r\n+                                      strokeWidth: 2,\r\n+                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n+                                    ),\r\n+                                  )\r\n+                                : const Text(\r\n+                                    'Register',\r\n+                                    style: TextStyle(fontSize: 16),\r\n+                                  ),\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734431904642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,1329 +253,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-// lib/features/auth/screens/registration_screen.dart\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class RegistrationScreen extends StatefulWidget {\r\n-  const RegistrationScreen({Key? key}) : super(key: key);\r\n-\r\n-  @override\r\n-  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n-}\r\n-\r\n-class _RegistrationScreenState extends State<RegistrationScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _nameController = TextEditingController();\r\n-  final _emailController = TextEditingController();\r\n-  final _passwordController = TextEditingController();\r\n-  final _machineSerialController = TextEditingController();\r\n-  bool _obscurePassword = true;\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _emailController.dispose();\r\n-    _passwordController.dispose();\r\n-    _machineSerialController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignUpRequested(\r\n-          email: _emailController.text.trim(),\r\n-          password: _passwordController.text,\r\n-          name: _nameController.text.trim(),\r\n-          machineSerial: _machineSerialController.text.trim(),\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-    TextInputType? keyboardType,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Register'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-            if (state.errorMessage!.contains('Registration successful')) {\r\n-              Future.delayed(const Duration(seconds: 2), () {\r\n-                Navigator.pop(context);\r\n-              });\r\n-            }\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Create Account',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Name',\r\n-                          icon: Icons.person,\r\n-                          controller: _nameController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your name';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          keyboardType: TextInputType.emailAddress,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignInRequested(\r\n-          _emailController.text.trim(),\r\n-          _passwordController.text,\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n-      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Login'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-          } else if (state.isAuthenticated) {\r\n-            Navigator.of(context).pushReplacementNamed(\r\n-              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n-            );\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Welcome Back',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$')\r\n-                                .hasMatch(value!)) {\r\n-                              return 'Please enter a valid email address';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Password',\r\n-                          icon: Icons.lock,\r\n-                          controller: _passwordController,\r\n-                          isPassword: true,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your password';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        SizedBox(\r\n-                          width: double.infinity,\r\n-                          child: ElevatedButton(\r\n-                            onPressed: state.isLoading ? null : _submit,\r\n-                            style: ElevatedButton.styleFrom(\r\n-                              backgroundColor: Colors.blueAccent,\r\n-                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                              shape: RoundedRectangleBorder(\r\n-                                borderRadius: BorderRadius.circular(12),\r\n-                              ),\r\n-                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n-                            ),\r\n-                            child: state.isLoading\r\n-                                ? const SizedBox(\r\n-                                    height: 20,\r\n-                                    width: 20,\r\n-                                    child: CircularProgressIndicator(\r\n-                                      strokeWidth: 2,\r\n-                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n-                                    ),\r\n-                                  )\r\n-                                : const Text(\r\n-                                    'Register',\r\n-                                    style: TextStyle(fontSize: 16),\r\n-                                  ),\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-// lib/features/auth/screens/registration_screen.dart\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class RegistrationScreen extends StatefulWidget {\r\n-  const RegistrationScreen({Key? key}) : super(key: key);\r\n-\r\n-  @override\r\n-  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n-}\r\n-\r\n-class _RegistrationScreenState extends State<RegistrationScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _nameController = TextEditingController();\r\n-  final _emailController = TextEditingController();\r\n-  final _passwordController = TextEditingController();\r\n-  final _machineSerialController = TextEditingController();\r\n-  bool _obscurePassword = true;\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _emailController.dispose();\r\n-    _passwordController.dispose();\r\n-    _machineSerialController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignUpRequested(\r\n-          email: _emailController.text.trim(),\r\n-          password: _passwordController.text,\r\n-          name: _nameController.text.trim(),\r\n-          machineSerial: _machineSerialController.text.trim(),\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-    TextInputType? keyboardType,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Register'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-            if (state.errorMessage!.contains('Registration successful')) {\r\n-              Future.delayed(const Duration(seconds: 2), () {\r\n-                Navigator.pop(context);\r\n-              });\r\n-            }\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Create Account',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Name',\r\n-                          icon: Icons.person,\r\n-                          controller: _nameController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your name';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          keyboardType: TextInputType.emailAddress,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignInRequested(\r\n-          _emailController.text.trim(),\r\n-          _passwordController.text,\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n-      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Login'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-          } else if (state.isAuthenticated) {\r\n-            Navigator.of(context).pushReplacementNamed(\r\n-              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n-            );\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Welcome Back',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+)\r\n-                                .hasMatch(value!)) {\r\n-                              return 'Please enter a valid email address';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Password',\r\n-                          icon: Icons.lock,\r\n-                          controller: _passwordController,\r\n-                          isPassword: true,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your password';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        SizedBox(\r\n-                          width: double.infinity,\r\n-                          child: ElevatedButton(\r\n-                            onPressed: state.isLoading ? null : _submit,\r\n-                            style: ElevatedButton.styleFrom(\r\n-                              backgroundColor: Colors.blueAccent,\r\n-                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                              shape: RoundedRectangleBorder(\r\n-                                borderRadius: BorderRadius.circular(12),\r\n-                              ),\r\n-                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n-                            ),\r\n-                            child: state.isLoading\r\n-                                ? const SizedBox(\r\n-                                    height: 20,\r\n-                                    width: 20,\r\n-                                    child: CircularProgressIndicator(\r\n-                                      strokeWidth: 2,\r\n-                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n-                                    ),\r\n-                                  )\r\n-                                : const Text(\r\n-                                    'Register',\r\n-                                    style: TextStyle(fontSize: 16),\r\n-                                  ),\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-// lib/features/auth/screens/registration_screen.dart\r\n-class RegistrationScreen extends StatefulWidget {\r\n-  const RegistrationScreen({Key? key}) : super(key: key);\r\n-\r\n-  @override\r\n-  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n-}\r\n-\r\n-class _RegistrationScreenState extends State<RegistrationScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _nameController = TextEditingController();\r\n-  final _emailController = TextEditingController();\r\n-  final _passwordController = TextEditingController();\r\n-  final _machineSerialController = TextEditingController();\r\n-  bool _obscurePassword = true;\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _emailController.dispose();\r\n-    _passwordController.dispose();\r\n-    _machineSerialController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignUpRequested(\r\n-          email: _emailController.text.trim(),\r\n-          password: _passwordController.text,\r\n-          name: _nameController.text.trim(),\r\n-          machineSerial: _machineSerialController.text.trim(),\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-    TextInputType? keyboardType,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Register'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-            if (state.errorMessage!.contains('Registration successful')) {\r\n-              Future.delayed(const Duration(seconds: 2), () {\r\n-                Navigator.pop(context);\r\n-              });\r\n-            }\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Create Account',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Name',\r\n-                          icon: Icons.person,\r\n-                          controller: _nameController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your name';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          keyboardType: TextInputType.emailAddress,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+\r\n-  void _submit() {\r\n-    if (_formKey.currentState?.validate() ?? false) {\r\n-      context.read<AuthBloc>().add(\r\n-        SignInRequested(\r\n-          _emailController.text.trim(),\r\n-          _passwordController.text,\r\n-        ),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    required TextEditingController controller,\r\n-    bool isPassword = false,\r\n-    String? Function(String?)? validator,\r\n-  }) {\r\n-    return TextFormField(\r\n-      controller: controller,\r\n-      style: const TextStyle(color: Colors.white),\r\n-      obscureText: isPassword && _obscurePassword,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: const TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: const BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        errorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade300),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedErrorBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.red.shade400),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-                icon: Icon(\r\n-                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-                  color: Colors.white70,\r\n-                ),\r\n-                onPressed: () {\r\n-                  setState(() {\r\n-                    _obscurePassword = !_obscurePassword;\r\n-                  });\r\n-                },\r\n-              )\r\n-            : null,\r\n-      ),\r\n-      validator: validator,\r\n-      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n-      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(\r\n-        title: const Text('Login'),\r\n-        backgroundColor: Colors.transparent,\r\n-        elevation: 0,\r\n-      ),\r\n-      body: BlocConsumer<AuthBloc, AuthState>(\r\n-        listener: (context, state) {\r\n-          if (state.hasError) {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(\r\n-                content: Row(\r\n-                  children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n-                    const SizedBox(width: 8),\r\n-                    Expanded(child: Text(state.errorMessage!)),\r\n-                  ],\r\n-                ),\r\n-                backgroundColor: Colors.red.shade700,\r\n-                behavior: SnackBarBehavior.floating,\r\n-                action: SnackBarAction(\r\n-                  label: 'Dismiss',\r\n-                  onPressed: () {},\r\n-                  textColor: Colors.white,\r\n-                ),\r\n-              ),\r\n-            );\r\n-          } else if (state.isAuthenticated) {\r\n-            Navigator.of(context).pushReplacementNamed(\r\n-              state.user?.role == UserRole.admin ? '/admin' : '/home',\r\n-            );\r\n-          }\r\n-        },\r\n-        builder: (context, state) {\r\n-          return Center(\r\n-            child: SingleChildScrollView(\r\n-              padding: const EdgeInsets.all(24.0),\r\n-              child: Card(\r\n-                color: Colors.grey[850],\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(16),\r\n-                ),\r\n-                elevation: 10,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(24.0),\r\n-                  child: Form(\r\n-                    key: _formKey,\r\n-                    child: Column(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(\r\n-                          'Welcome Back',\r\n-                          style: Theme.of(context).textTheme.headlineSmall?.copyWith(\r\n-                            color: Colors.white,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        _buildTextField(\r\n-                          label: 'Email',\r\n-                          icon: Icons.email,\r\n-                          controller: _emailController,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your email';\r\n-                            }\r\n-                            if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+)\r\n-                                .hasMatch(value!)) {\r\n-                              return 'Please enter a valid email address';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 16),\r\n-                        _buildTextField(\r\n-                          label: 'Password',\r\n-                          icon: Icons.lock,\r\n-                          controller: _passwordController,\r\n-                          isPassword: true,\r\n-                          validator: (value) {\r\n-                            if (value?.isEmpty ?? true) {\r\n-                              return 'Please enter your password';\r\n-                            }\r\n-                            return null;\r\n-                          },\r\n-                        ),\r\n-                        const SizedBox(height: 24),\r\n-                        SizedBox(\r\n-                          width: double.infinity,\r\n-                          child: ElevatedButton(\r\n-                            onPressed: state.isLoading ? null : _submit,\r\n-                            style: ElevatedButton.styleFrom(\r\n-                              backgroundColor: Colors.blueAccent,\r\n-                              padding: const EdgeInsets.symmetric(vertical: 16),\r\n-                              shape: RoundedRectangleBorder(\r\n-                                borderRadius: BorderRadius.circular(12),\r\n-                              ),\r\n-                              disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n-                            ),\r\n-                            child: state.isLoading\r\n-                                ? const SizedBox(\r\n-                                    height: 20,\r\n-                                    width: 20,\r\n-                                    child: CircularProgressIndicator(\r\n-                                      strokeWidth: 2,\r\n-                                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n-                                    ),\r\n-                                  )\r\n-                                : const Text(\r\n-                                    'Register',\r\n-                                    style: TextStyle(fontSize: 16),\r\n-                                  ),\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-\r\n-import 'package:flutter/material.dart';\r\n-import 'package:provider/provider.dart';\r\n-import '../providers/auth_provider.dart';\r\n-\r\n-class RegistrationScreen extends StatefulWidget {\r\n-  @override\r\n-  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n-}\r\n-\r\n-class _RegistrationScreenState extends State<RegistrationScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  String _email = '';\r\n-  String _password = '';\r\n-  String _name = '';\r\n-  String _machineSerial = '';\r\n-  bool _isLoading = false;\r\n-  bool _obscurePassword = true;\r\n-\r\n-  void _submit() async {\r\n-    if (_formKey.currentState!.validate()) {\r\n-      _formKey.currentState!.save();\r\n-      setState(() {\r\n-        _isLoading = true;\r\n-      });\r\n-\r\n-      final authProvider = Provider.of<AuthProvider>(context, listen: false);\r\n-      try{\r\n-        await authProvider.signUp(\r\n-          email: _email,\r\n-          password: _password,\r\n-          name: _name,\r\n-          machineSerial: _machineSerial,\r\n-        );\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text('Registration successful. Please wait for admin approval.'),\r\n-          ),\r\n-        );\r\n-        Navigator.pop(context);\r\n-      } catch (error){\r\n-      //   throw the error in the argument of the SnackBar\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text(error.toString()),\r\n-          ),\r\n-        );\r\n-\r\n-      }\r\n-\r\n-\r\n-\r\n-      setState(() {\r\n-        _isLoading = false;\r\n-      });\r\n-\r\n-      /*if (success) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text('Registration successful. Please wait for admin approval.'),\r\n-          ),\r\n-        );\r\n-        Navigator.pop(context);\r\n-      } else {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text('Registration failed. Please check your machine serial number and try again.'),\r\n-          ),\r\n-        );\r\n-      }*/\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildTextFormField({\r\n-    required String label,\r\n-    required IconData icon,\r\n-    bool isPassword = false,\r\n-    TextInputType keyboardType = TextInputType.text,\r\n-    required String? Function(String?) validator,\r\n-    required void Function(String?) onSaved,\r\n-  }) {\r\n-    return TextFormField(\r\n-      style: TextStyle(color: Colors.white),\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: TextStyle(color: Colors.white70),\r\n-        prefixIcon: Icon(icon, color: Colors.white70),\r\n-        enabledBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.white38),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderSide: BorderSide(color: Colors.white70),\r\n-          borderRadius: BorderRadius.circular(12),\r\n-        ),\r\n-        suffixIcon: isPassword\r\n-            ? IconButton(\r\n-          icon: Icon(\r\n-            _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n-            color: Colors.white70,\r\n-          ),\r\n-          onPressed: () {\r\n-            setState(() {\r\n-              _obscurePassword = !_obscurePassword;\r\n-            });\r\n-          },\r\n-        )\r\n-            : null,\r\n-      ),\r\n-      obscureText: isPassword ? _obscurePassword : false,\r\n-      keyboardType: keyboardType,\r\n-      validator: validator,\r\n-      onSaved: onSaved,\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final theme = Theme.of(context);\r\n-    return Scaffold(\r\n-      backgroundColor: Colors.black87,\r\n-      appBar: AppBar(title: Text('Register')),\r\n-      body: Center(\r\n-        child: SingleChildScrollView(\r\n-          padding: EdgeInsets.symmetric(horizontal: 24.0),\r\n-          child: Card(\r\n-            color: Colors.grey[850],\r\n-            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\r\n-            elevation: 10,\r\n-            child: Padding(\r\n-              padding: EdgeInsets.all(24.0),\r\n-              child: Form(\r\n-                key: _formKey,\r\n-                child: Column(\r\n-                  mainAxisSize: MainAxisSize.min,\r\n-                  children: [\r\n-                    Text(\r\n-                      'Create Account',\r\n-                      style: theme.textTheme.headlineSmall?.copyWith(color: Colors.white),\r\n-                    ),\r\n-                    SizedBox(height: 24),\r\n-                    _buildTextFormField(\r\n-                      label: 'Name',\r\n-                      icon: Icons.person,\r\n-                      validator: (value) {\r\n-                        if (value == null || value.isEmpty) {\r\n-                          return 'Please enter your name';\r\n-                        }\r\n-                        return null;\r\n-                      },\r\n-                      onSaved: (value) => _name = value!,\r\n-                    ),\r\n-                    SizedBox(height: 16),\r\n-                    _buildTextFormField(\r\n-                      label: 'Email',\r\n-                      icon: Icons.email,\r\n-                      keyboardType: TextInputType.emailAddress,\r\n-                      validator: (value) {\r\n-                        if (value == null || value.isEmpty) {\r\n-                          return 'Please enter your email';\r\n-                        }\r\n-                        if (!RegExp(r'\\S+@\\S+\\.\\S+').hasMatch(value)) {\r\n-                          return 'Please enter a valid email address';\r\n-                        }\r\n-                        return null;\r\n-                      },\r\n-                      onSaved: (value) => _email = value!,\r\n-                    ),\r\n-                    SizedBox(height: 16),\r\n-                    _buildTextFormField(\r\n-                      label: 'Password',\r\n-                      icon: Icons.lock,\r\n-                      isPassword: true,\r\n-                      validator: (value) {\r\n-                        if (value == null || value.isEmpty) {\r\n-                          return 'Please enter your password';\r\n-                        }\r\n-                        if (value.length < 6) {\r\n-                          return 'Password must be at least 6 characters long';\r\n-                        }\r\n-                        return null;\r\n-                      },\r\n-                      onSaved: (value) => _password = value!,\r\n-                    ),\r\n-                    SizedBox(height: 16),\r\n-                    _buildTextFormField(\r\n-                      label: 'Machine Serial Number',\r\n-                      icon: Icons.confirmation_number,\r\n-                      validator: (value) {\r\n-                        if (value == null || value.isEmpty) {\r\n-                          return 'Please enter the machine serial number';\r\n-                        }\r\n-                        return null;\r\n-                      },\r\n-                      onSaved: (value) => _machineSerial = value!,\r\n-                    ),\r\n-                    SizedBox(height: 24),\r\n-                    SizedBox(\r\n-                      width: double.infinity,\r\n-                      child: ElevatedButton(\r\n-                        onPressed: _isLoading ? null : _submit,\r\n-                        style: ElevatedButton.styleFrom(\r\n-                          backgroundColor: Colors.blueAccent,\r\n-                          padding: EdgeInsets.symmetric(vertical: 16),\r\n-                          shape: RoundedRectangleBorder(\r\n-                            borderRadius: BorderRadius.circular(12),\r\n-                          ),\r\n-                        ),\r\n-                        child: _isLoading\r\n-                            ? CircularProgressIndicator(color: Colors.white)\r\n-                            : Text(\r\n-                          'Register',\r\n-                          style: TextStyle(fontSize: 16),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1734461181774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,18 +103,31 @@\n       ),\r\n       body: BlocConsumer<AuthBloc, AuthState>(\r\n         listener: (context, state) {\r\n           if (state.hasError) {\r\n+            final Color errorColor = state.isAuthError\r\n+                ? Colors.red.shade700\r\n+                : state.isAccessDenied\r\n+                    ? Colors.orange.shade700\r\n+                    : Colors.red.shade900;\r\n+\r\n             ScaffoldMessenger.of(context).showSnackBar(\r\n               SnackBar(\r\n                 content: Row(\r\n                   children: [\r\n-                    const Icon(Icons.error_outline, color: Colors.white),\r\n+                    Icon(\r\n+                      state.isAuthError\r\n+                          ? Icons.security\r\n+                          : state.isAccessDenied\r\n+                              ? Icons.no_accounts\r\n+                              : Icons.error_outline,\r\n+                      color: Colors.white\r\n+                    ),\r\n                     const SizedBox(width: 8),\r\n                     Expanded(child: Text(state.errorMessage!)),\r\n                   ],\r\n                 ),\r\n-                backgroundColor: Colors.red.shade700,\r\n+                backgroundColor: errorColor,\r\n                 behavior: SnackBarBehavior.floating,\r\n                 action: SnackBarAction(\r\n                   label: 'Dismiss',\r\n                   onPressed: () {},\r\n@@ -124,9 +137,9 @@\n             );\r\n           } else if (state.isRegistrationSuccessful) {\r\n             ScaffoldMessenger.of(context).showSnackBar(\r\n               const SnackBar(\r\n-                content: Text('Registration successful! Please login.'),\r\n+                content: Text('Registration successful! Please wait for admin approval.'),\r\n                 backgroundColor: Colors.green,\r\n               ),\r\n             );\r\n             Future.delayed(const Duration(seconds: 2), () {\r\n"
                }
            ],
            "date": 1734376760282,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../providers/auth_provider.dart';\r\n\r\nclass RegistrationScreen extends StatefulWidget {\r\n  @override\r\n  _RegistrationScreenState createState() => _RegistrationScreenState();\r\n}\r\n\r\nclass _RegistrationScreenState extends State<RegistrationScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  String _email = '';\r\n  String _password = '';\r\n  String _name = '';\r\n  String _machineSerial = '';\r\n  bool _isLoading = false;\r\n  bool _obscurePassword = true;\r\n\r\n  void _submit() async {\r\n    if (_formKey.currentState!.validate()) {\r\n      _formKey.currentState!.save();\r\n      setState(() {\r\n        _isLoading = true;\r\n      });\r\n\r\n      final authProvider = Provider.of<AuthProvider>(context, listen: false);\r\n      try{\r\n        await authProvider.signUp(\r\n          email: _email,\r\n          password: _password,\r\n          name: _name,\r\n          machineSerial: _machineSerial,\r\n        );\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Registration successful. Please wait for admin approval.'),\r\n          ),\r\n        );\r\n        Navigator.pop(context);\r\n      } catch (error){\r\n      //   throw the error in the argument of the SnackBar\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text(error.toString()),\r\n          ),\r\n        );\r\n\r\n      }\r\n\r\n\r\n\r\n      setState(() {\r\n        _isLoading = false;\r\n      });\r\n\r\n      /*if (success) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Registration successful. Please wait for admin approval.'),\r\n          ),\r\n        );\r\n        Navigator.pop(context);\r\n      } else {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(\r\n            content: Text('Registration failed. Please check your machine serial number and try again.'),\r\n          ),\r\n        );\r\n      }*/\r\n    }\r\n  }\r\n\r\n  Widget _buildTextFormField({\r\n    required String label,\r\n    required IconData icon,\r\n    bool isPassword = false,\r\n    TextInputType keyboardType = TextInputType.text,\r\n    required String? Function(String?) validator,\r\n    required void Function(String?) onSaved,\r\n  }) {\r\n    return TextFormField(\r\n      style: TextStyle(color: Colors.white),\r\n      decoration: InputDecoration(\r\n        labelText: label,\r\n        labelStyle: TextStyle(color: Colors.white70),\r\n        prefixIcon: Icon(icon, color: Colors.white70),\r\n        enabledBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.white38),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        focusedBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.white70),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        suffixIcon: isPassword\r\n            ? IconButton(\r\n          icon: Icon(\r\n            _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n            color: Colors.white70,\r\n          ),\r\n          onPressed: () {\r\n            setState(() {\r\n              _obscurePassword = !_obscurePassword;\r\n            });\r\n          },\r\n        )\r\n            : null,\r\n      ),\r\n      obscureText: isPassword ? _obscurePassword : false,\r\n      keyboardType: keyboardType,\r\n      validator: validator,\r\n      onSaved: onSaved,\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final theme = Theme.of(context);\r\n    return Scaffold(\r\n      backgroundColor: Colors.black87,\r\n      appBar: AppBar(title: Text('Register')),\r\n      body: Center(\r\n        child: SingleChildScrollView(\r\n          padding: EdgeInsets.symmetric(horizontal: 24.0),\r\n          child: Card(\r\n            color: Colors.grey[850],\r\n            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\r\n            elevation: 10,\r\n            child: Padding(\r\n              padding: EdgeInsets.all(24.0),\r\n              child: Form(\r\n                key: _formKey,\r\n                child: Column(\r\n                  mainAxisSize: MainAxisSize.min,\r\n                  children: [\r\n                    Text(\r\n                      'Create Account',\r\n                      style: theme.textTheme.headlineSmall?.copyWith(color: Colors.white),\r\n                    ),\r\n                    SizedBox(height: 24),\r\n                    _buildTextFormField(\r\n                      label: 'Name',\r\n                      icon: Icons.person,\r\n                      validator: (value) {\r\n                        if (value == null || value.isEmpty) {\r\n                          return 'Please enter your name';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _name = value!,\r\n                    ),\r\n                    SizedBox(height: 16),\r\n                    _buildTextFormField(\r\n                      label: 'Email',\r\n                      icon: Icons.email,\r\n                      keyboardType: TextInputType.emailAddress,\r\n                      validator: (value) {\r\n                        if (value == null || value.isEmpty) {\r\n                          return 'Please enter your email';\r\n                        }\r\n                        if (!RegExp(r'\\S+@\\S+\\.\\S+').hasMatch(value)) {\r\n                          return 'Please enter a valid email address';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _email = value!,\r\n                    ),\r\n                    SizedBox(height: 16),\r\n                    _buildTextFormField(\r\n                      label: 'Password',\r\n                      icon: Icons.lock,\r\n                      isPassword: true,\r\n                      validator: (value) {\r\n                        if (value == null || value.isEmpty) {\r\n                          return 'Please enter your password';\r\n                        }\r\n                        if (value.length < 6) {\r\n                          return 'Password must be at least 6 characters long';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _password = value!,\r\n                    ),\r\n                    SizedBox(height: 16),\r\n                    _buildTextFormField(\r\n                      label: 'Machine Serial Number',\r\n                      icon: Icons.confirmation_number,\r\n                      validator: (value) {\r\n                        if (value == null || value.isEmpty) {\r\n                          return 'Please enter the machine serial number';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _machineSerial = value!,\r\n                    ),\r\n                    SizedBox(height: 24),\r\n                    SizedBox(\r\n                      width: double.infinity,\r\n                      child: ElevatedButton(\r\n                        onPressed: _isLoading ? null : _submit,\r\n                        style: ElevatedButton.styleFrom(\r\n                          backgroundColor: Colors.blueAccent,\r\n                          padding: EdgeInsets.symmetric(vertical: 16),\r\n                          shape: RoundedRectangleBorder(\r\n                            borderRadius: BorderRadius.circular(12),\r\n                          ),\r\n                        ),\r\n                        child: _isLoading\r\n                            ? CircularProgressIndicator(color: Colors.white)\r\n                            : Text(\r\n                          'Register',\r\n                          style: TextStyle(fontSize: 16),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n\r\n}\r\n"
        }
    ]
}