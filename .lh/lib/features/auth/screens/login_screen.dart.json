{
    "sourceFile": "lib/features/auth/screens/login_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760282,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart' hide AuthProvider;\r\nimport '../../../core/enums/user_role.dart';\r\nimport '../providers/auth_provider.dart';\r\nimport 'registration_screen.dart';\r\n\r\nclass LoginScreen extends StatefulWidget {\r\n  @override\r\n  _LoginScreenState createState() => _LoginScreenState();\r\n}\r\n\r\nclass _LoginScreenState extends State<LoginScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  String _email = '';\r\n  String _password = '';\r\n  bool _isLoading = false;\r\n  bool _obscurePassword = true;\r\n\r\n  String _getErrorMessage(dynamic error) {\r\n    if (error is FirebaseAuthException) {\r\n      switch (error.code) {\r\n        case 'invalid-credential':\r\n          return 'Invalid email or password.';\r\n        case 'user-disabled':\r\n          return 'This account has been disabled.';\r\n        case 'user-not-found':\r\n          return 'No account found with this email.';\r\n        case 'wrong-password':\r\n          return 'Incorrect password.';\r\n        case 'too-many-requests':\r\n          return 'Too many failed attempts. Please try again later.';\r\n        case 'account-pending':\r\n          return 'Your account is pending approval.';\r\n        default:\r\n          return error.message ?? 'An authentication error occurred.';\r\n      }\r\n    }\r\n    return 'An unexpected error occurred. Please try again.';\r\n  }\r\n\r\n  Future<void> _submit() async {\r\n    if (!_formKey.currentState!.validate()) return;\r\n\r\n    _formKey.currentState!.save();\r\n    setState(() => _isLoading = true);\r\n\r\n    try {\r\n      final authProvider = Provider.of<AuthProvider>(context, listen: false);\r\n      final success = await authProvider.signIn(\r\n        email: _email.trim(),\r\n        password: _password,\r\n      );\r\n\r\n      if (!mounted) return;\r\n\r\n      if (success) {\r\n        if (authProvider.userRole == UserRole.admin) {\r\n          Navigator.of(context).pushReplacementNamed('/admin_dashboard');\r\n        } else {\r\n          Navigator.of(context).pushReplacementNamed('/home');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (!mounted) return;\r\n\r\n      final errorMessage = _getErrorMessage(error);\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        SnackBar(\r\n          content: Row(\r\n            children: [\r\n              Icon(Icons.error_outline, color: Colors.white),\r\n              SizedBox(width: 8),\r\n              Expanded(child: Text(errorMessage)),\r\n            ],\r\n          ),\r\n          backgroundColor: Colors.red.shade700,\r\n          behavior: SnackBarBehavior.floating,\r\n          action: SnackBarAction(\r\n            label: 'Dismiss',\r\n            onPressed: () {},\r\n            textColor: Colors.white,\r\n          ),\r\n        ),\r\n      );\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() => _isLoading = false);\r\n      }\r\n    }\r\n  }\r\n\r\n  Widget _buildTextFormField({\r\n    required String label,\r\n    required IconData icon,\r\n    bool isPassword = false,\r\n    TextInputType keyboardType = TextInputType.text,\r\n    required String? Function(String?) validator,\r\n    required void Function(String?) onSaved,\r\n  }) {\r\n    return TextFormField(\r\n      style: TextStyle(color: Colors.white),\r\n      decoration: InputDecoration(\r\n        labelText: label,\r\n        labelStyle: TextStyle(color: Colors.white70),\r\n        prefixIcon: Icon(icon, color: Colors.white70),\r\n        enabledBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.white38),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        focusedBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.white70),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        errorBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.red.shade300),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        focusedErrorBorder: OutlineInputBorder(\r\n          borderSide: BorderSide(color: Colors.red.shade400),\r\n          borderRadius: BorderRadius.circular(12),\r\n        ),\r\n        suffixIcon: isPassword\r\n            ? IconButton(\r\n                icon: Icon(\r\n                  _obscurePassword ? Icons.visibility_off : Icons.visibility,\r\n                  color: Colors.white70,\r\n                ),\r\n                onPressed: () {\r\n                  setState(() => _obscurePassword = !_obscurePassword);\r\n                },\r\n              )\r\n            : null,\r\n      ),\r\n      obscureText: isPassword ? _obscurePassword : false,\r\n      keyboardType: keyboardType,\r\n      validator: validator,\r\n      onSaved: onSaved,\r\n      textInputAction: isPassword ? TextInputAction.done : TextInputAction.next,\r\n      onFieldSubmitted: isPassword ? (_) => _submit() : null,\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final theme = Theme.of(context);\r\n\r\n    return Scaffold(\r\n      backgroundColor: Colors.black87,\r\n      appBar: AppBar(title: Text('Login')),\r\n      body: Center(\r\n        child: SingleChildScrollView(\r\n          padding: EdgeInsets.symmetric(horizontal: 24.0),\r\n          child: Card(\r\n            color: Colors.grey[850],\r\n            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\r\n            elevation: 10,\r\n            child: Padding(\r\n              padding: EdgeInsets.all(24.0),\r\n              child: Form(\r\n                key: _formKey,\r\n                child: Column(\r\n                  mainAxisSize: MainAxisSize.min,\r\n                  children: [\r\n                    Text(\r\n                      'Welcome Back',\r\n                      style: theme.textTheme.headlineSmall?.copyWith(\r\n                        color: Colors.white,\r\n                        fontWeight: FontWeight.bold,\r\n                      ),\r\n                    ),\r\n                    SizedBox(height: 24),\r\n                    _buildTextFormField(\r\n                      label: 'Email',\r\n                      icon: Icons.email,\r\n                      keyboardType: TextInputType.emailAddress,\r\n                      validator: (value) {\r\n                        if (value?.isEmpty ?? true) {\r\n                          return 'Please enter your email';\r\n                        }\r\n                        if (!RegExp(r'^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$').hasMatch(value!)) {\r\n                          return 'Please enter a valid email address';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _email = value ?? '',\r\n                    ),\r\n                    SizedBox(height: 16),\r\n                    _buildTextFormField(\r\n                      label: 'Password',\r\n                      icon: Icons.lock,\r\n                      isPassword: true,\r\n                      validator: (value) {\r\n                        if (value?.isEmpty ?? true) {\r\n                          return 'Please enter your password';\r\n                        }\r\n                        return null;\r\n                      },\r\n                      onSaved: (value) => _password = value ?? '',\r\n                    ),\r\n                    SizedBox(height: 24),\r\n                    SizedBox(\r\n                      width: double.infinity,\r\n                      child: ElevatedButton(\r\n                        onPressed: _isLoading ? null : _submit,\r\n                        style: ElevatedButton.styleFrom(\r\n                          backgroundColor: Colors.blueAccent,\r\n                          padding: EdgeInsets.symmetric(vertical: 16),\r\n                          shape: RoundedRectangleBorder(\r\n                            borderRadius: BorderRadius.circular(12),\r\n                          ),\r\n                          disabledBackgroundColor: Colors.blueAccent.withOpacity(0.6),\r\n                        ),\r\n                        child: _isLoading\r\n                            ? SizedBox(\r\n                                height: 20,\r\n                                width: 20,\r\n                                child: CircularProgressIndicator(\r\n                                  strokeWidth: 2,\r\n                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),\r\n                                ),\r\n                              )\r\n                            : Text(\r\n                                'Login',\r\n                                style: TextStyle(fontSize: 16),\r\n                              ),\r\n                      ),\r\n                    ),\r\n                    SizedBox(height: 16),\r\n                    TextButton(\r\n                      onPressed: _isLoading\r\n                          ? null\r\n                          : () {\r\n                              Navigator.push(\r\n                                context,\r\n                                MaterialPageRoute(builder: (context) => RegistrationScreen()),\r\n                              );\r\n                            },\r\n                      style: TextButton.styleFrom(\r\n                        foregroundColor: Colors.white70,\r\n                      ),\r\n                      child: Text('Don\\'t have an account? Register'),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}