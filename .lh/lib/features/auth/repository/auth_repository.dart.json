{
    "sourceFile": "lib/features/auth/repository/auth_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1734431426336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734457749188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // lib/features/auth/repository/auth_repository.dart\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/core/enums/user_request_status.dart';\r\n import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\n import '../../../core/enums/user_role.dart';\r\n import '../models/user.dart';\r\n import '../models/user_request.dart';\r\n@@ -82,30 +83,68 @@\n       // Create user document\r\n       await _firestore.collection('users').doc(credential.user!.uid).set({\r\n         'email': email,\r\n         'name': name,\r\n-        'role': UserRole.user.toJson(),\r\n+        'role': UserRole.user.toString().split('.').last,\r\n         'status': 'pending',\r\n         'machineSerial': machineSerial,\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n         'updatedAt': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n-      // Create user request\r\n+      // Create user request with explicit pending status\r\n       await _firestore.collection('user_requests').doc(credential.user!.uid).set({\r\n         'userId': credential.user!.uid,\r\n         'email': email,\r\n         'name': name,\r\n         'machineSerial': machineSerial,\r\n-        'status': UserRequestStatus.pending.toJson(),\r\n+        'status': UserRequestStatus.pending.toString().split('.').last, // Explicit status\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n     } catch (e) {\r\n       throw _handleAuthError(e);\r\n     }\r\n   }\r\n \r\n+  Future<List<UserRequest>> getPendingRequests() async {\r\n+    try {\r\n+      final snapshot = await _firestore\r\n+          .collection('user_requests')\r\n+          .where('status', isEqualTo: UserRequestStatus.pending.toString().split('.').last)\r\n+          .get();\r\n+\r\n+      return snapshot.docs.map((doc) {\r\n+        final data = doc.data();\r\n+        data['id'] = doc.id;\r\n+        return UserRequest.fromJson(data);\r\n+      }).toList();\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch pending requests: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> approveUserRequest(String requestId) async {\r\n+    try {\r\n+      await _firestore.collection('user_requests').doc(requestId).update({\r\n+        'status': UserRequestStatus.approved.toString().split('.').last,\r\n+        'updatedAt': FieldValue.serverTimestamp(),\r\n+      });\r\n+\r\n+      // Also update the user's status\r\n+      final request = await _firestore.collection('user_requests').doc(requestId).get();\r\n+      final userId = request.data()?['userId'] as String?;\r\n+      if (userId != null) {\r\n+        await _firestore.collection('users').doc(userId).update({\r\n+          'status': 'active',\r\n+          'updatedAt': FieldValue.serverTimestamp(),\r\n+        });\r\n+      }\r\n+    } catch (e) {\r\n+      throw Exception('Failed to approve user request: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n   Future<void> signOut() async {\r\n     try {\r\n       await _auth.signOut();\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1734457873627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,64 @@\n       throw _handleAuthError(e);\r\n     }\r\n   }\r\n \r\n+  Future<List<User>> getAllUsers() async {\r\n+    try {\r\n+      final snapshot = await _firestore.collection('users').get();\r\n+      return snapshot.docs.map((doc) {\r\n+        final data = doc.data();\r\n+        data['id'] = doc.id;\r\n+        return User.fromJson(data);\r\n+      }).toList();\r\n+    } catch (e) {\r\n+      throw Exception('Failed to fetch users: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> denyUserRequest(String requestId) async {\r\n+    try {\r\n+      await _firestore.collection('user_requests').doc(requestId).update({\r\n+        'status': UserRequestStatus.denied.toString().split('.').last,\r\n+        'updatedAt': FieldValue.serverTimestamp(),\r\n+      });\r\n+\r\n+      // Also update the user's status\r\n+      final request = await _firestore.collection('user_requests').doc(requestId).get();\r\n+      final userId = request.data()?['userId'] as String?;\r\n+      if (userId != null) {\r\n+        await _firestore.collection('users').doc(userId).update({\r\n+          'status': 'denied',\r\n+          'updatedAt': FieldValue.serverTimestamp(),\r\n+        });\r\n+      }\r\n+    } catch (e) {\r\n+      throw Exception('Failed to deny user request: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> updateUserRole(String userId, UserRole newRole) async {\r\n+    try {\r\n+      await _firestore.collection('users').doc(userId).update({\r\n+        'role': newRole.toString().split('.').last,\r\n+        'updatedAt': FieldValue.serverTimestamp(),\r\n+      });\r\n+    } catch (e) {\r\n+      throw Exception('Failed to update user role: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> updateUserStatus(String userId, String status) async {\r\n+    try {\r\n+      await _firestore.collection('users').doc(userId).update({\r\n+        'status': status,\r\n+        'updatedAt': FieldValue.serverTimestamp(),\r\n+      });\r\n+    } catch (e) {\r\n+      throw Exception('Failed to update user status: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n   Exception _handleAuthError(dynamic error) {\r\n     if (error is firebase_auth.FirebaseAuthException) {\r\n       switch (error.code) {\r\n         case 'invalid-credential':\r\n"
                },
                {
                    "date": 1734460417176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,48 +19,60 @@\n   Future<User?> getCurrentUser() async {\r\n     final firebaseUser = _auth.currentUser;\r\n     if (firebaseUser == null) return null;\r\n \r\n-    final doc = await _firestore.collection('users').doc(firebaseUser.uid).get();\r\n+    final doc =\r\n+        await _firestore.collection('users').doc(firebaseUser.uid).get();\r\n     if (!doc.exists) return null;\r\n \r\n     final data = doc.data()!;\r\n     data['id'] = doc.id;\r\n     return User.fromJson(data);\r\n   }\r\n \r\n-  Future<User> signIn({\r\n-    required String email,\r\n-    required String password,\r\n-  }) async {\r\n+  Future<User> signIn({required String email, required String password}) async {\r\n     try {\r\n+      print(\"AUTH_REPO: Starting sign in for email: $email\");\r\n       final credential = await _auth.signInWithEmailAndPassword(\r\n         email: email,\r\n         password: password,\r\n       );\r\n \r\n       if (credential.user == null) {\r\n+        print(\"AUTH_REPO: Sign in failed - no user returned\");\r\n         throw Exception('Sign in failed');\r\n       }\r\n \r\n-      final doc = await _firestore.collection('users').doc(credential.user!.uid).get();\r\n+      print(\r\n+          \"AUTH_REPO: Firebase Auth successful, getting user doc for uid: ${credential.user!.uid}\");\r\n+      final doc =\r\n+          await _firestore.collection('users').doc(credential.user!.uid).get();\r\n+      print(\"AUTH_REPO: User doc exists: ${doc.exists}\");\r\n+\r\n       if (!doc.exists) {\r\n+        print(\"AUTH_REPO: User document not found\");\r\n         throw Exception('User data not found');\r\n       }\r\n \r\n       final data = doc.data()!;\r\n       data['id'] = doc.id;\r\n+      print(\"AUTH_REPO: User data from Firestore: $data\");\r\n \r\n       final user = User.fromJson(data);\r\n+      print(\r\n+          \"AUTH_REPO: User object created: role=${user.role}, status=${user.status}\");\r\n \r\n       // Check if user is approved\r\n       if (user.role != UserRole.admin && user.status != 'active') {\r\n+        print(\r\n+            \"AUTH_REPO: User not approved - role: ${user.role}, status: ${user.status}\");\r\n         await signOut();\r\n         throw Exception('Your account is pending approval');\r\n       }\r\n \r\n       return user;\r\n     } catch (e) {\r\n+      print(\"AUTH_REPO: Error during sign in: $e\");\r\n       throw _handleAuthError(e);\r\n     }\r\n   }\r\n \r\n@@ -91,17 +103,22 @@\n         'updatedAt': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n       // Create user request with explicit pending status\r\n-      await _firestore.collection('user_requests').doc(credential.user!.uid).set({\r\n+      await _firestore\r\n+          .collection('user_requests')\r\n+          .doc(credential.user!.uid)\r\n+          .set({\r\n         'userId': credential.user!.uid,\r\n         'email': email,\r\n         'name': name,\r\n         'machineSerial': machineSerial,\r\n-        'status': UserRequestStatus.pending.toString().split('.').last, // Explicit status\r\n+        'status': UserRequestStatus.pending\r\n+            .toString()\r\n+            .split('.')\r\n+            .last, // Explicit status\r\n         'createdAt': FieldValue.serverTimestamp(),\r\n       });\r\n-\r\n     } catch (e) {\r\n       throw _handleAuthError(e);\r\n     }\r\n   }\r\n@@ -109,9 +126,10 @@\n   Future<List<UserRequest>> getPendingRequests() async {\r\n     try {\r\n       final snapshot = await _firestore\r\n           .collection('user_requests')\r\n-          .where('status', isEqualTo: UserRequestStatus.pending.toString().split('.').last)\r\n+          .where('status',\r\n+              isEqualTo: UserRequestStatus.pending.toString().split('.').last)\r\n           .get();\r\n \r\n       return snapshot.docs.map((doc) {\r\n         final data = doc.data();\r\n@@ -130,9 +148,10 @@\n         'updatedAt': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n       // Also update the user's status\r\n-      final request = await _firestore.collection('user_requests').doc(requestId).get();\r\n+      final request =\r\n+          await _firestore.collection('user_requests').doc(requestId).get();\r\n       final userId = request.data()?['userId'] as String?;\r\n       if (userId != null) {\r\n         await _firestore.collection('users').doc(userId).update({\r\n           'status': 'active',\r\n@@ -172,9 +191,10 @@\n         'updatedAt': FieldValue.serverTimestamp(),\r\n       });\r\n \r\n       // Also update the user's status\r\n-      final request = await _firestore.collection('user_requests').doc(requestId).get();\r\n+      final request =\r\n+          await _firestore.collection('user_requests').doc(requestId).get();\r\n       final userId = request.data()?['userId'] as String?;\r\n       if (userId != null) {\r\n         await _firestore.collection('users').doc(userId).update({\r\n           'status': 'denied',\r\n@@ -230,5 +250,5 @@\n       }\r\n     }\r\n     return Exception(error.toString());\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1734461349953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,44 @@\n import '../../../core/enums/user_role.dart';\r\n import '../models/user.dart';\r\n import '../models/user_request.dart';\r\n \r\n+// Custom exceptions\r\n+class AuthException implements Exception {\r\n+  final String code;\r\n+  final String message;\r\n+\r\n+  AuthException({required this.code, required this.message});\r\n+\r\n+  @override\r\n+  String toString() => message;\r\n+}\r\n+\r\n+class UserDataException implements Exception {\r\n+  final String code;\r\n+  final String message;\r\n+\r\n+  UserDataException({required this.code, required this.message});\r\n+\r\n+  @override\r\n+  String toString() => message;\r\n+}\r\n+\r\n+class AccessDeniedException implements Exception {\r\n+  final String code;\r\n+  final String message;\r\n+  final String status;\r\n+\r\n+  AccessDeniedException({\r\n+    required this.code,\r\n+    required this.message,\r\n+    required this.status\r\n+  });\r\n+\r\n+  @override\r\n+  String toString() => message;\r\n+}\r\n+\r\n class AuthRepository {\r\n   final firebase_auth.FirebaseAuth _auth;\r\n   final FirebaseFirestore _firestore;\r\n \r\n@@ -31,52 +67,102 @@\n \r\n   Future<User> signIn({required String email, required String password}) async {\r\n     try {\r\n       print(\"AUTH_REPO: Starting sign in for email: $email\");\r\n+\r\n+      // First try Firebase authentication\r\n       final credential = await _auth.signInWithEmailAndPassword(\r\n         email: email,\r\n         password: password,\r\n-      );\r\n+      ).catchError((error) {\r\n+        if (error is firebase_auth.FirebaseAuthException) {\r\n+          throw AuthException(\r\n+            code: error.code,\r\n+            message: _getAuthErrorMessage(error.code),\r\n+          );\r\n+        }\r\n+        throw AuthException(\r\n+          code: 'unknown_auth_error',\r\n+          message: error.toString(),\r\n+        );\r\n+      });\r\n \r\n       if (credential.user == null) {\r\n-        print(\"AUTH_REPO: Sign in failed - no user returned\");\r\n-        throw Exception('Sign in failed');\r\n+        throw AuthException(\r\n+          code: 'no_user',\r\n+          message: 'No user returned after authentication',\r\n+        );\r\n       }\r\n \r\n-      print(\r\n-          \"AUTH_REPO: Firebase Auth successful, getting user doc for uid: ${credential.user!.uid}\");\r\n-      final doc =\r\n-          await _firestore.collection('users').doc(credential.user!.uid).get();\r\n-      print(\"AUTH_REPO: User doc exists: ${doc.exists}\");\r\n+      // Then try to get user data\r\n+      try {\r\n+        final doc = await _firestore.collection('users').doc(credential.user!.uid).get();\r\n \r\n-      if (!doc.exists) {\r\n-        print(\"AUTH_REPO: User document not found\");\r\n-        throw Exception('User data not found');\r\n-      }\r\n+        if (!doc.exists) {\r\n+          throw UserDataException(\r\n+            code: 'user_doc_not_found',\r\n+            message: 'User document not found in Firestore',\r\n+          );\r\n+        }\r\n \r\n-      final data = doc.data()!;\r\n-      data['id'] = doc.id;\r\n-      print(\"AUTH_REPO: User data from Firestore: $data\");\r\n+        final data = doc.data()!;\r\n+        data['id'] = doc.id;\r\n \r\n-      final user = User.fromJson(data);\r\n-      print(\r\n-          \"AUTH_REPO: User object created: role=${user.role}, status=${user.status}\");\r\n+        // Validate required fields\r\n+        _validateUserData(data);\r\n \r\n-      // Check if user is approved\r\n-      if (user.role != UserRole.admin && user.status != 'active') {\r\n-        print(\r\n-            \"AUTH_REPO: User not approved - role: ${user.role}, status: ${user.status}\");\r\n-        await signOut();\r\n-        throw Exception('Your account is pending approval');\r\n+        final user = User.fromJson(data);\r\n+\r\n+        // Check user status\r\n+        if (user.status != 'active' && user.role != UserRole.admin) {\r\n+          throw AccessDeniedException(\r\n+            code: 'inactive_user',\r\n+            message: 'Your account is not active',\r\n+            status: user.status,\r\n+          );\r\n+        }\r\n+\r\n+        return user;\r\n+      } catch (e) {\r\n+        // If user data retrieval fails, sign out the user\r\n+        await _auth.signOut();\r\n+        rethrow;\r\n       }\r\n-\r\n-      return user;\r\n     } catch (e) {\r\n       print(\"AUTH_REPO: Error during sign in: $e\");\r\n-      throw _handleAuthError(e);\r\n+      rethrow;\r\n     }\r\n   }\r\n \r\n+  void _validateUserData(Map<String, dynamic> data) {\r\n+    final requiredFields = ['email', 'role', 'status'];\r\n+    final missingFields = requiredFields.where((field) =>\r\n+      data[field] == null || data[field].toString().isEmpty\r\n+    ).toList();\r\n+\r\n+    if (missingFields.isNotEmpty) {\r\n+      throw UserDataException(\r\n+        code: 'invalid_user_data',\r\n+        message: 'Missing required fields: ${missingFields.join(\", \")}',\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  String _getAuthErrorMessage(String code) {\r\n+    switch (code) {\r\n+      case 'invalid-credential':\r\n+        return 'Invalid email or password.';\r\n+      case 'user-disabled':\r\n+        return 'This account has been disabled.';\r\n+      case 'user-not-found':\r\n+        return 'No account found with this email.';\r\n+      case 'wrong-password':\r\n+        return 'Incorrect password.';\r\n+      default:\r\n+        return 'Authentication error occurred.';\r\n+    }\r\n+  }\r\n+\r\n   Future<void> signUp({\r\n     required String email,\r\n     required String password,\r\n     required String name,\r\n"
                }
            ],
            "date": 1734431426336,
            "name": "Commit-0",
            "content": "// lib/features/auth/repository/auth_repository.dart\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\nimport '../../../core/enums/user_role.dart';\r\nimport '../models/user.dart';\r\nimport '../models/user_request.dart';\r\n\r\nclass AuthRepository {\r\n  final firebase_auth.FirebaseAuth _auth;\r\n  final FirebaseFirestore _firestore;\r\n\r\n  AuthRepository({\r\n    firebase_auth.FirebaseAuth? auth,\r\n    FirebaseFirestore? firestore,\r\n  })  : _auth = auth ?? firebase_auth.FirebaseAuth.instance,\r\n        _firestore = firestore ?? FirebaseFirestore.instance;\r\n\r\n  Future<User?> getCurrentUser() async {\r\n    final firebaseUser = _auth.currentUser;\r\n    if (firebaseUser == null) return null;\r\n\r\n    final doc = await _firestore.collection('users').doc(firebaseUser.uid).get();\r\n    if (!doc.exists) return null;\r\n\r\n    final data = doc.data()!;\r\n    data['id'] = doc.id;\r\n    return User.fromJson(data);\r\n  }\r\n\r\n  Future<User> signIn({\r\n    required String email,\r\n    required String password,\r\n  }) async {\r\n    try {\r\n      final credential = await _auth.signInWithEmailAndPassword(\r\n        email: email,\r\n        password: password,\r\n      );\r\n\r\n      if (credential.user == null) {\r\n        throw Exception('Sign in failed');\r\n      }\r\n\r\n      final doc = await _firestore.collection('users').doc(credential.user!.uid).get();\r\n      if (!doc.exists) {\r\n        throw Exception('User data not found');\r\n      }\r\n\r\n      final data = doc.data()!;\r\n      data['id'] = doc.id;\r\n\r\n      final user = User.fromJson(data);\r\n\r\n      // Check if user is approved\r\n      if (user.role != UserRole.admin && user.status != 'active') {\r\n        await signOut();\r\n        throw Exception('Your account is pending approval');\r\n      }\r\n\r\n      return user;\r\n    } catch (e) {\r\n      throw _handleAuthError(e);\r\n    }\r\n  }\r\n\r\n  Future<void> signUp({\r\n    required String email,\r\n    required String password,\r\n    required String name,\r\n    required String machineSerial,\r\n  }) async {\r\n    try {\r\n      final credential = await _auth.createUserWithEmailAndPassword(\r\n        email: email,\r\n        password: password,\r\n      );\r\n\r\n      if (credential.user == null) {\r\n        throw Exception('Sign up failed');\r\n      }\r\n\r\n      // Create user document\r\n      await _firestore.collection('users').doc(credential.user!.uid).set({\r\n        'email': email,\r\n        'name': name,\r\n        'role': UserRole.user.toJson(),\r\n        'status': 'pending',\r\n        'machineSerial': machineSerial,\r\n        'createdAt': FieldValue.serverTimestamp(),\r\n        'updatedAt': FieldValue.serverTimestamp(),\r\n      });\r\n\r\n      // Create user request\r\n      await _firestore.collection('user_requests').doc(credential.user!.uid).set({\r\n        'userId': credential.user!.uid,\r\n        'email': email,\r\n        'name': name,\r\n        'machineSerial': machineSerial,\r\n        'status': UserRequestStatus.pending.toJson(),\r\n        'createdAt': FieldValue.serverTimestamp(),\r\n      });\r\n\r\n    } catch (e) {\r\n      throw _handleAuthError(e);\r\n    }\r\n  }\r\n\r\n  Future<void> signOut() async {\r\n    try {\r\n      await _auth.signOut();\r\n    } catch (e) {\r\n      throw _handleAuthError(e);\r\n    }\r\n  }\r\n\r\n  Exception _handleAuthError(dynamic error) {\r\n    if (error is firebase_auth.FirebaseAuthException) {\r\n      switch (error.code) {\r\n        case 'invalid-credential':\r\n          return Exception('Invalid email or password.');\r\n        case 'user-disabled':\r\n          return Exception('This account has been disabled.');\r\n        case 'user-not-found':\r\n          return Exception('No account found with this email.');\r\n        case 'wrong-password':\r\n          return Exception('Incorrect password.');\r\n        case 'email-already-in-use':\r\n          return Exception('An account already exists with this email.');\r\n        case 'operation-not-allowed':\r\n          return Exception('Operation not allowed.');\r\n        case 'weak-password':\r\n          return Exception('Please enter a stronger password.');\r\n        default:\r\n          return Exception(error.message ?? 'Authentication error occurred.');\r\n      }\r\n    }\r\n    return Exception(error.toString());\r\n  }\r\n}"
        }
    ]
}