{
    "sourceFile": "lib/features/auth/repositories/user_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376765337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734377526643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,8 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import '../../../core/enums/user_role.dart';\r\n import '../../../repositories/base_repository.dart';\r\n \r\n-class User {\r\n-  final String id;\r\n-  final String email;\r\n-  final String name;\r\n-  final UserRole role;\r\n-  final String status;\r\n-  final String machineSerial;\r\n-\r\n-  User({\r\n-    required this.id,\r\n-    required this.email,\r\n-    required this.name,\r\n-    required this.role,\r\n-    required this.status,\r\n-    required this.machineSerial,\r\n-  });\r\n-\r\n-  Map<String, dynamic> toJson() => {\r\n-    'id': id,\r\n-    'email': email,\r\n-    'name': name,\r\n-    'role': role.toString().split('.').last,\r\n-    'status': status,\r\n-    'machineSerial': machineSerial,\r\n-  };\r\n-\r\n-  factory User.fromJson(Map<String, dynamic> json) => User(\r\n-    id: json['id'] ?? '',\r\n-    email: json['email'] ?? '',\r\n-    name: json['name'] ?? '',\r\n-    role: _parseUserRole(json['role']),\r\n-    status: json['status'] ?? '',\r\n-    machineSerial: json['machineSerial'] ?? '',\r\n-  );\r\n-\r\n-  static UserRole _parseUserRole(dynamic roleString) {\r\n-    if (roleString == null) return UserRole.user; // Default role\r\n-    try {\r\n-      return UserRole.values.firstWhere(\r\n-            (role) => role.toString().split('.').last == roleString,\r\n-        orElse: () => UserRole.user,\r\n-      );\r\n-    } catch (e) {\r\n-      print('Error parsing UserRole: $e');\r\n-      return UserRole.user;\r\n-    }\r\n-  }\r\n-}\r\n-\r\n class UserRepository extends BaseRepository<User> {\r\n   UserRepository() : super('users');\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1734377554088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+import '../../../core/enums/user_role.dart';\r\n+\r\n+class UserRepository extends BaseRepository<User> {\r\n+  UserRepository() : super('users');\r\n+\r\n+  @override\r\n+  User fromJson(Map<String, dynamic> json) => User.fromJson(json);\r\n+\r\n+  Future<void> updateUserRole(String userId, UserRole role) async {\r\n+    await FirebaseFirestore.instance.collection('users').doc(userId).update({\r\n+      'role': role.toString().split('.').last,\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> updateUserStatus(String userId, String status) async {\r\n+    await FirebaseFirestore.instance.collection('users').doc(userId).update({\r\n+      'status': status,\r\n+    });\r\n+  }\r\n+\r\n+  Future<List<User>> getAllUsers() async {\r\n+    try {\r\n+      final querySnapshot = await FirebaseFirestore.instance.collection('users').get();\r\n+      return querySnapshot.docs.map((doc) {\r\n+        final data = doc.data();\r\n+        data['id'] = doc.id; // Ensure the id is always set\r\n+        return User.fromJson(data);\r\n+      }).toList();\r\n+    } catch (e) {\r\n+      print('Error fetching users: $e');\r\n+      return [];\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734376765337,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../../../core/enums/user_role.dart';\r\nimport '../../../repositories/base_repository.dart';\r\n\r\nclass User {\r\n  final String id;\r\n  final String email;\r\n  final String name;\r\n  final UserRole role;\r\n  final String status;\r\n  final String machineSerial;\r\n\r\n  User({\r\n    required this.id,\r\n    required this.email,\r\n    required this.name,\r\n    required this.role,\r\n    required this.status,\r\n    required this.machineSerial,\r\n  });\r\n\r\n  Map<String, dynamic> toJson() => {\r\n    'id': id,\r\n    'email': email,\r\n    'name': name,\r\n    'role': role.toString().split('.').last,\r\n    'status': status,\r\n    'machineSerial': machineSerial,\r\n  };\r\n\r\n  factory User.fromJson(Map<String, dynamic> json) => User(\r\n    id: json['id'] ?? '',\r\n    email: json['email'] ?? '',\r\n    name: json['name'] ?? '',\r\n    role: _parseUserRole(json['role']),\r\n    status: json['status'] ?? '',\r\n    machineSerial: json['machineSerial'] ?? '',\r\n  );\r\n\r\n  static UserRole _parseUserRole(dynamic roleString) {\r\n    if (roleString == null) return UserRole.user; // Default role\r\n    try {\r\n      return UserRole.values.firstWhere(\r\n            (role) => role.toString().split('.').last == roleString,\r\n        orElse: () => UserRole.user,\r\n      );\r\n    } catch (e) {\r\n      print('Error parsing UserRole: $e');\r\n      return UserRole.user;\r\n    }\r\n  }\r\n}\r\n\r\nclass UserRepository extends BaseRepository<User> {\r\n  UserRepository() : super('users');\r\n\r\n  @override\r\n  User fromJson(Map<String, dynamic> json) => User.fromJson(json);\r\n\r\n  Future<void> updateUserRole(String userId, UserRole role) async {\r\n    await FirebaseFirestore.instance.collection('users').doc(userId).update({\r\n      'role': role.toString().split('.').last,\r\n    });\r\n  }\r\n\r\n  Future<void> updateUserStatus(String userId, String status) async {\r\n    await FirebaseFirestore.instance.collection('users').doc(userId).update({\r\n      'status': status,\r\n    });\r\n  }\r\n\r\n  Future<List<User>> getAllUsers() async {\r\n    try {\r\n      final querySnapshot = await FirebaseFirestore.instance.collection('users').get();\r\n      return querySnapshot.docs.map((doc) {\r\n        final data = doc.data();\r\n        data['id'] = doc.id; // Ensure the id is always set\r\n        return User.fromJson(data);\r\n      }).toList();\r\n    } catch (e) {\r\n      print('Error fetching users: $e');\r\n      return [];\r\n    }\r\n  }\r\n}"
        }
    ]
}