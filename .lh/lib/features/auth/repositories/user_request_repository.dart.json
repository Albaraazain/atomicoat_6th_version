{
    "sourceFile": "lib/features/auth/repositories/user_request_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734376765347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734377492181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import '../../../core/enums/user_role.dart';\r\n-import '../../../repositories/base_repository.dart';\r\n \r\n enum UserRequestStatus { pending, approved, denied }\r\n \r\n class UserRequest {\r\n"
                },
                {
                    "date": 1734377610147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import '../../../core/enums/user_role.dart';\r\n+\r\n+enum UserRequestStatus { pending, approved, denied }\r\n+\r\n+class UserRequest {\r\n+  final String userId;\r\n+  final String email;\r\n+  final String name;\r\n+  final String machineSerial;\r\n+  final UserRequestStatus status;\r\n+\r\n+  UserRequest({\r\n+    required this.userId,\r\n+    required this.email,\r\n+    required this.name,\r\n+    required this.machineSerial,\r\n+    this.status = UserRequestStatus.pending,\r\n+  });\r\n+\r\n+  Map<String, dynamic> toJson() => {\r\n+    'userId': userId,\r\n+    'email': email,\r\n+    'name': name,\r\n+    'machineSerial': machineSerial,\r\n+    'status': status.toString(),\r\n+  };\r\n+\r\n+  factory UserRequest.fromJson(Map<String, dynamic> json) => UserRequest(\r\n+    userId: json['userId'],\r\n+    email: json['email'],\r\n+    name: json['name'],\r\n+    machineSerial: json['machineSerial'],\r\n+    status: UserRequestStatus.values.firstWhere(\r\n+            (e) => e.toString() == json['status'],\r\n+        orElse: () => UserRequestStatus.pending),\r\n+  );\r\n+}\r\n+\r\n+class UserRequestRepository extends BaseRepository<UserRequest> {\r\n+  UserRequestRepository() : super('user_requests');\r\n+  // create collection reference\r\n+  final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n+  // create firestore instance\r\n+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n+\r\n+\r\n+  @override\r\n+  UserRequest fromJson(Map<String, dynamic> json) => UserRequest.fromJson(json);\r\n+\r\n+  Future<void> createUserRequest(UserRequest request) async {\r\n+    await add(request.userId, request);\r\n+  }\r\n+\r\n+  Future<void> updateUserRequestStatus(String userId, UserRequestStatus status) async {\r\n+    final request = await get(userId);\r\n+    if (request != null) {\r\n+      final updatedRequest = UserRequest(\r\n+        userId: request.userId,\r\n+        email: request.email,\r\n+        name: request.name,\r\n+        machineSerial: request.machineSerial,\r\n+        status: status,\r\n+      );\r\n+      await update(userId, updatedRequest);\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> approveRequest(String userId, UserRole role) async {\r\n+    await _firestore.runTransaction((transaction) async {\r\n+      // Update the user request status\r\n+      transaction.update(_collection.doc(userId), {'status': UserRequestStatus.approved.toString()});\r\n+\r\n+      // Update the user's role and status in the users collection\r\n+      transaction.update(_firestore.collection('users').doc(userId), {\r\n+        'role': role.toString().split('.').last,\r\n+        'isActive': true,\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> denyRequest(String userId) async {\r\n+    await _collection.doc(userId).update({'status': UserRequestStatus.denied.toString()});\r\n+  }\r\n+\r\n+  Future<int> getPendingRequestCount() async {\r\n+    QuerySnapshot snapshot = await _collection\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return snapshot.size;\r\n+  }\r\n+\r\n+  Future<List<UserRequest>> getPendingRequests() async {\r\n+    final querySnapshot = await getCollection()\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return querySnapshot.docs\r\n+        .map((doc) => UserRequest.fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734377617706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,42 +3,10 @@\n import '../../../core/enums/user_role.dart';\r\n \r\n enum UserRequestStatus { pending, approved, denied }\r\n \r\n-class UserRequest {\r\n-  final String userId;\r\n-  final String email;\r\n-  final String name;\r\n-  final String machineSerial;\r\n-  final UserRequestStatus status;\r\n \r\n-  UserRequest({\r\n-    required this.userId,\r\n-    required this.email,\r\n-    required this.name,\r\n-    required this.machineSerial,\r\n-    this.status = UserRequestStatus.pending,\r\n-  });\r\n \r\n-  Map<String, dynamic> toJson() => {\r\n-    'userId': userId,\r\n-    'email': email,\r\n-    'name': name,\r\n-    'machineSerial': machineSerial,\r\n-    'status': status.toString(),\r\n-  };\r\n-\r\n-  factory UserRequest.fromJson(Map<String, dynamic> json) => UserRequest(\r\n-    userId: json['userId'],\r\n-    email: json['email'],\r\n-    name: json['name'],\r\n-    machineSerial: json['machineSerial'],\r\n-    status: UserRequestStatus.values.firstWhere(\r\n-            (e) => e.toString() == json['status'],\r\n-        orElse: () => UserRequestStatus.pending),\r\n-  );\r\n-}\r\n-\r\n class UserRequestRepository extends BaseRepository<UserRequest> {\r\n   UserRequestRepository() : super('user_requests');\r\n   // create collection reference\r\n   final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n"
                },
                {
                    "date": 1734377635911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import '../../../core/enums/user_role.dart';\r\n+\r\n+\r\n+\r\n+\r\n+class UserRequestRepository extends BaseRepository<UserRequest> {\r\n+  UserRequestRepository() : super('user_requests');\r\n+  // create collection reference\r\n+  final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n+  // create firestore instance\r\n+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n+\r\n+\r\n+  @override\r\n+  UserRequest fromJson(Map<String, dynamic> json) => UserRequest.fromJson(json);\r\n+\r\n+  Future<void> createUserRequest(UserRequest request) async {\r\n+    await add(request.userId, request);\r\n+  }\r\n+\r\n+  Future<void> updateUserRequestStatus(String userId, UserRequestStatus status) async {\r\n+    final request = await get(userId);\r\n+    if (request != null) {\r\n+      final updatedRequest = UserRequest(\r\n+        userId: request.userId,\r\n+        email: request.email,\r\n+        name: request.name,\r\n+        machineSerial: request.machineSerial,\r\n+        status: status,\r\n+      );\r\n+      await update(userId, updatedRequest);\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> approveRequest(String userId, UserRole role) async {\r\n+    await _firestore.runTransaction((transaction) async {\r\n+      // Update the user request status\r\n+      transaction.update(_collection.doc(userId), {'status': UserRequestStatus.approved.toString()});\r\n+\r\n+      // Update the user's role and status in the users collection\r\n+      transaction.update(_firestore.collection('users').doc(userId), {\r\n+        'role': role.toString().split('.').last,\r\n+        'isActive': true,\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> denyRequest(String userId) async {\r\n+    await _collection.doc(userId).update({'status': UserRequestStatus.denied.toString()});\r\n+  }\r\n+\r\n+  Future<int> getPendingRequestCount() async {\r\n+    QuerySnapshot snapshot = await _collection\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return snapshot.size;\r\n+  }\r\n+\r\n+  Future<List<UserRequest>> getPendingRequests() async {\r\n+    final querySnapshot = await getCollection()\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return querySnapshot.docs\r\n+        .map((doc) => UserRequest.fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734377654985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import '../../../core/enums/user_role.dart';\r\n+\r\n+\r\n+\r\n+\r\n+class UserRequestRepository extends BaseRepository<UserRequest> {\r\n+  UserRequestRepository() : super('user_requests');\r\n+  // create collection reference\r\n+  final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n+  // create firestore instance\r\n+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n+\r\n+\r\n+  @override\r\n+  UserRequest fromJson(Map<String, dynamic> json) => UserRequest.fromJson(json);\r\n+\r\n+  Future<void> createUserRequest(UserRequest request) async {\r\n+    await add(request.userId, request);\r\n+  }\r\n+\r\n+  Future<void> updateUserRequestStatus(String userId, UserRequestStatus status) async {\r\n+    final request = await get(userId);\r\n+    if (request != null) {\r\n+      final updatedRequest = UserRequest(\r\n+        userId: request.userId,\r\n+        email: request.email,\r\n+        name: request.name,\r\n+        machineSerial: request.machineSerial,\r\n+        status: status,\r\n+      );\r\n+      await update(userId, updatedRequest);\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> approveRequest(String userId, UserRole role) async {\r\n+    await _firestore.runTransaction((transaction) async {\r\n+      // Update the user request status\r\n+      transaction.update(_collection.doc(userId), {'status': UserRequestStatus.approved.toString()});\r\n+\r\n+      // Update the user's role and status in the users collection\r\n+      transaction.update(_firestore.collection('users').doc(userId), {\r\n+        'role': role.toString().split('.').last,\r\n+        'isActive': true,\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> denyRequest(String userId) async {\r\n+    await _collection.doc(userId).update({'status': UserRequestStatus.denied.toString()});\r\n+  }\r\n+\r\n+  Future<int> getPendingRequestCount() async {\r\n+    QuerySnapshot snapshot = await _collection\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return snapshot.size;\r\n+  }\r\n+\r\n+  Future<List<UserRequest>> getPendingRequests() async {\r\n+    final querySnapshot = await getCollection()\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return querySnapshot.docs\r\n+        .map((doc) => UserRequest.fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734377661455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/core/enums/user_request_status.dart';\r\n+import 'package:experiment_planner/features/auth/models/user_request.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import '../../../core/enums/user_role.dart';\r\n+\r\n+\r\n+\r\n+\r\n+class UserRequestRepository extends BaseRepository<UserRequest> {\r\n+  UserRequestRepository() : super('user_requests');\r\n+  // create collection reference\r\n+  final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n+  // create firestore instance\r\n+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n+\r\n+\r\n+  @override\r\n+  UserRequest fromJson(Map<String, dynamic> json) => UserRequest.fromJson(json);\r\n+\r\n+  Future<void> createUserRequest(UserRequest request) async {\r\n+    await add(request.userId, request);\r\n+  }\r\n+\r\n+  Future<void> updateUserRequestStatus(String userId, UserRequestStatus status) async {\r\n+    final request = await get(userId);\r\n+    if (request != null) {\r\n+      final updatedRequest = UserRequest(\r\n+        userId: request.userId,\r\n+        email: request.email,\r\n+        name: request.name,\r\n+        machineSerial: request.machineSerial,\r\n+        status: status,\r\n+      );\r\n+      await update(userId, updatedRequest);\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> approveRequest(String userId, UserRole role) async {\r\n+    await _firestore.runTransaction((transaction) async {\r\n+      // Update the user request status\r\n+      transaction.update(_collection.doc(userId), {'status': UserRequestStatus.approved.toString()});\r\n+\r\n+      // Update the user's role and status in the users collection\r\n+      transaction.update(_firestore.collection('users').doc(userId), {\r\n+        'role': role.toString().split('.').last,\r\n+        'isActive': true,\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> denyRequest(String userId) async {\r\n+    await _collection.doc(userId).update({'status': UserRequestStatus.denied.toString()});\r\n+  }\r\n+\r\n+  Future<int> getPendingRequestCount() async {\r\n+    QuerySnapshot snapshot = await _collection\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return snapshot.size;\r\n+  }\r\n+\r\n+  Future<List<UserRequest>> getPendingRequests() async {\r\n+    final querySnapshot = await getCollection()\r\n+        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n+        .get();\r\n+    return querySnapshot.docs\r\n+        .map((doc) => UserRequest.fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734376765347,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../../../core/enums/user_role.dart';\r\nimport '../../../repositories/base_repository.dart';\r\n\r\nenum UserRequestStatus { pending, approved, denied }\r\n\r\nclass UserRequest {\r\n  final String userId;\r\n  final String email;\r\n  final String name;\r\n  final String machineSerial;\r\n  final UserRequestStatus status;\r\n\r\n  UserRequest({\r\n    required this.userId,\r\n    required this.email,\r\n    required this.name,\r\n    required this.machineSerial,\r\n    this.status = UserRequestStatus.pending,\r\n  });\r\n\r\n  Map<String, dynamic> toJson() => {\r\n    'userId': userId,\r\n    'email': email,\r\n    'name': name,\r\n    'machineSerial': machineSerial,\r\n    'status': status.toString(),\r\n  };\r\n\r\n  factory UserRequest.fromJson(Map<String, dynamic> json) => UserRequest(\r\n    userId: json['userId'],\r\n    email: json['email'],\r\n    name: json['name'],\r\n    machineSerial: json['machineSerial'],\r\n    status: UserRequestStatus.values.firstWhere(\r\n            (e) => e.toString() == json['status'],\r\n        orElse: () => UserRequestStatus.pending),\r\n  );\r\n}\r\n\r\nclass UserRequestRepository extends BaseRepository<UserRequest> {\r\n  UserRequestRepository() : super('user_requests');\r\n  // create collection reference\r\n  final CollectionReference _collection = FirebaseFirestore.instance.collection('user_requests');\r\n  // create firestore instance\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n\r\n\r\n  @override\r\n  UserRequest fromJson(Map<String, dynamic> json) => UserRequest.fromJson(json);\r\n\r\n  Future<void> createUserRequest(UserRequest request) async {\r\n    await add(request.userId, request);\r\n  }\r\n\r\n  Future<void> updateUserRequestStatus(String userId, UserRequestStatus status) async {\r\n    final request = await get(userId);\r\n    if (request != null) {\r\n      final updatedRequest = UserRequest(\r\n        userId: request.userId,\r\n        email: request.email,\r\n        name: request.name,\r\n        machineSerial: request.machineSerial,\r\n        status: status,\r\n      );\r\n      await update(userId, updatedRequest);\r\n    }\r\n  }\r\n\r\n  Future<void> approveRequest(String userId, UserRole role) async {\r\n    await _firestore.runTransaction((transaction) async {\r\n      // Update the user request status\r\n      transaction.update(_collection.doc(userId), {'status': UserRequestStatus.approved.toString()});\r\n\r\n      // Update the user's role and status in the users collection\r\n      transaction.update(_firestore.collection('users').doc(userId), {\r\n        'role': role.toString().split('.').last,\r\n        'isActive': true,\r\n      });\r\n    });\r\n  }\r\n\r\n  Future<void> denyRequest(String userId) async {\r\n    await _collection.doc(userId).update({'status': UserRequestStatus.denied.toString()});\r\n  }\r\n\r\n  Future<int> getPendingRequestCount() async {\r\n    QuerySnapshot snapshot = await _collection\r\n        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n        .get();\r\n    return snapshot.size;\r\n  }\r\n\r\n  Future<List<UserRequest>> getPendingRequests() async {\r\n    final querySnapshot = await getCollection()\r\n        .where('status', isEqualTo: UserRequestStatus.pending.toString())\r\n        .get();\r\n    return querySnapshot.docs\r\n        .map((doc) => UserRequest.fromJson(doc.data() as Map<String, dynamic>))\r\n        .toList();\r\n  }\r\n}"
        }
    ]
}