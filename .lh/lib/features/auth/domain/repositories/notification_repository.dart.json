{
    "sourceFile": "lib/features/auth/domain/repositories/notification_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734427893607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734427903695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+// lib/features/auth/data/repositories/notification_repository.dart\r\n+import 'package:experiment_planner/features/auth/data/services/firebase_messaging_service.dart';\r\n+import 'package:experiment_planner/features/auth/data/services/local_notification_service.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+import 'package:dartz/dartz.dart';\r\n+import '../../domain/repositories/i_notification_repository.dart';\r\n+import '../../domain/entities/notification_settings.dart';\r\n+import '../../../../core/errors/failures.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+\r\n+@LazySingleton(as: INotificationRepository)\r\n+class NotificationRepository implements INotificationRepository {\r\n+  final FirebaseMessagingService _messagingService;\r\n+  final LocalNotificationService _localNotificationService;\r\n+  final FirebaseFirestore _firestore;\r\n+  final FirebaseAuth _auth;\r\n+\r\n+  NotificationRepository(\r\n+    this._messagingService,\r\n+    this._localNotificationService,\r\n+    this._firestore,\r\n+    this._auth,\r\n+  );\r\n+\r\n+  @override\r\n+  Future<Either<Failure, Unit>> updateSettings(NotificationSettings settings) async {\r\n+    try {\r\n+      final user = _auth.currentUser;\r\n+      if (user == null) return left(const Failure.serverError('User not found'));\r\n+\r\n+      await _firestore\r\n+          .collection('users')\r\n+          .doc(user.uid)\r\n+          .update({'notificationSettings': settings.toJson()});\r\n+\r\n+      await _messagingService.subscribeToTopics(settings);\r\n+\r\n+      return right(unit);\r\n+    } catch (e) {\r\n+      return left(Failure.serverError(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<Either<Failure, NotificationSettings>> getSettings() async {\r\n+    try {\r\n+      final user = _auth.currentUser;\r\n+      if (user == null) return left(const Failure.serverError('User not found'));\r\n+\r\n+      final doc = await _firestore\r\n+          .collection('users')\r\n+          .doc(user.uid)\r\n+          .get();\r\n+\r\n+      final settings = NotificationSettingsModel.fromJson(\r\n+        doc.data()?['notificationSettings'] ?? {},\r\n+      );\r\n+\r\n+      return right(settings.toDomain());\r\n+    } catch (e) {\r\n+      return left(Failure.serverError(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<Either<Failure, Unit>> updateToken() async {\r\n+    try {\r\n+      final user = _auth.currentUser;\r\n+      if (user == null) return left(const Failure.serverError('User not found'));\r\n+\r\n+      await _messagingService.updateToken(user.uid);\r\n+      return right(unit);\r\n+    } catch (e) {\r\n+      return left(Failure.serverError(e.toString()));\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<Either<Failure, Unit>> clearToken() async {\r\n+    try {\r\n+      final user = _auth.currentUser;\r\n+      if (user == null) return right(unit);\r\n+\r\n+      await _firestore\r\n+          .collection('users')\r\n+          .doc(user.uid)\r\n+          .update({'fcmToken': null});\r\n+\r\n+      return right(unit);\r\n+    } catch (e) {\r\n+      return left(Failure.serverError(e.toString()));\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734428446356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // lib/features/auth/data/repositories/notification_repository.dart\r\n+import 'package:experiment_planner/features/auth/data/models/notification_settings_model.dart';\r\n import 'package:experiment_planner/features/auth/data/services/firebase_messaging_service.dart';\r\n import 'package:experiment_planner/features/auth/data/services/local_notification_service.dart';\r\n import 'package:injectable/injectable.dart';\r\n import 'package:dartz/dartz.dart';\r\n"
                }
            ],
            "date": 1734427893607,
            "name": "Commit-0",
            "content": "// lib/features/auth/data/repositories/notification_repository.dart\r\nimport 'package:injectable/injectable.dart';\r\nimport 'package:dartz/dartz.dart';\r\nimport '../../domain/repositories/i_notification_repository.dart';\r\nimport '../../domain/entities/notification_settings.dart';\r\nimport '../services/firebase_messaging_service.dart';\r\nimport '../services/local_notification_service.dart';\r\nimport '../../../../core/errors/failures.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\n\r\n@LazySingleton(as: INotificationRepository)\r\nclass NotificationRepository implements INotificationRepository {\r\n  final FirebaseMessagingService _messagingService;\r\n  final LocalNotificationService _localNotificationService;\r\n  final FirebaseFirestore _firestore;\r\n  final FirebaseAuth _auth;\r\n\r\n  NotificationRepository(\r\n    this._messagingService,\r\n    this._localNotificationService,\r\n    this._firestore,\r\n    this._auth,\r\n  );\r\n\r\n  @override\r\n  Future<Either<Failure, Unit>> updateSettings(NotificationSettings settings) async {\r\n    try {\r\n      final user = _auth.currentUser;\r\n      if (user == null) return left(const Failure.serverError('User not found'));\r\n\r\n      await _firestore\r\n          .collection('users')\r\n          .doc(user.uid)\r\n          .update({'notificationSettings': settings.toJson()});\r\n\r\n      await _messagingService.subscribeToTopics(settings);\r\n\r\n      return right(unit);\r\n    } catch (e) {\r\n      return left(Failure.serverError(e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<Either<Failure, NotificationSettings>> getSettings() async {\r\n    try {\r\n      final user = _auth.currentUser;\r\n      if (user == null) return left(const Failure.serverError('User not found'));\r\n\r\n      final doc = await _firestore\r\n          .collection('users')\r\n          .doc(user.uid)\r\n          .get();\r\n\r\n      final settings = NotificationSettingsModel.fromJson(\r\n        doc.data()?['notificationSettings'] ?? {},\r\n      );\r\n\r\n      return right(settings.toDomain());\r\n    } catch (e) {\r\n      return left(Failure.serverError(e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<Either<Failure, Unit>> updateToken() async {\r\n    try {\r\n      final user = _auth.currentUser;\r\n      if (user == null) return left(const Failure.serverError('User not found'));\r\n\r\n      await _messagingService.updateToken(user.uid);\r\n      return right(unit);\r\n    } catch (e) {\r\n      return left(Failure.serverError(e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<Either<Failure, Unit>> clearToken() async {\r\n    try {\r\n      final user = _auth.currentUser;\r\n      if (user == null) return right(unit);\r\n\r\n      await _firestore\r\n          .collection('users')\r\n          .doc(user.uid)\r\n          .update({'fcmToken': null});\r\n\r\n      return right(unit);\r\n    } catch (e) {\r\n      return left(Failure.serverError(e.toString()));\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}