{
    "sourceFile": "lib/features/auth/bloc/auth_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1734431378700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734431387345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// lib/features/auth/bloc/auth_bloc.dart\r\n+import 'package:experiment_planner/features/auth/bloc/auth_event.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../repository/auth_repository.dart';\r\n+\r\n+class AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n+  final AuthRepository _authRepository;\r\n+\r\n+  AuthBloc({required AuthRepository authRepository})\r\n+      : _authRepository = authRepository,\r\n+        super(AuthState.initial()) {\r\n+    on<AuthCheckRequested>(_onAuthCheckRequested);\r\n+    on<SignInRequested>(_onSignInRequested);\r\n+    on<SignUpRequested>(_onSignUpRequested);\r\n+    on<SignOutRequested>(_onSignOutRequested);\r\n+  }\r\n+\r\n+  Future<void> _onAuthCheckRequested(\r\n+    AuthCheckRequested event,\r\n+    Emitter<AuthState> emit,\r\n+  ) async {\r\n+    final user = await _authRepository.getCurrentUser();\r\n+    if (user != null) {\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.authenticated,\r\n+        user: user,\r\n+      ));\r\n+    } else {\r\n+      emit(state.copyWith(status: AuthStatus.unauthenticated));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onSignInRequested(\r\n+    SignInRequested event,\r\n+    Emitter<AuthState> emit,\r\n+  ) async {\r\n+    emit(state.copyWith(status: AuthStatus.loading));\r\n+\r\n+    try {\r\n+      final user = await _authRepository.signIn(\r\n+        email: event.email,\r\n+        password: event.password,\r\n+      );\r\n+\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.authenticated,\r\n+        user: user,\r\n+        errorMessage: null,\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.error,\r\n+        errorMessage: e.toString(),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onSignUpRequested(\r\n+    SignUpRequested event,\r\n+    Emitter<AuthState> emit,\r\n+  ) async {\r\n+    emit(state.copyWith(status: AuthStatus.loading));\r\n+\r\n+    try {\r\n+      await _authRepository.signUp(\r\n+        email: event.email,\r\n+        password: event.password,\r\n+        name: event.name,\r\n+        machineSerial: event.machineSerial,\r\n+      );\r\n+\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.unauthenticated,\r\n+        errorMessage: 'Registration successful. Please wait for admin approval.',\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.error,\r\n+        errorMessage: e.toString(),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onSignOutRequested(\r\n+    SignOutRequested event,\r\n+    Emitter<AuthState> emit,\r\n+  ) async {\r\n+    emit(state.copyWith(status: AuthStatus.loading));\r\n+\r\n+    try {\r\n+      await _authRepository.signOut();\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.unauthenticated,\r\n+        user: null,\r\n+        errorMessage: null,\r\n+      ));\r\n+    } catch (e) {\r\n+      emit(state.copyWith(\r\n+        status: AuthStatus.error,\r\n+        errorMessage: e.toString(),\r\n+      ));\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734431409181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // lib/features/auth/bloc/auth_bloc.dart\r\n import 'package:experiment_planner/features/auth/bloc/auth_event.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../repository/auth_repository.dart';\r\n \r\n class AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n   final AuthRepository _authRepository;\r\n \r\n"
                },
                {
                    "date": 1734431434164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // lib/features/auth/bloc/auth_bloc.dart\r\n import 'package:experiment_planner/features/auth/bloc/auth_event.dart';\r\n import 'package:experiment_planner/features/auth/bloc/auth_state.dart';\r\n+import 'package:experiment_planner/features/auth/repository/auth_repository.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n \r\n class AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n   final AuthRepository _authRepository;\r\n"
                },
                {
                    "date": 1734433041799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,107 +102,4 @@\n       ));\r\n     }\r\n   }\r\n }\r\n-// lib/features/auth/bloc/auth_bloc.dart\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../repository/auth_repository.dart';\r\n-\r\n-class AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n-  final AuthRepository _authRepository;\r\n-\r\n-  AuthBloc({required AuthRepository authRepository})\r\n-      : _authRepository = authRepository,\r\n-        super(AuthState.initial()) {\r\n-    on<AuthCheckRequested>(_onAuthCheckRequested);\r\n-    on<SignInRequested>(_onSignInRequested);\r\n-    on<SignUpRequested>(_onSignUpRequested);\r\n-    on<SignOutRequested>(_onSignOutRequested);\r\n-  }\r\n-\r\n-  Future<void> _onAuthCheckRequested(\r\n-    AuthCheckRequested event,\r\n-    Emitter<AuthState> emit,\r\n-  ) async {\r\n-    final user = await _authRepository.getCurrentUser();\r\n-    if (user != null) {\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.authenticated,\r\n-        user: user,\r\n-      ));\r\n-    } else {\r\n-      emit(state.copyWith(status: AuthStatus.unauthenticated));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onSignInRequested(\r\n-    SignInRequested event,\r\n-    Emitter<AuthState> emit,\r\n-  ) async {\r\n-    emit(state.copyWith(status: AuthStatus.loading));\r\n-\r\n-    try {\r\n-      final user = await _authRepository.signIn(\r\n-        email: event.email,\r\n-        password: event.password,\r\n-      );\r\n-\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.authenticated,\r\n-        user: user,\r\n-        errorMessage: null,\r\n-      ));\r\n-    } catch (e) {\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n-        errorMessage: e.toString(),\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onSignUpRequested(\r\n-    SignUpRequested event,\r\n-    Emitter<AuthState> emit,\r\n-  ) async {\r\n-    emit(state.copyWith(status: AuthStatus.loading));\r\n-\r\n-    try {\r\n-      await _authRepository.signUp(\r\n-        email: event.email,\r\n-        password: event.password,\r\n-        name: event.name,\r\n-        machineSerial: event.machineSerial,\r\n-      );\r\n-\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.unauthenticated,\r\n-        errorMessage: 'Registration successful. Please wait for admin approval.',\r\n-      ));\r\n-    } catch (e) {\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n-        errorMessage: e.toString(),\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onSignOutRequested(\r\n-    SignOutRequested event,\r\n-    Emitter<AuthState> emit,\r\n-  ) async {\r\n-    emit(state.copyWith(status: AuthStatus.loading));\r\n-\r\n-    try {\r\n-      await _authRepository.signOut();\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.unauthenticated,\r\n-        user: null,\r\n-        errorMessage: null,\r\n-      ));\r\n-    } catch (e) {\r\n-      emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n-        errorMessage: e.toString(),\r\n-      ));\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1734460431623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,22 +34,27 @@\n   Future<void> _onSignInRequested(\r\n     SignInRequested event,\r\n     Emitter<AuthState> emit,\r\n   ) async {\r\n+    print(\"AUTH_BLOC: Processing sign in request\");\r\n     emit(state.copyWith(status: AuthStatus.loading));\r\n \r\n     try {\r\n+      print(\"AUTH_BLOC: Calling repository signIn\");\r\n       final user = await _authRepository.signIn(\r\n         email: event.email,\r\n         password: event.password,\r\n       );\r\n+      print(\r\n+          \"AUTH_BLOC: Sign in successful, user: role=${user.role}, status=${user.status}\");\r\n \r\n       emit(state.copyWith(\r\n         status: AuthStatus.authenticated,\r\n         user: user,\r\n         errorMessage: null,\r\n       ));\r\n     } catch (e) {\r\n+      print(\"AUTH_BLOC: Sign in error: $e\");\r\n       emit(state.copyWith(\r\n         status: AuthStatus.error,\r\n         errorMessage: e.toString(),\r\n       ));\r\n@@ -71,9 +76,10 @@\n       );\r\n \r\n       emit(state.copyWith(\r\n         status: AuthStatus.unauthenticated,\r\n-        errorMessage: 'Registration successful. Please wait for admin approval.',\r\n+        errorMessage:\r\n+            'Registration successful. Please wait for admin approval.',\r\n       ));\r\n     } catch (e) {\r\n       emit(state.copyWith(\r\n         status: AuthStatus.error,\r\n"
                },
                {
                    "date": 1734461188856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,30 +34,32 @@\n   Future<void> _onSignInRequested(\r\n     SignInRequested event,\r\n     Emitter<AuthState> emit,\r\n   ) async {\r\n-    print(\"AUTH_BLOC: Processing sign in request\");\r\n     emit(state.copyWith(status: AuthStatus.loading));\r\n \r\n     try {\r\n-      print(\"AUTH_BLOC: Calling repository signIn\");\r\n       final user = await _authRepository.signIn(\r\n         email: event.email,\r\n         password: event.password,\r\n       );\r\n-      print(\r\n-          \"AUTH_BLOC: Sign in successful, user: role=${user.role}, status=${user.status}\");\r\n \r\n       emit(state.copyWith(\r\n         status: AuthStatus.authenticated,\r\n         user: user,\r\n-        errorMessage: null,\r\n       ));\r\n     } catch (e) {\r\n-      print(\"AUTH_BLOC: Sign in error: $e\");\r\n+      final isAuthError = e.toString().contains('auth/');\r\n+      final isAccessDenied = e.toString().contains('permission-denied');\r\n+\r\n       emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n+        status: isAuthError\r\n+            ? AuthStatus.authError\r\n+            : isAccessDenied\r\n+                ? AuthStatus.accessDenied\r\n+                : AuthStatus.userDataError,\r\n         errorMessage: e.toString(),\r\n+        errorCode: isAuthError ? e.toString().split('/')[1] : null,\r\n       ));\r\n     }\r\n   }\r\n \r\n@@ -75,16 +77,18 @@\n         machineSerial: event.machineSerial,\r\n       );\r\n \r\n       emit(state.copyWith(\r\n-        status: AuthStatus.unauthenticated,\r\n-        errorMessage:\r\n-            'Registration successful. Please wait for admin approval.',\r\n+        status: AuthStatus.registrationSuccess,\r\n+        errorMessage: 'Registration successful. Please wait for admin approval.',\r\n       ));\r\n     } catch (e) {\r\n+      final isAuthError = e.toString().contains('auth/');\r\n+\r\n       emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n+        status: isAuthError ? AuthStatus.authError : AuthStatus.userDataError,\r\n         errorMessage: e.toString(),\r\n+        errorCode: isAuthError ? e.toString().split('/')[1] : null,\r\n       ));\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1734461201783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n         errorMessage: null,\r\n       ));\r\n     } catch (e) {\r\n       emit(state.copyWith(\r\n-        status: AuthStatus.error,\r\n+        status: AuthStatus.userDataError,\r\n         errorMessage: e.toString(),\r\n       ));\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1734461351904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,20 +47,33 @@\n         status: AuthStatus.authenticated,\r\n         user: user,\r\n       ));\r\n     } catch (e) {\r\n-      final isAuthError = e.toString().contains('auth/');\r\n-      final isAccessDenied = e.toString().contains('permission-denied');\r\n-\r\n-      emit(state.copyWith(\r\n-        status: isAuthError\r\n-            ? AuthStatus.authError\r\n-            : isAccessDenied\r\n-                ? AuthStatus.accessDenied\r\n-                : AuthStatus.userDataError,\r\n-        errorMessage: e.toString(),\r\n-        errorCode: isAuthError ? e.toString().split('/')[1] : null,\r\n-      ));\r\n+      if (e is AuthException) {\r\n+        emit(state.copyWith(\r\n+          status: AuthStatus.authError,\r\n+          errorMessage: e.message,\r\n+          errorCode: e.code,\r\n+        ));\r\n+      } else if (e is UserDataException) {\r\n+        emit(state.copyWith(\r\n+          status: AuthStatus.userDataError,\r\n+          errorMessage: e.message,\r\n+          errorCode: e.code,\r\n+        ));\r\n+      } else if (e is AccessDeniedException) {\r\n+        emit(state.copyWith(\r\n+          status: AuthStatus.accessDenied,\r\n+          errorMessage: e.message,\r\n+          errorCode: e.code,\r\n+        ));\r\n+      } else {\r\n+        emit(state.copyWith(\r\n+          status: AuthStatus.userDataError,\r\n+          errorMessage: e.toString(),\r\n+          errorCode: 'unknown_error',\r\n+        ));\r\n+      }\r\n     }\r\n   }\r\n \r\n   Future<void> _onSignUpRequested(\r\n"
                },
                {
                    "date": 1734464520828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n     on<AuthCheckRequested>(_onAuthCheckRequested);\r\n     on<SignInRequested>(_onSignInRequested);\r\n     on<SignUpRequested>(_onSignUpRequested);\r\n     on<SignOutRequested>(_onSignOutRequested);\r\n+\r\n+    // Add automatic check on initialization\r\n+    add(AuthCheckRequested());\r\n   }\r\n \r\n   Future<void> _onAuthCheckRequested(\r\n     AuthCheckRequested event,\r\n"
                }
            ],
            "date": 1734431378700,
            "name": "Commit-0",
            "content": "// lib/features/auth/bloc/auth_bloc.dart\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../repository/auth_repository.dart';\r\n\r\nclass AuthBloc extends Bloc<AuthEvent, AuthState> {\r\n  final AuthRepository _authRepository;\r\n\r\n  AuthBloc({required AuthRepository authRepository})\r\n      : _authRepository = authRepository,\r\n        super(AuthState.initial()) {\r\n    on<AuthCheckRequested>(_onAuthCheckRequested);\r\n    on<SignInRequested>(_onSignInRequested);\r\n    on<SignUpRequested>(_onSignUpRequested);\r\n    on<SignOutRequested>(_onSignOutRequested);\r\n  }\r\n\r\n  Future<void> _onAuthCheckRequested(\r\n    AuthCheckRequested event,\r\n    Emitter<AuthState> emit,\r\n  ) async {\r\n    final user = await _authRepository.getCurrentUser();\r\n    if (user != null) {\r\n      emit(state.copyWith(\r\n        status: AuthStatus.authenticated,\r\n        user: user,\r\n      ));\r\n    } else {\r\n      emit(state.copyWith(status: AuthStatus.unauthenticated));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSignInRequested(\r\n    SignInRequested event,\r\n    Emitter<AuthState> emit,\r\n  ) async {\r\n    emit(state.copyWith(status: AuthStatus.loading));\r\n\r\n    try {\r\n      final user = await _authRepository.signIn(\r\n        email: event.email,\r\n        password: event.password,\r\n      );\r\n\r\n      emit(state.copyWith(\r\n        status: AuthStatus.authenticated,\r\n        user: user,\r\n        errorMessage: null,\r\n      ));\r\n    } catch (e) {\r\n      emit(state.copyWith(\r\n        status: AuthStatus.error,\r\n        errorMessage: e.toString(),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSignUpRequested(\r\n    SignUpRequested event,\r\n    Emitter<AuthState> emit,\r\n  ) async {\r\n    emit(state.copyWith(status: AuthStatus.loading));\r\n\r\n    try {\r\n      await _authRepository.signUp(\r\n        email: event.email,\r\n        password: event.password,\r\n        name: event.name,\r\n        machineSerial: event.machineSerial,\r\n      );\r\n\r\n      emit(state.copyWith(\r\n        status: AuthStatus.unauthenticated,\r\n        errorMessage: 'Registration successful. Please wait for admin approval.',\r\n      ));\r\n    } catch (e) {\r\n      emit(state.copyWith(\r\n        status: AuthStatus.error,\r\n        errorMessage: e.toString(),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSignOutRequested(\r\n    SignOutRequested event,\r\n    Emitter<AuthState> emit,\r\n  ) async {\r\n    emit(state.copyWith(status: AuthStatus.loading));\r\n\r\n    try {\r\n      await _authRepository.signOut();\r\n      emit(state.copyWith(\r\n        status: AuthStatus.unauthenticated,\r\n        user: null,\r\n        errorMessage: null,\r\n      ));\r\n    } catch (e) {\r\n      emit(state.copyWith(\r\n        status: AuthStatus.error,\r\n        errorMessage: e.toString(),\r\n      ));\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}