{
    "sourceFile": "lib/features/auth/data/datasources/auth_remote_data_source.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734378566866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734378724526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,97 @@\n       );\r\n     } on FirebaseAuthException catch (e) {\r\n       throw ServerException(_mapFirebaseAuthError(e));\r\n     } catch (e) {\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<UserModel> signUpWithEmailAndPassword({\r\n+    required String email,\r\n+    required String password,\r\n+    required String name,\r\n+    required String machineSerial,\r\n+  }) async {\r\n+    try {\r\n+      final userCredential = await _firebaseAuth.createUserWithEmailAndPassword(\r\n+        email: email,\r\n+        password: password,\r\n+      );\r\n+\r\n+      if (userCredential.user == null) {\r\n+        throw const ServerException('Failed to create user');\r\n+      }\r\n+\r\n+      final userData = {\r\n+        'email': email,\r\n+        'name': name,\r\n+        'role': 'user',\r\n+        'status': 'pending',\r\n+        'machineSerial': machineSerial,\r\n+        'createdAt': FieldValue.serverTimestamp(),\r\n+        'updatedAt': FieldValue.serverTimestamp(),\r\n+      };\r\n+\r\n+      await _firestore\r\n+          .collection(FirebaseConstants.usersCollection)\r\n+          .doc(userCredential.user!.uid)\r\n+          .set(userData);\r\n+\r\n+      return UserModel.fromFirestore(\r\n+        userData,\r\n+        userCredential.user!.uid,\r\n+      );\r\n+    } on FirebaseAuthException catch (e) {\r\n+      throw ServerException(_mapFirebaseAuthError(e));\r\n+    } catch (e) {\r\n       throw ServerException(e.toString());\r\n     }\r\n   }\r\n \r\n+  @override\r\n+  Future<void> signOut() async {\r\n+    try {\r\n+      await _firebaseAuth.signOut();\r\n+    } catch (e) {\r\n+      throw ServerException(e.toString());\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Future<UserModel?> getCurrentUser() async {\r\n+    try {\r\n+      final currentUser = _firebaseAuth.currentUser;\r\n+      if (currentUser == null) return null;\r\n+\r\n+      final userDoc = await _firestore\r\n+          .collection(FirebaseConstants.usersCollection)\r\n+          .doc(currentUser.uid)\r\n+          .get();\r\n+\r\n+      if (!userDoc.exists) return null;\r\n+\r\n+      return UserModel.fromFirestore(\r\n+        userDoc.data()!,\r\n+        userDoc.id,\r\n+      );\r\n+    } catch (e) {\r\n+      throw ServerException(e.toString());\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Stream<UserModel?> watchUser(String userId) {\r\n+    return _firestore\r\n+        .collection(FirebaseConstants.usersCollection)\r\n+        .doc(userId)\r\n+        .snapshots()\r\n+        .map((doc) {\r\n+      if (!doc.exists) return null;\r\n+      return UserModel.fromFirestore(doc.data()!, doc.id);\r\n+    });\r\n+  }\r\n+\r\n   String _mapFirebaseAuthError(FirebaseAuthException e) {\r\n     switch (e.code) {\r\n       case 'invalid-credential':\r\n         return 'Invalid email or password';\r\n@@ -76,8 +161,6 @@\n       default:\r\n         return e.message ?? 'An authentication error occurred';\r\n     }\r\n   }\r\n-\r\n-  // Implement other methods...\r\n }\r\n \r\n"
                }
            ],
            "date": 1734378566866,
            "name": "Commit-0",
            "content": "// lib/features/auth/data/datasources/auth_remote_data_source.dart\r\nimport 'package:injectable/injectable.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart' hide User;\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../models/user_model.dart';\r\nimport '../../../../core/errors/exceptions.dart';\r\nimport '../../../../core/constants/firebase_constants.dart';\r\n\r\nabstract class IAuthRemoteDataSource {\r\n  Future<UserModel> signInWithEmailAndPassword(String email, String password);\r\n  Future<UserModel> signUpWithEmailAndPassword({\r\n    required String email,\r\n    required String password,\r\n    required String name,\r\n    required String machineSerial,\r\n  });\r\n  Future<void> signOut();\r\n  Future<UserModel?> getCurrentUser();\r\n  Stream<UserModel?> watchUser(String userId);\r\n}\r\n\r\n@LazySingleton(as: IAuthRemoteDataSource)\r\nclass FirebaseAuthDataSource implements IAuthRemoteDataSource {\r\n  final FirebaseAuth _firebaseAuth;\r\n  final FirebaseFirestore _firestore;\r\n\r\n  FirebaseAuthDataSource(this._firebaseAuth, this._firestore);\r\n\r\n  @override\r\n  Future<UserModel> signInWithEmailAndPassword(\r\n    String email,\r\n    String password,\r\n  ) async {\r\n    try {\r\n      final userCredential = await _firebaseAuth.signInWithEmailAndPassword(\r\n        email: email,\r\n        password: password,\r\n      );\r\n\r\n      if (userCredential.user == null) {\r\n        throw const ServerException('User not found');\r\n      }\r\n\r\n      final userDoc = await _firestore\r\n          .collection(FirebaseConstants.usersCollection)\r\n          .doc(userCredential.user!.uid)\r\n          .get();\r\n\r\n      if (!userDoc.exists) {\r\n        throw const ServerException('User data not found');\r\n      }\r\n\r\n      return UserModel.fromFirestore(\r\n        userDoc.data()!,\r\n        userDoc.id,\r\n      );\r\n    } on FirebaseAuthException catch (e) {\r\n      throw ServerException(_mapFirebaseAuthError(e));\r\n    } catch (e) {\r\n      throw ServerException(e.toString());\r\n    }\r\n  }\r\n\r\n  String _mapFirebaseAuthError(FirebaseAuthException e) {\r\n    switch (e.code) {\r\n      case 'invalid-credential':\r\n        return 'Invalid email or password';\r\n      case 'user-disabled':\r\n        return 'This account has been disabled';\r\n      case 'user-not-found':\r\n        return 'No account found with this email';\r\n      case 'wrong-password':\r\n        return 'Incorrect password';\r\n      case 'too-many-requests':\r\n        return 'Too many failed attempts. Please try again later';\r\n      default:\r\n        return e.message ?? 'An authentication error occurred';\r\n    }\r\n  }\r\n\r\n  // Implement other methods...\r\n}\r\n\r\n"
        }
    ]
}