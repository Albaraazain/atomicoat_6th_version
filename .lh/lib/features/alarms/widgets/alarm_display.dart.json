{
    "sourceFile": "lib/features/alarms/widgets/alarm_display.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760283,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/alarm/bloc/alarm_bloc.dart';\r\nimport '../../../blocs/alarm/bloc/alarm_event.dart';\r\nimport '../../../blocs/alarm/bloc/alarm_state.dart';\r\nimport '../models/alarm.dart';\r\n\r\nclass AlarmDisplay extends StatefulWidget {\r\n  @override\r\n  State<AlarmDisplay> createState() => _AlarmDisplayState();\r\n}\r\n\r\nclass _AlarmDisplayState extends State<AlarmDisplay> {\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    context.read<AlarmBloc>().add(LoadAlarms());\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<AlarmBloc, AlarmState>(\r\n      builder: (context, state) {\r\n        if (state.isLoading) {\r\n          return const Center(child: CircularProgressIndicator());\r\n        }\r\n\r\n        return Column(\r\n          children: [\r\n            Padding(\r\n              padding: EdgeInsets.all(16),\r\n              child: Row(\r\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                children: [\r\n                  Text(\r\n                    'Active Alarms',\r\n                    style: Theme.of(context).textTheme.titleLarge,\r\n                  ),\r\n                  if (state.activeAlarms.isNotEmpty)\r\n                    TextButton(\r\n                      onPressed: () => context.read<AlarmBloc>().add(\r\n                            ClearAllAcknowledgedAlarms(),\r\n                          ),\r\n                      child: Text('Acknowledge All'),\r\n                    ),\r\n                ],\r\n              ),\r\n            ),\r\n            Expanded(\r\n              child: state.activeAlarms.isEmpty\r\n                  ? Center(child: Text('No active alarms'))\r\n                  : ListView.builder(\r\n                      itemCount: state.activeAlarms.length,\r\n                      itemBuilder: (context, index) {\r\n                        final alarm = state.activeAlarms[index];\r\n                        return _buildAlarmTile(context, alarm);\r\n                      },\r\n                    ),\r\n            ),\r\n            if (state.error != null)\r\n              Padding(\r\n                padding: EdgeInsets.all(8.0),\r\n                child: Text(\r\n                  state.error!,\r\n                  style: TextStyle(color: Colors.red),\r\n                ),\r\n              ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildAlarmTile(BuildContext context, Alarm alarm) {\r\n    return Card(\r\n      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 4),\r\n      child: ListTile(\r\n        leading: _getAlarmIcon(alarm.severity),\r\n        title: Text(alarm.message),\r\n        subtitle: Text(\r\n          '${alarm.timestamp.toString().split('.')[0]}',\r\n        ),\r\n        trailing: alarm.acknowledged\r\n            ? Icon(Icons.check, color: Colors.green)\r\n            : TextButton(\r\n                child: Text('Acknowledge'),\r\n                onPressed: () {\r\n                  context.read<AlarmBloc>().add(\r\n                        AcknowledgeAlarm(alarm.id),\r\n                      );\r\n                },\r\n              ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _getAlarmIcon(AlarmSeverity severity) {\r\n    switch (severity) {\r\n      case AlarmSeverity.info:\r\n        return Icon(Icons.info, color: Colors.blue);\r\n      case AlarmSeverity.warning:\r\n        return Icon(Icons.warning, color: Colors.orange);\r\n      case AlarmSeverity.critical:\r\n        return Icon(Icons.error, color: Colors.red);\r\n    }\r\n  }\r\n}"
        }
    ]
}