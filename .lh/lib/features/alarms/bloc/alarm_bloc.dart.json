{
    "sourceFile": "lib/features/alarms/bloc/alarm_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734433412856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734455661568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n   final AlarmRepository _repository;\r\n   StreamSubscription? _alarmSubscription;\r\n \r\n-  AlarmBloc(this._repository) : super( AlarmState()) {\r\n+  AlarmBloc(this._repository) : super(AlarmState()) {\r\n     on<LoadAlarms>(_onLoadAlarms);\r\n     on<AddAlarm>(_onAddAlarm);\r\n     on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n     on<ClearAlarm>(_onClearAlarm);\r\n@@ -21,8 +21,10 @@\n     on<SubscribeToAlarms>(_onSubscribeToAlarms);\r\n     on<UnsubscribeFromAlarms>(_onUnsubscribeFromAlarms);\r\n   }\r\n \r\n+  String? get _currentUserId => _authBloc.state.user?.id; // Add helper method\r\n+\r\n   Future<void> _onLoadAlarms(\r\n     LoadAlarms event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n@@ -82,11 +84,10 @@\n \r\n       final alarm = state.activeAlarms.firstWhere((a) => a.id == event.alarmId);\r\n       final acknowledgedAlarm = alarm.copyWith(acknowledged: true);\r\n \r\n-      final updatedActive = state.activeAlarms\r\n-          .where((a) => a.id != event.alarmId)\r\n-          .toList();\r\n+      final updatedActive =\r\n+          state.activeAlarms.where((a) => a.id != event.alarmId).toList();\r\n \r\n       final updatedAcknowledged = [\r\n         ...state.acknowledgedAlarms,\r\n         acknowledgedAlarm,\r\n@@ -110,15 +111,13 @@\n   ) async {\r\n     try {\r\n       await _repository.clearAlarm(event.alarmId);\r\n \r\n-      final updatedActive = state.activeAlarms\r\n-          .where((a) => a.id != event.alarmId)\r\n-          .toList();\r\n+      final updatedActive =\r\n+          state.activeAlarms.where((a) => a.id != event.alarmId).toList();\r\n \r\n-      final updatedAcknowledged = state.acknowledgedAlarms\r\n-          .where((a) => a.id != event.alarmId)\r\n-          .toList();\r\n+      final updatedAcknowledged =\r\n+          state.acknowledgedAlarms.where((a) => a.id != event.alarmId).toList();\r\n \r\n       emit(state.copyWith(\r\n         activeAlarms: updatedActive,\r\n         acknowledgedAlarms: updatedAcknowledged,\r\n@@ -189,5 +188,5 @@\n   Future<void> close() {\r\n     _alarmSubscription?.cancel();\r\n     return super.close();\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1734455678847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,17 @@\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n+import 'package:experiment_planner/features/auth/bloc/auth_bloc.dart';\r\n import '../../../features/alarms/models/alarm.dart';\r\n import '../repository/alarm_repository.dart';\r\n import 'alarm_event.dart';\r\n import 'alarm_state.dart';\r\n \r\n class AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n   final AlarmRepository _repository;\r\n+  final AuthBloc _authBloc; // Add this\r\n   StreamSubscription? _alarmSubscription;\r\n \r\n   AlarmBloc(this._repository) : super(AlarmState()) {\r\n     on<LoadAlarms>(_onLoadAlarms);\r\n"
                },
                {
                    "date": 1734455687162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   final AlarmRepository _repository;\r\n   final AuthBloc _authBloc; // Add this\r\n   StreamSubscription? _alarmSubscription;\r\n \r\n-  AlarmBloc(this._repository) : super(AlarmState()) {\r\n+  AlarmBloc(this._repository, this._authBloc) : super(AlarmState()) {\r\n     on<LoadAlarms>(_onLoadAlarms);\r\n     on<AddAlarm>(_onAddAlarm);\r\n     on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n     on<ClearAlarm>(_onClearAlarm);\r\n"
                },
                {
                    "date": 1734455711035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,22 @@\n   ) async {\r\n     try {\r\n       emit(state.copyWith(isLoading: true));\r\n \r\n-      final activeAlarms = await _repository.getActiveAlarms();\r\n-      final acknowledgedAlarms = await _repository.getAcknowledgedAlarms();\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) {\r\n+        emit(state.copyWith(\r\n+          error: 'User not authenticated',\r\n+          isLoading: false,\r\n+        ));\r\n+        return;\r\n+      }\r\n \r\n+      final activeAlarms = await _repository.getActiveAlarms(userId);\r\n+      final acknowledgedAlarms = await _repository\r\n+          .getAll(userId: userId)\r\n+          .then((alarms) => alarms.where((a) => a.acknowledged).toList());\r\n+\r\n       emit(state.copyWith(\r\n         activeAlarms: activeAlarms,\r\n         acknowledgedAlarms: acknowledgedAlarms,\r\n         isLoading: false,\r\n"
                },
                {
                    "date": 1734455751788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,100 +65,70 @@\n     AddAlarm event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n     try {\r\n-      final newAlarm = Alarm(\r\n-        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) return;\r\n+\r\n+      final id = DateTime.now().millisecondsSinceEpoch.toString();\r\n+      await _repository.createNewAlarm(\r\n+        id: id,\r\n         message: event.message,\r\n         severity: event.severity,\r\n-        timestamp: DateTime.now(),\r\n         isSafetyAlert: event.isSafetyAlert,\r\n+        userId: userId,\r\n       );\r\n \r\n-      await _repository.addAlarm(newAlarm);\r\n-\r\n-      final updatedAlarms = [...state.activeAlarms, newAlarm];\r\n-      emit(state.copyWith(\r\n-        activeAlarms: updatedAlarms,\r\n-        lastUpdate: DateTime.now(),\r\n-      ));\r\n+      if (!emit.isDone) {\r\n+        await _onLoadAlarms(LoadAlarms(), emit);\r\n+      }\r\n     } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-      ));\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n \r\n   Future<void> _onAcknowledgeAlarm(\r\n     AcknowledgeAlarm event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n     try {\r\n-      await _repository.acknowledgeAlarm(event.alarmId);\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) return;\r\n \r\n-      final alarm = state.activeAlarms.firstWhere((a) => a.id == event.alarmId);\r\n-      final acknowledgedAlarm = alarm.copyWith(acknowledged: true);\r\n-\r\n-      final updatedActive =\r\n-          state.activeAlarms.where((a) => a.id != event.alarmId).toList();\r\n-\r\n-      final updatedAcknowledged = [\r\n-        ...state.acknowledgedAlarms,\r\n-        acknowledgedAlarm,\r\n-      ];\r\n-\r\n-      emit(state.copyWith(\r\n-        activeAlarms: updatedActive,\r\n-        acknowledgedAlarms: updatedAcknowledged,\r\n-        lastUpdate: DateTime.now(),\r\n-      ));\r\n+      await _repository.acknowledgeAlarm(event.alarmId, userId);\r\n+      await _onLoadAlarms(LoadAlarms(), emit);\r\n     } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-      ));\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n \r\n   Future<void> _onClearAlarm(\r\n     ClearAlarm event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n     try {\r\n-      await _repository.clearAlarm(event.alarmId);\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) return;\r\n \r\n-      final updatedActive =\r\n-          state.activeAlarms.where((a) => a.id != event.alarmId).toList();\r\n-\r\n-      final updatedAcknowledged =\r\n-          state.acknowledgedAlarms.where((a) => a.id != event.alarmId).toList();\r\n-\r\n-      emit(state.copyWith(\r\n-        activeAlarms: updatedActive,\r\n-        acknowledgedAlarms: updatedAcknowledged,\r\n-        lastUpdate: DateTime.now(),\r\n-      ));\r\n+      await _repository.remove(event.alarmId, userId: userId);\r\n+      await _onLoadAlarms(LoadAlarms(), emit);\r\n     } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-      ));\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n \r\n   Future<void> _onClearAllAcknowledgedAlarms(\r\n     ClearAllAcknowledgedAlarms event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n     try {\r\n-      await _repository.clearAllAcknowledgedAlarms();\r\n+      final userId = _currentUserId;\r\n+      if (userId == null) return;\r\n \r\n-      emit(state.copyWith(\r\n-        acknowledgedAlarms: [],\r\n-        lastUpdate: DateTime.now(),\r\n-      ));\r\n+      await _repository.clearAcknowledged(userId);\r\n+      await _onLoadAlarms(LoadAlarms(), emit);\r\n     } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-      ));\r\n+      emit(state.copyWith(error: BlocUtils.handleError(error)));\r\n     }\r\n   }\r\n \r\n   Future<void> _onSubscribeToAlarms(\r\n"
                },
                {
                    "date": 1734455762594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,18 +134,16 @@\n   Future<void> _onSubscribeToAlarms(\r\n     SubscribeToAlarms event,\r\n     Emitter<AlarmState> emit,\r\n   ) async {\r\n+    final userId = _currentUserId;\r\n+    if (userId == null) return;\r\n+\r\n     await _alarmSubscription?.cancel();\r\n-\r\n-    _alarmSubscription = _repository.watchAlarms().listen(\r\n-      (alarms) {\r\n-        final activeAlarms = alarms.where((a) => !a.acknowledged).toList();\r\n-        final acknowledgedAlarms = alarms.where((a) => a.acknowledged).toList();\r\n-\r\n+    _alarmSubscription = _repository.watchActiveAlarms(userId).listen(\r\n+      (activeAlarms) {\r\n         emit(state.copyWith(\r\n           activeAlarms: activeAlarms,\r\n-          acknowledgedAlarms: acknowledgedAlarms,\r\n           isSubscribed: true,\r\n           lastUpdate: DateTime.now(),\r\n         ));\r\n       },\r\n"
                }
            ],
            "date": 1734433412856,
            "name": "Commit-0",
            "content": "// lib/blocs/alarm/bloc/alarm_bloc.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport 'package:experiment_planner/core/utils/bloc_utils.dart';\r\nimport '../../../features/alarms/models/alarm.dart';\r\nimport '../repository/alarm_repository.dart';\r\nimport 'alarm_event.dart';\r\nimport 'alarm_state.dart';\r\n\r\nclass AlarmBloc extends Bloc<AlarmEvent, AlarmState> {\r\n  final AlarmRepository _repository;\r\n  StreamSubscription? _alarmSubscription;\r\n\r\n  AlarmBloc(this._repository) : super( AlarmState()) {\r\n    on<LoadAlarms>(_onLoadAlarms);\r\n    on<AddAlarm>(_onAddAlarm);\r\n    on<AcknowledgeAlarm>(_onAcknowledgeAlarm);\r\n    on<ClearAlarm>(_onClearAlarm);\r\n    on<ClearAllAcknowledgedAlarms>(_onClearAllAcknowledgedAlarms);\r\n    on<SubscribeToAlarms>(_onSubscribeToAlarms);\r\n    on<UnsubscribeFromAlarms>(_onUnsubscribeFromAlarms);\r\n  }\r\n\r\n  Future<void> _onLoadAlarms(\r\n    LoadAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      final activeAlarms = await _repository.getActiveAlarms();\r\n      final acknowledgedAlarms = await _repository.getAcknowledgedAlarms();\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: activeAlarms,\r\n        acknowledgedAlarms: acknowledgedAlarms,\r\n        isLoading: false,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddAlarm(\r\n    AddAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      final newAlarm = Alarm(\r\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n        message: event.message,\r\n        severity: event.severity,\r\n        timestamp: DateTime.now(),\r\n        isSafetyAlert: event.isSafetyAlert,\r\n      );\r\n\r\n      await _repository.addAlarm(newAlarm);\r\n\r\n      final updatedAlarms = [...state.activeAlarms, newAlarm];\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedAlarms,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAcknowledgeAlarm(\r\n    AcknowledgeAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.acknowledgeAlarm(event.alarmId);\r\n\r\n      final alarm = state.activeAlarms.firstWhere((a) => a.id == event.alarmId);\r\n      final acknowledgedAlarm = alarm.copyWith(acknowledged: true);\r\n\r\n      final updatedActive = state.activeAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      final updatedAcknowledged = [\r\n        ...state.acknowledgedAlarms,\r\n        acknowledgedAlarm,\r\n      ];\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedActive,\r\n        acknowledgedAlarms: updatedAcknowledged,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onClearAlarm(\r\n    ClearAlarm event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.clearAlarm(event.alarmId);\r\n\r\n      final updatedActive = state.activeAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      final updatedAcknowledged = state.acknowledgedAlarms\r\n          .where((a) => a.id != event.alarmId)\r\n          .toList();\r\n\r\n      emit(state.copyWith(\r\n        activeAlarms: updatedActive,\r\n        acknowledgedAlarms: updatedAcknowledged,\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onClearAllAcknowledgedAlarms(\r\n    ClearAllAcknowledgedAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    try {\r\n      await _repository.clearAllAcknowledgedAlarms();\r\n\r\n      emit(state.copyWith(\r\n        acknowledgedAlarms: [],\r\n        lastUpdate: DateTime.now(),\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSubscribeToAlarms(\r\n    SubscribeToAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    await _alarmSubscription?.cancel();\r\n\r\n    _alarmSubscription = _repository.watchAlarms().listen(\r\n      (alarms) {\r\n        final activeAlarms = alarms.where((a) => !a.acknowledged).toList();\r\n        final acknowledgedAlarms = alarms.where((a) => a.acknowledged).toList();\r\n\r\n        emit(state.copyWith(\r\n          activeAlarms: activeAlarms,\r\n          acknowledgedAlarms: acknowledgedAlarms,\r\n          isSubscribed: true,\r\n          lastUpdate: DateTime.now(),\r\n        ));\r\n      },\r\n      onError: (error) {\r\n        emit(state.copyWith(\r\n          error: BlocUtils.handleError(error),\r\n          isSubscribed: false,\r\n        ));\r\n      },\r\n    );\r\n  }\r\n\r\n  Future<void> _onUnsubscribeFromAlarms(\r\n    UnsubscribeFromAlarms event,\r\n    Emitter<AlarmState> emit,\r\n  ) async {\r\n    await _alarmSubscription?.cancel();\r\n    _alarmSubscription = null;\r\n    emit(state.copyWith(isSubscribed: false));\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _alarmSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}