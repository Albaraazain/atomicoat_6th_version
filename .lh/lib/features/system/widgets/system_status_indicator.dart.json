{
    "sourceFile": "lib/features/system/widgets/system_status_indicator.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376761208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376761208,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/alarm/bloc/alarm_bloc.dart';\r\nimport '../../../blocs/alarm/bloc/alarm_state.dart';\r\nimport '../../../blocs/system_state/bloc/system_state_bloc.dart';\r\nimport '../../../blocs/system_state/bloc/system_state_state.dart';\r\nimport '../../alarms/models/alarm.dart';\r\n\r\nclass SystemStatusIndicator extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<SystemStateBloc, SystemStateState>(\r\n      builder: (context, systemState) {\r\n        return BlocBuilder<AlarmBloc, AlarmState>(\r\n          builder: (context, alarmState) {\r\n            final status = _determineSystemStatus(systemState, alarmState);\r\n            return GestureDetector(\r\n              onTap: () => _showStatusDetails(context, status, systemState, alarmState),\r\n              child: Row(\r\n                children: [\r\n                  Icon(\r\n                    _getStatusIcon(status),\r\n                    color: _getStatusColor(status),\r\n                    size: 16,\r\n                  ),\r\n                  SizedBox(width: 8),\r\n                  Text(\r\n                    _getStatusText(status),\r\n                    style: TextStyle(\r\n                      color: _getStatusColor(status),\r\n                      fontWeight: FontWeight.bold,\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  SystemStatus _determineSystemStatus(SystemStateState systemState, AlarmState alarmState) {\r\n    if (alarmState.hasCriticalAlarms) {\r\n      return SystemStatus.error;\r\n    } else if (alarmState.hasActiveAlarms) {\r\n      return SystemStatus.warning;\r\n    } else if (systemState.isSystemRunning) {\r\n      return SystemStatus.running;\r\n    } else if (systemState.isReadinessCheckPassed) {\r\n      return SystemStatus.ready;\r\n    } else {\r\n      return SystemStatus.stopped;\r\n    }\r\n  }\r\n\r\n  IconData _getStatusIcon(SystemStatus status) {\r\n    switch (status) {\r\n      case SystemStatus.running:\r\n        return Icons.play_circle_outline;\r\n      case SystemStatus.ready:\r\n        return Icons.check_circle_outline;\r\n      case SystemStatus.stopped:\r\n        return Icons.stop_circle_outlined;\r\n      case SystemStatus.warning:\r\n        return Icons.warning_amber_rounded;\r\n      case SystemStatus.error:\r\n        return Icons.error_outline;\r\n    }\r\n  }\r\n\r\n  Color _getStatusColor(SystemStatus status) {\r\n    switch (status) {\r\n      case SystemStatus.running:\r\n        return Colors.green;\r\n      case SystemStatus.ready:\r\n        return Colors.blue;\r\n      case SystemStatus.stopped:\r\n        return Colors.grey;\r\n      case SystemStatus.warning:\r\n        return Colors.orange;\r\n      case SystemStatus.error:\r\n        return Colors.red;\r\n    }\r\n  }\r\n\r\n  String _getStatusText(SystemStatus status) {\r\n    switch (status) {\r\n      case SystemStatus.running:\r\n        return 'Running';\r\n      case SystemStatus.ready:\r\n        return 'Ready';\r\n      case SystemStatus.stopped:\r\n        return 'Stopped';\r\n      case SystemStatus.warning:\r\n        return 'Warning';\r\n      case SystemStatus.error:\r\n        return 'Error';\r\n    }\r\n  }\r\n\r\n  void _showStatusDetails(\r\n    BuildContext context,\r\n    SystemStatus status,\r\n    SystemStateState systemState,\r\n    AlarmState alarmState,\r\n  ) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text('System Status Details'),\r\n          content: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              Text('Status: ${_getStatusText(status)}'),\r\n              SizedBox(height: 8),\r\n              Text('Is Running: ${systemState.isSystemRunning}'),\r\n              Text('Active Recipe: ${systemState.currentSystemState['activeRecipe']?.name ?? 'None'}'),\r\n              Text('Current Step: ${systemState.currentSystemState['currentStepIndex'] ?? 0}/${systemState.currentSystemState['totalSteps'] ?? 0}'),\r\n              SizedBox(height: 8),\r\n              Text('Active Alarms: ${alarmState.activeAlarms.length}'),\r\n              Text('Critical Alarms: ${alarmState.criticalAlarms.length}'),\r\n            ],\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Close'),\r\n              onPressed: () {\r\n                Navigator.of(context).pop();\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nenum SystemStatus {\r\n  running,\r\n  ready,\r\n  stopped,\r\n  warning,\r\n  error,\r\n}"
        }
    ]
}