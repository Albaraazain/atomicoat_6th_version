{
    "sourceFile": "lib/features/system/repositories/user_system_state_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734457005932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734458303389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,16 @@\n           'isActivated': component.isActivated,\r\n         });\r\n   }\r\n \r\n+  Future<void> saveSystemState(SystemStateData state, {required String userId}) async {\r\n+    try {\r\n+      await getUserCollection(userId).doc(state.id).set(state.toJson());\r\n+    } catch (e) {\r\n+      throw Exception('Failed to save system state: ${e.toString()}');\r\n+    }\r\n+  }\r\n+\r\n   Future<List<SystemComponent>> getAllComponents({required String userId}) async {\r\n     final doc = await getUserCollection(userId).doc('components').get();\r\n     if (!doc.exists) return [];\r\n \r\n"
                }
            ],
            "date": 1734457005932,
            "name": "Commit-0",
            "content": "// lib/features/system/repositories/user_system_state_repository.dart\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:experiment_planner/shared/base/base_repository.dart';\r\nimport '../models/system_state_data.dart';\r\nimport '../../components/models/system_component.dart';\r\nimport '../../log/models/system_log_entry.dart';\r\n\r\nclass UserSystemStateRepository extends BaseRepository<SystemStateData> {\r\n  UserSystemStateRepository() : super('system_states');\r\n\r\n  @override\r\n  SystemStateData fromJson(Map<String, dynamic> json) => SystemStateData.fromJson(json);\r\n\r\n  Future<void> saveComponentState(\r\n    SystemComponent component,\r\n    {required String userId}\r\n  ) async {\r\n    final collection = getUserCollection(userId).doc('components');\r\n\r\n    await collection.set({\r\n      component.name: {\r\n        ...component.toJson(),\r\n        'timestamp': FieldValue.serverTimestamp(),\r\n      }\r\n    }, SetOptions(merge: true));\r\n\r\n    // Save history\r\n    await collection\r\n        .collection('history')\r\n        .add({\r\n          'componentId': component.name,\r\n          'timestamp': FieldValue.serverTimestamp(),\r\n          'currentValues': component.currentValues,\r\n          'setValues': component.setValues,\r\n          'isActivated': component.isActivated,\r\n        });\r\n  }\r\n\r\n  Future<List<SystemComponent>> getAllComponents({required String userId}) async {\r\n    final doc = await getUserCollection(userId).doc('components').get();\r\n    if (!doc.exists) return [];\r\n\r\n    final data = doc.data() as Map<String, dynamic>;\r\n    return data.entries.map((entry) =>\r\n      SystemComponent.fromJson({\r\n        ...entry.value as Map<String, dynamic>,\r\n        'name': entry.key,\r\n      })\r\n    ).toList();\r\n  }\r\n\r\n  Future<SystemComponent?> getComponentByName(\r\n    String name,\r\n    {required String userId}\r\n  ) async {\r\n    final doc = await getUserCollection(userId).doc('components').get();\r\n    if (!doc.exists) return null;\r\n\r\n    final data = doc.data() as Map<String, dynamic>;\r\n    final componentData = data[name] as Map<String, dynamic>?;\r\n    if (componentData == null) return null;\r\n\r\n    return SystemComponent.fromJson({\r\n      ...componentData,\r\n      'name': name,\r\n    });\r\n  }\r\n\r\n  Future<List<Map<String, dynamic>>> getComponentHistory(\r\n    String componentName,\r\n    DateTime start,\r\n    DateTime end,\r\n    {required String userId}\r\n  ) async {\r\n    final snapshot = await getUserCollection(userId)\r\n        .doc('components')\r\n        .collection('history')\r\n        .where('componentId', isEqualTo: componentName)\r\n        .where('timestamp', isGreaterThanOrEqualTo: start)\r\n        .where('timestamp', isLessThanOrEqualTo: end)\r\n        .orderBy('timestamp', descending: true)\r\n        .get();\r\n\r\n    return snapshot.docs\r\n        .map((doc) => doc.data())\r\n        .toList();\r\n  }\r\n\r\n  Future<void> addLogEntry(\r\n    SystemLogEntry logEntry,\r\n    {required String userId}\r\n  ) async {\r\n    await getUserCollection(userId)\r\n        .doc('logs')\r\n        .collection('entries')\r\n        .add(logEntry.toJson());\r\n  }\r\n\r\n  Future<List<SystemLogEntry>> getSystemLogs({\r\n    required String userId,\r\n    int limit = 100\r\n  }) async {\r\n    final snapshot = await getUserCollection(userId)\r\n        .doc('logs')\r\n        .collection('entries')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(limit)\r\n        .get();\r\n\r\n    return snapshot.docs\r\n        .map((doc) => SystemLogEntry.fromJson(doc.data()))\r\n        .toList();\r\n  }\r\n}"
        }
    ]
}