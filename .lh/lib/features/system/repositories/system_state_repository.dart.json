{
    "sourceFile": "lib/features/system/repositories/system_state_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376761202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376761202,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../../safety/models/safety_error.dart';\r\nimport '../../components/models/system_component.dart';\r\nimport '../../log/models/system_log_entry.dart';\r\nimport '../../../blocs/system_state/models/system_state_data.dart';\r\n\r\nclass SystemStateRepository {\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n\r\n  CollectionReference _getUserCollection(String userId, String collectionName) {\r\n    return _firestore.collection('users').doc(userId).collection(collectionName);\r\n  }\r\n\r\n  Future<void> saveComponentState(String userId, SystemComponent component) async {\r\n    await _getUserCollection(userId, 'system_components').doc(component.name).set({\r\n      ...component.toJson(),\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n    }, SetOptions(merge: true));\r\n\r\n    // Save historical data\r\n    await _getUserCollection(userId, 'system_components')\r\n        .doc(component.name)\r\n        .collection('history')\r\n        .add({\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n      'currentValues': component.currentValues,\r\n      'setValues': component.setValues,\r\n      'isActivated': component.isActivated,\r\n    });\r\n  }\r\n\r\n  Future<void> saveSystemState(Map<String, dynamic> stateData) async {\r\n    String id = DateTime.now().millisecondsSinceEpoch.toString();\r\n    await _firestore.collection('system_states').doc(id).set({\r\n      ...stateData,\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n    });\r\n  }\r\n\r\n  Future<SystemStateData?> getLatestState() async {\r\n    final snapshot = await _firestore\r\n        .collection('system_states')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(1)\r\n        .get();\r\n\r\n    if (snapshot.docs.isEmpty) return null;\r\n\r\n    final doc = snapshot.docs.first;\r\n    return SystemStateData(\r\n      id: doc.id,\r\n      data: doc.data(),\r\n      timestamp: (doc.data()['timestamp'] as Timestamp).toDate(),\r\n    );\r\n  }\r\n\r\n  Stream<SystemStateData> watchSystemState() {\r\n    return _firestore\r\n        .collection('system_states')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(1)\r\n        .snapshots()\r\n        .map((snapshot) {\r\n      final doc = snapshot.docs.first;\r\n      return SystemStateData(\r\n        id: doc.id,\r\n        data: doc.data(),\r\n        timestamp: (doc.data()['timestamp'] as Timestamp).toDate(),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<SystemStateData?> getSystemState() async {\r\n    final snapshot = await _firestore\r\n        .collection('system_states')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(1)\r\n        .get();\r\n\r\n    if (snapshot.docs.isEmpty) return null;\r\n\r\n    final doc = snapshot.docs.first;\r\n    return SystemStateData(\r\n      id: doc.id,\r\n      data: doc.data(),\r\n      timestamp: (doc.data()['timestamp'] as Timestamp).toDate(),\r\n    );\r\n  }\r\n\r\n  Stream<SystemStateData?> systemStateStream() {\r\n    return _firestore\r\n        .collection('system_states')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(1)\r\n        .snapshots()\r\n        .map((snapshot) {\r\n      if (snapshot.docs.isEmpty) return null;\r\n      final doc = snapshot.docs.first;\r\n      return SystemStateData(\r\n        id: doc.id,\r\n        data: doc.data(),\r\n        timestamp: (doc.data()['timestamp'] as Timestamp).toDate(),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> addLogEntry(String userId, SystemLogEntry logEntry) async {\r\n    await _getUserCollection(userId, 'system_logs').add(logEntry.toJson());\r\n  }\r\n\r\n  Future<List<SystemComponent>> getAllComponents(String userId) async {\r\n    QuerySnapshot snapshot = await _getUserCollection(userId, 'system_components').get();\r\n    return snapshot.docs\r\n        .map((doc) => SystemComponent.fromJson(doc.data() as Map<String, dynamic>))\r\n        .toList();\r\n  }\r\n\r\n  Future<void> saveComponent(String userId, SystemComponent component) async {\r\n    await _getUserCollection(userId, 'system_components').doc(component.name).set(component.toJson());\r\n  }\r\n\r\n  Future<SystemComponent?> getComponentByName(String userId, String name) async {\r\n    DocumentSnapshot doc = await _getUserCollection(userId, 'system_components').doc(name).get();\r\n    if (doc.exists) {\r\n      return SystemComponent.fromJson(doc.data() as Map<String, dynamic>);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  Future<List<SystemLogEntry>> getAllLogs(String userId) async {\r\n    QuerySnapshot snapshot = await _getUserCollection(userId, 'system_logs').get();\r\n    return snapshot.docs\r\n        .map((doc) => SystemLogEntry.fromJson(doc.data() as Map<String, dynamic>))\r\n        .toList();\r\n  }\r\n\r\n  Future<List<SafetyError>> getAllSafetyErrors(String userId) async {\r\n    QuerySnapshot snapshot = await _getUserCollection(userId, 'safety_errors').get();\r\n    return snapshot.docs\r\n        .map((doc) => SafetyError.fromJson(doc.data() as Map<String, dynamic>))\r\n        .toList();\r\n  }\r\n\r\n  Future<void> saveSafetyError(String userId, SafetyError safetyError) async {\r\n    await _getUserCollection(userId, 'safety_errors').doc(safetyError.id).set(safetyError.toJson());\r\n  }\r\n\r\n  Future<void> removeSafetyError(String userId, String id) async {\r\n    await _getUserCollection(userId, 'safety_errors').doc(id).delete();\r\n  }\r\n\r\n  Future<List<Map<String, dynamic>>> getComponentHistory(String userId, String componentName, DateTime start, DateTime end) async {\r\n    final snapshot = await _getUserCollection(userId, 'system_components')\r\n        .doc(componentName)\r\n        .collection('history')\r\n        .where('timestamp', isGreaterThanOrEqualTo: start)\r\n        .where('timestamp', isLessThanOrEqualTo: end)\r\n        .get();\r\n\r\n    return snapshot.docs.map((doc) => doc.data()).toList();\r\n  }\r\n\r\n  Future<List<SystemLogEntry>> getSystemLog(String userId) async {\r\n    QuerySnapshot snapshot = await _getUserCollection(userId, 'system_logs')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(100) // Limit to last 100 entries, adjust as needed\r\n        .get();\r\n\r\n    return snapshot.docs\r\n        .map((doc) => SystemLogEntry.fromJson(doc.data() as Map<String, dynamic>))\r\n        .toList();\r\n  }\r\n}"
        }
    ]
}