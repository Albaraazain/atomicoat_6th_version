{
    "sourceFile": "lib/features/system/screens/admin_dashboard_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376765315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376765315,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../../auth/providers/auth_provider.dart';\r\nimport '../../auth/repositories/user_request_repository.dart';\r\nimport '../../auth/repositories/user_repository.dart';\r\nimport '../../../core/enums/user_role.dart';\r\nimport '../../auth/services/auth_service.dart';\r\n\r\n// Import all the necessary screens\r\n\r\nclass AdminDashboardScreen extends StatefulWidget {\r\n  @override\r\n  _AdminDashboardScreenState createState() => _AdminDashboardScreenState();\r\n}\r\n\r\nclass _AdminDashboardScreenState extends State<AdminDashboardScreen> with SingleTickerProviderStateMixin {\r\n  final UserRequestRepository _userRequestRepository = UserRequestRepository();\r\n  final UserRepository _userRepository = UserRepository();\r\n  late AuthService _authService;\r\n  late TabController _tabController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _authService = Provider.of<AuthService>(context, listen: false);\r\n    _tabController = TabController(length: 2, vsync: this);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _tabController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final authProvider = Provider.of<AuthProvider>(context);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Admin Dashboard'),\r\n        leading: IconButton(\r\n          icon: Icon(Icons.menu),\r\n          onPressed: () {\r\n            Scaffold.of(context).openDrawer();\r\n          },\r\n        ),\r\n        actions: [\r\n          IconButton(\r\n            icon: Icon(Icons.notifications),\r\n            onPressed: () {\r\n              ScaffoldMessenger.of(context).showSnackBar(\r\n                SnackBar(content: Text('Notifications not implemented yet')),\r\n              );\r\n            },\r\n          ),\r\n          IconButton(\r\n            icon: Icon(Icons.logout),\r\n            onPressed: () async {\r\n              await authProvider.signOut();\r\n            },\r\n          ),\r\n        ],\r\n        bottom: TabBar(\r\n          controller: _tabController,\r\n          tabs: [\r\n            Tab(icon: Icon(Icons.pending), text: 'Pending Requests'),\r\n            Tab(icon: Icon(Icons.people), text: 'Manage Users'),\r\n          ],\r\n        ),\r\n      ),\r\n      body: TabBarView(\r\n        controller: _tabController,\r\n        children: [\r\n          _buildPendingRequestsTab(),\r\n          _buildManageUsersTab(),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n\r\n  Widget _buildPendingRequestsTab() {\r\n    return FutureBuilder<List<UserRequest>>(\r\n      future: _userRequestRepository.getPendingRequests(),\r\n      builder: (context, snapshot) {\r\n        if (snapshot.connectionState == ConnectionState.waiting) {\r\n          return Center(child: CircularProgressIndicator());\r\n        } else if (snapshot.hasError) {\r\n          return Center(child: Text('Error: ${snapshot.error}'));\r\n        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n          return Center(child: Text('No pending requests'));\r\n        } else {\r\n          return ListView.builder(\r\n            itemCount: snapshot.data!.length,\r\n            itemBuilder: (context, index) {\r\n              final request = snapshot.data![index];\r\n              return ListTile(\r\n                title: Text(request.name),\r\n                subtitle: Text(request.email),\r\n                trailing: Row(\r\n                  mainAxisSize: MainAxisSize.min,\r\n                  children: [\r\n                    ElevatedButton(\r\n                      onPressed: () => _approveUser(request),\r\n                      child: Text('Approve'),\r\n                    ),\r\n                    SizedBox(width: 8),\r\n                    ElevatedButton(\r\n                      onPressed: () => _denyUser(request),\r\n                      child: Text('Deny'),\r\n                      style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\r\n                    ),\r\n                  ],\r\n                ),\r\n              );\r\n            },\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n\r\n  Widget _buildContent() {\r\n    return DefaultTabController(\r\n      length: 2,\r\n      child: Material( // Add this Material widget\r\n        child: Column(\r\n          children: [\r\n            TabBar(\r\n              tabs: [\r\n                Tab(icon: Icon(Icons.pending), text: 'Pending Requests'),\r\n                Tab(icon: Icon(Icons.people), text: 'Manage Users'),\r\n              ],\r\n            ),\r\n            Expanded(\r\n              child: TabBarView(\r\n                children: [\r\n                  _buildPendingRequestsTab(),\r\n                  _buildManageUsersTab(),\r\n                ],\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n\r\n  Widget _buildManageUsersTab() {\r\n    return FutureBuilder<List<User>>(\r\n      future: _userRepository.getAllUsers(),\r\n      builder: (context, snapshot) {\r\n        if (snapshot.connectionState == ConnectionState.waiting) {\r\n          return Center(child: CircularProgressIndicator());\r\n        } else if (snapshot.hasError) {\r\n          return Center(child: Text('Error: ${snapshot.error}'));\r\n        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n          return Center(child: Text('No users found'));\r\n        } else {\r\n          return ListView.builder(\r\n            itemCount: snapshot.data!.length,\r\n            itemBuilder: (context, index) {\r\n              final user = snapshot.data![index];\r\n              return FutureBuilder<UserRole?>(\r\n                future: _authService.getUserRole(user.id),\r\n                builder: (context, roleSnapshot) {\r\n                  if (roleSnapshot.connectionState == ConnectionState.waiting) {\r\n                    return ListTile(title: Text(user.name), subtitle: Text('Loading...'));\r\n                  }\r\n                  final userRole = roleSnapshot.data ?? UserRole.user;\r\n                  return ListTile(\r\n                    title: Text(user.name),\r\n                    subtitle: Text(user.email),\r\n                    trailing: Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [\r\n                        DropdownButton<UserRole>(\r\n                          value: userRole,\r\n                          onChanged: (UserRole? newRole) {\r\n                            if (newRole != null) {\r\n                              _updateUserRole(user.id, newRole);\r\n                            }\r\n                          },\r\n                          items: UserRole.values.map((UserRole role) {\r\n                            return DropdownMenuItem<UserRole>(\r\n                              value: role,\r\n                              child: Text(role.toString().split('.').last),\r\n                            );\r\n                          }).toList(),\r\n                        ),\r\n                        SizedBox(width: 8),\r\n                        ElevatedButton(\r\n                          onPressed: user.status == 'active'\r\n                              ? () => _deactivateUser(user.id)\r\n                              : () => _activateUser(user.id),\r\n                          child: Text(user.status == 'active' ? 'Deactivate' : 'Activate'),\r\n                          style: ElevatedButton.styleFrom(\r\n                            backgroundColor: user.status == 'active' ? Colors.red : Colors.green,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  );\r\n                },\r\n              );\r\n            },\r\n          );\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n\r\n  void _approveUser(UserRequest request) async {\r\n    await _userRequestRepository.updateUserRequestStatus(request.userId, UserRequestStatus.approved);\r\n    await _authService.updateUserStatus(request.userId, 'active');\r\n    setState(() {});\r\n  }\r\n\r\n  void _denyUser(UserRequest request) async {\r\n    await _userRequestRepository.updateUserRequestStatus(request.userId, UserRequestStatus.denied);\r\n    await _authService.updateUserStatus(request.userId, 'denied');\r\n    setState(() {});\r\n  }\r\n\r\n  void _updateUserRole(String userId, UserRole newRole) async {\r\n    await _authService.updateUserRole(userId, newRole);\r\n    setState(() {});\r\n  }\r\n\r\n  void _deactivateUser(String userId) async {\r\n    await _authService.updateUserStatus(userId, 'inactive');\r\n    setState(() {});\r\n  }\r\n\r\n\r\n  void _activateUser(String userId) async {\r\n    await _authService.updateUserStatus(userId, 'active');\r\n    setState(() {});\r\n  }\r\n}"
        }
    ]
}