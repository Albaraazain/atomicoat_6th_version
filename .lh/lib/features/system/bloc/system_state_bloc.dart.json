{
    "sourceFile": "lib/features/system/bloc/system_state_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1734376765315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734430806821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n ^// *(lib|path)// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n-import '../../utils/bloc_utils.dart';\r\n import '../models/system_state_data.dart';\r\n import 'system_state_event.dart';\r\n import 'system_state_state.dart';\r\n \r\n"
                },
                {
                    "date": 1734430830823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,343 @@\n+^// *(lib|path)// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n+\r\n+import 'dart:async';\r\n+import 'package:bloc/bloc.dart';\r\n+import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n+import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n+import '../models/system_state_data.dart';\r\n+import 'system_state_event.dart';\r\n+import 'system_state_state.dart';\r\n+\r\n+class SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n+  final SystemStateRepository _repository;\r\n+  StreamSubscription? _stateSubscription;\r\n+\r\n+  SystemStateBloc(this._repository) : super(SystemStateState()) {\r\n+    on<InitializeSystem>(_onInitializeSystem);\r\n+    on<StartSystem>(_onStartSystem);\r\n+    on<StopSystem>(_onStopSystem);\r\n+    on<EmergencyStop>(_onEmergencyStop);\r\n+    on<CheckSystemReadiness>(_onCheckSystemReadiness);\r\n+    on<SaveSystemState>(_onSaveSystemState);\r\n+    on<ValidateSystemState>(_onValidateSystemState);\r\n+    on<UpdateSystemParameters>(_onUpdateSystemParameters);\r\n+  }\r\n+\r\n+  Future<void> _onInitializeSystem(\r\n+    InitializeSystem event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.initializing,\r\n+        isLoading: true,\r\n+      ));\r\n+\r\n+      // Load the latest state\r\n+      final latestState = await _repository.getSystemState();\r\n+\r\n+      if (latestState != null) {\r\n+        emit(state.copyWith(\r\n+          status: SystemOperationalStatus.ready,\r\n+          currentSystemState: latestState.data,\r\n+          lastStateUpdate: latestState.timestamp,\r\n+          isLoading: false,\r\n+        ));\r\n+      } else {\r\n+        emit(state.copyWith(\r\n+          status: SystemOperationalStatus.ready,\r\n+          isLoading: false,\r\n+        ));\r\n+      }\r\n+\r\n+      // Setup state subscription\r\n+      await _stateSubscription?.cancel();\r\n+      _stateSubscription = _repository.systemStateStream().listen(\r\n+        (systemState) {\r\n+          if (systemState != null) {\r\n+            add(SaveSystemState(systemState.data));\r\n+          }\r\n+        },\r\n+        onError: (error) {\r\n+          add(SaveSystemState({'error': error.toString()}));\r\n+        },\r\n+      );\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.error,\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onStartSystem(\r\n+    StartSystem event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    if (!state.canStart) {\r\n+      emit(state.copyWith(\r\n+        error: 'System cannot be started in current state',\r\n+      ));\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      await _repository.saveSystemState({\r\n+        'status': 'running',\r\n+        'isSystemRunning': true,\r\n+        'timestamp': DateTime.now().toIso8601String(),\r\n+      });\r\n+\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.running,\r\n+        isSystemRunning: true,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onStopSystem(\r\n+    StopSystem event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    if (!state.canStop) {\r\n+      emit(state.copyWith(\r\n+        error: 'System is not running',\r\n+      ));\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      await _repository.saveSystemState({\r\n+        'status': 'ready',\r\n+        'isSystemRunning': false,\r\n+        'timestamp': DateTime.now().toIso8601String(),\r\n+      });\r\n+\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.ready,\r\n+        isSystemRunning: false,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onEmergencyStop(\r\n+    EmergencyStop event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      await _repository.saveSystemState({\r\n+        ...state.currentSystemState,\r\n+        'isRunning': false,\r\n+        'emergencyStoppedAt': DateTime.now().toIso8601String(),\r\n+        'timestamp': DateTime.now().toIso8601String(),\r\n+      });\r\n+\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.emergencyStopped,\r\n+        isSystemRunning: false,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onCheckSystemReadiness(\r\n+    CheckSystemReadiness event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      // Implement system readiness checks here\r\n+      final issues = _checkSystemIssues();\r\n+\r\n+      emit(state.copyWith(\r\n+        systemIssues: issues,\r\n+        isReadinessCheckPassed: issues.isEmpty,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onSaveSystemState(\r\n+    SaveSystemState event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      await _repository.saveSystemState({\r\n+        ...event.state,\r\n+        'timestamp': DateTime.now().toIso8601String(),\r\n+      });\r\n+\r\n+      emit(state.copyWith(\r\n+        currentSystemState: event.state,\r\n+        lastStateUpdate: DateTime.now(),\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onValidateSystemState(\r\n+    ValidateSystemState event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      // Implement state validation logic here\r\n+      final issues = _validateCurrentState();\r\n+\r\n+      emit(state.copyWith(\r\n+        systemIssues: issues,\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _onUpdateSystemParameters(\r\n+    UpdateSystemParameters event,\r\n+    Emitter<SystemStateState> emit,\r\n+  ) async {\r\n+    try {\r\n+      emit(state.copyWith(isLoading: true));\r\n+\r\n+      final updatedState = Map<String, dynamic>.from(state.currentSystemState);\r\n+      event.updates.forEach((component, values) {\r\n+        if (updatedState.containsKey('components')) {\r\n+          final components = updatedState['components'] as Map<String, dynamic>;\r\n+          if (components.containsKey(component)) {\r\n+            final componentData = components[component] as Map<String, dynamic>;\r\n+            componentData['currentValues'] = values;\r\n+          }\r\n+        }\r\n+      });\r\n+\r\n+      await _repository.saveSystemState(updatedState);\r\n+\r\n+      emit(state.copyWith(\r\n+        currentSystemState: updatedState,\r\n+        lastStateUpdate: DateTime.now(),\r\n+        isLoading: false,\r\n+      ));\r\n+    } catch (error) {\r\n+      emit(state.copyWith(\r\n+        error: BlocUtils.handleError(error),\r\n+        isLoading: false,\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  List<String> _checkSystemIssues() {\r\n+    final issues = <String>[];\r\n+\r\n+    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n+\r\n+    if (components == null || components.isEmpty) {\r\n+      issues.add('No components found in system');\r\n+      return issues;\r\n+    }\r\n+\r\n+    components.forEach((componentName, componentData) {\r\n+      final data = componentData as Map<String, dynamic>;\r\n+      final isActivated = data['isActivated'] as bool? ?? false;\r\n+      final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n+      final setValues = data['setValues'] as Map<String, dynamic>?;\r\n+\r\n+      if (!isActivated) {\r\n+        issues.add('$componentName is not activated');\r\n+      }\r\n+\r\n+      if (currentValues != null && setValues != null) {\r\n+        currentValues.forEach((parameter, value) {\r\n+          final setValue = setValues[parameter];\r\n+          if (setValue != null && (value as num).abs() - (setValue as num).abs() > 0.1) {\r\n+            issues.add('$componentName: $parameter mismatch (current: $value, set: $setValue)');\r\n+          }\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    return issues;\r\n+  }\r\n+\r\n+  List<String> _validateCurrentState() {\r\n+    final issues = <String>[];\r\n+\r\n+    if (!state.isSystemRunning && state.status == SystemOperationalStatus.running) {\r\n+      issues.add('System status inconsistency detected');\r\n+    }\r\n+\r\n+    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n+    if (components != null) {\r\n+      components.forEach((componentName, componentData) {\r\n+        final data = componentData as Map<String, dynamic>;\r\n+        final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n+        final minValues = data['minValues'] as Map<String, dynamic>?;\r\n+        final maxValues = data['maxValues'] as Map<String, dynamic>?;\r\n+\r\n+        if (currentValues != null && minValues != null && maxValues != null) {\r\n+          currentValues.forEach((parameter, value) {\r\n+            final min = minValues[parameter] as num?;\r\n+            final max = maxValues[parameter] as num?;\r\n+            final current = value as num;\r\n+\r\n+            if (min != null && current < min) {\r\n+              issues.add('$componentName: $parameter below minimum ($current < $min)');\r\n+            }\r\n+            if (max != null && current > max) {\r\n+              issues.add('$componentName: $parameter above maximum ($current > $max)');\r\n+            }\r\n+          });\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    return issues;\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> close() {\r\n+    _stateSubscription?.cancel();\r\n+    return super.close();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734430841760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,348 +339,5 @@\n   Future<void> close() {\r\n     _stateSubscription?.cancel();\r\n     return super.close();\r\n   }\r\n-}\n-^// *(lib|path)// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n-\r\n-import 'dart:async';\r\n-import 'package:bloc/bloc.dart';\r\n-import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n-import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n-import '../models/system_state_data.dart';\r\n-import 'system_state_event.dart';\r\n-import 'system_state_state.dart';\r\n-\r\n-class SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n-  final SystemStateRepository _repository;\r\n-  StreamSubscription? _stateSubscription;\r\n-\r\n-  SystemStateBloc(this._repository) : super(SystemStateState()) {\r\n-    on<InitializeSystem>(_onInitializeSystem);\r\n-    on<StartSystem>(_onStartSystem);\r\n-    on<StopSystem>(_onStopSystem);\r\n-    on<EmergencyStop>(_onEmergencyStop);\r\n-    on<CheckSystemReadiness>(_onCheckSystemReadiness);\r\n-    on<SaveSystemState>(_onSaveSystemState);\r\n-    on<ValidateSystemState>(_onValidateSystemState);\r\n-    on<UpdateSystemParameters>(_onUpdateSystemParameters);\r\n-  }\r\n-\r\n-  Future<void> _onInitializeSystem(\r\n-    InitializeSystem event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(\r\n-        status: SystemOperationalStatus.initializing,\r\n-        isLoading: true,\r\n-      ));\r\n-\r\n-      // Load the latest state\r\n-      final latestState = await _repository.getSystemState();\r\n-\r\n-      if (latestState != null) {\r\n-        emit(state.copyWith(\r\n-          status: SystemOperationalStatus.ready,\r\n-          currentSystemState: latestState.data,\r\n-          lastStateUpdate: latestState.timestamp,\r\n-          isLoading: false,\r\n-        ));\r\n-      } else {\r\n-        emit(state.copyWith(\r\n-          status: SystemOperationalStatus.ready,\r\n-          isLoading: false,\r\n-        ));\r\n-      }\r\n-\r\n-      // Setup state subscription\r\n-      await _stateSubscription?.cancel();\r\n-      _stateSubscription = _repository.systemStateStream().listen(\r\n-        (systemState) {\r\n-          if (systemState != null) {\r\n-            add(SaveSystemState(systemState.data));\r\n-          }\r\n-        },\r\n-        onError: (error) {\r\n-          add(SaveSystemState({'error': error.toString()}));\r\n-        },\r\n-      );\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        status: SystemOperationalStatus.error,\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onStartSystem(\r\n-    StartSystem event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    if (!state.canStart) {\r\n-      emit(state.copyWith(\r\n-        error: 'System cannot be started in current state',\r\n-      ));\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      await _repository.saveSystemState({\r\n-        'status': 'running',\r\n-        'isSystemRunning': true,\r\n-        'timestamp': DateTime.now().toIso8601String(),\r\n-      });\r\n-\r\n-      emit(state.copyWith(\r\n-        status: SystemOperationalStatus.running,\r\n-        isSystemRunning: true,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onStopSystem(\r\n-    StopSystem event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    if (!state.canStop) {\r\n-      emit(state.copyWith(\r\n-        error: 'System is not running',\r\n-      ));\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      await _repository.saveSystemState({\r\n-        'status': 'ready',\r\n-        'isSystemRunning': false,\r\n-        'timestamp': DateTime.now().toIso8601String(),\r\n-      });\r\n-\r\n-      emit(state.copyWith(\r\n-        status: SystemOperationalStatus.ready,\r\n-        isSystemRunning: false,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onEmergencyStop(\r\n-    EmergencyStop event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      await _repository.saveSystemState({\r\n-        ...state.currentSystemState,\r\n-        'isRunning': false,\r\n-        'emergencyStoppedAt': DateTime.now().toIso8601String(),\r\n-        'timestamp': DateTime.now().toIso8601String(),\r\n-      });\r\n-\r\n-      emit(state.copyWith(\r\n-        status: SystemOperationalStatus.emergencyStopped,\r\n-        isSystemRunning: false,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onCheckSystemReadiness(\r\n-    CheckSystemReadiness event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      // Implement system readiness checks here\r\n-      final issues = _checkSystemIssues();\r\n-\r\n-      emit(state.copyWith(\r\n-        systemIssues: issues,\r\n-        isReadinessCheckPassed: issues.isEmpty,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onSaveSystemState(\r\n-    SaveSystemState event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      await _repository.saveSystemState({\r\n-        ...event.state,\r\n-        'timestamp': DateTime.now().toIso8601String(),\r\n-      });\r\n-\r\n-      emit(state.copyWith(\r\n-        currentSystemState: event.state,\r\n-        lastStateUpdate: DateTime.now(),\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onValidateSystemState(\r\n-    ValidateSystemState event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      // Implement state validation logic here\r\n-      final issues = _validateCurrentState();\r\n-\r\n-      emit(state.copyWith(\r\n-        systemIssues: issues,\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _onUpdateSystemParameters(\r\n-    UpdateSystemParameters event,\r\n-    Emitter<SystemStateState> emit,\r\n-  ) async {\r\n-    try {\r\n-      emit(state.copyWith(isLoading: true));\r\n-\r\n-      final updatedState = Map<String, dynamic>.from(state.currentSystemState);\r\n-      event.updates.forEach((component, values) {\r\n-        if (updatedState.containsKey('components')) {\r\n-          final components = updatedState['components'] as Map<String, dynamic>;\r\n-          if (components.containsKey(component)) {\r\n-            final componentData = components[component] as Map<String, dynamic>;\r\n-            componentData['currentValues'] = values;\r\n-          }\r\n-        }\r\n-      });\r\n-\r\n-      await _repository.saveSystemState(updatedState);\r\n-\r\n-      emit(state.copyWith(\r\n-        currentSystemState: updatedState,\r\n-        lastStateUpdate: DateTime.now(),\r\n-        isLoading: false,\r\n-      ));\r\n-    } catch (error) {\r\n-      emit(state.copyWith(\r\n-        error: BlocUtils.handleError(error),\r\n-        isLoading: false,\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  List<String> _checkSystemIssues() {\r\n-    final issues = <String>[];\r\n-\r\n-    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n-\r\n-    if (components == null || components.isEmpty) {\r\n-      issues.add('No components found in system');\r\n-      return issues;\r\n-    }\r\n-\r\n-    components.forEach((componentName, componentData) {\r\n-      final data = componentData as Map<String, dynamic>;\r\n-      final isActivated = data['isActivated'] as bool? ?? false;\r\n-      final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n-      final setValues = data['setValues'] as Map<String, dynamic>?;\r\n-\r\n-      if (!isActivated) {\r\n-        issues.add('$componentName is not activated');\r\n-      }\r\n-\r\n-      if (currentValues != null && setValues != null) {\r\n-        currentValues.forEach((parameter, value) {\r\n-          final setValue = setValues[parameter];\r\n-          if (setValue != null && (value as num).abs() - (setValue as num).abs() > 0.1) {\r\n-            issues.add('$componentName: $parameter mismatch (current: $value, set: $setValue)');\r\n-          }\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    return issues;\r\n-  }\r\n-\r\n-  List<String> _validateCurrentState() {\r\n-    final issues = <String>[];\r\n-\r\n-    if (!state.isSystemRunning && state.status == SystemOperationalStatus.running) {\r\n-      issues.add('System status inconsistency detected');\r\n-    }\r\n-\r\n-    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n-    if (components != null) {\r\n-      components.forEach((componentName, componentData) {\r\n-        final data = componentData as Map<String, dynamic>;\r\n-        final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n-        final minValues = data['minValues'] as Map<String, dynamic>?;\r\n-        final maxValues = data['maxValues'] as Map<String, dynamic>?;\r\n-\r\n-        if (currentValues != null && minValues != null && maxValues != null) {\r\n-          currentValues.forEach((parameter, value) {\r\n-            final min = minValues[parameter] as num?;\r\n-            final max = maxValues[parameter] as num?;\r\n-            final current = value as num;\r\n-\r\n-            if (min != null && current < min) {\r\n-              issues.add('$componentName: $parameter below minimum ($current < $min)');\r\n-            }\r\n-            if (max != null && current > max) {\r\n-              issues.add('$componentName: $parameter above maximum ($current > $max)');\r\n-            }\r\n-          });\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    return issues;\r\n-  }\r\n-\r\n-  @override\r\n-  Future<void> close() {\r\n-    _stateSubscription?.cancel();\r\n-    return super.close();\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734454873092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-^// *(lib|path)// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n+// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n"
                },
                {
                    "date": 1734457219433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n-import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n import '../models/system_state_data.dart';\r\n import 'system_state_event.dart';\r\n import 'system_state_state.dart';\r\n \r\n"
                },
                {
                    "date": 1734458295474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,47 @@\n-// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n-\r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n+import '../repositories/user_system_state_repository.dart';\r\n+import '../repositories/global_system_state_repository.dart';\r\n import '../models/system_state_data.dart';\r\n+import '../../auth/bloc/auth_bloc.dart';\r\n+import '../../auth/bloc/auth_state.dart';\r\n import 'system_state_event.dart';\r\n import 'system_state_state.dart';\r\n \r\n class SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n-  final SystemStateRepository _repository;\r\n+  final UserSystemStateRepository _userRepository;\r\n+  final GlobalSystemStateRepository _globalRepository;\r\n+  final AuthBloc _authBloc;\r\n   StreamSubscription? _stateSubscription;\r\n+  String? _currentUserId;\r\n \r\n-  SystemStateBloc(this._repository) : super(SystemStateState()) {\r\n+  SystemStateBloc({\r\n+    required UserSystemStateRepository userRepository,\r\n+    required GlobalSystemStateRepository globalRepository,\r\n+    required AuthBloc authBloc,\r\n+  }) : _userRepository = userRepository,\r\n+      _globalRepository = globalRepository,\r\n+      _authBloc = authBloc,\r\n+      super(SystemStateState()) {\r\n     on<InitializeSystem>(_onInitializeSystem);\r\n     on<StartSystem>(_onStartSystem);\r\n     on<StopSystem>(_onStopSystem);\r\n     on<EmergencyStop>(_onEmergencyStop);\r\n     on<CheckSystemReadiness>(_onCheckSystemReadiness);\r\n     on<SaveSystemState>(_onSaveSystemState);\r\n     on<ValidateSystemState>(_onValidateSystemState);\r\n     on<UpdateSystemParameters>(_onUpdateSystemParameters);\r\n+\r\n+    // Listen to auth state changes\r\n+    _authBloc.stream.listen((authState) {\r\n+      if (authState.status == AuthStatus.authenticated) {\r\n+        _currentUserId = authState.user?.id;\r\n+      } else {\r\n+        _currentUserId = null;\r\n+      }\r\n+    });\r\n   }\r\n \r\n   Future<void> _onInitializeSystem(\r\n     InitializeSystem event,\r\n@@ -31,28 +52,21 @@\n         status: SystemOperationalStatus.initializing,\r\n         isLoading: true,\r\n       ));\r\n \r\n-      // Load the latest state\r\n-      final latestState = await _repository.getSystemState();\r\n-\r\n-      if (latestState != null) {\r\n-        emit(state.copyWith(\r\n-          status: SystemOperationalStatus.ready,\r\n-          currentSystemState: latestState.data,\r\n-          lastStateUpdate: latestState.timestamp,\r\n-          isLoading: false,\r\n-        ));\r\n-      } else {\r\n-        emit(state.copyWith(\r\n-          status: SystemOperationalStatus.ready,\r\n-          isLoading: false,\r\n-        ));\r\n+      if (_currentUserId == null) {\r\n+        throw Exception('No authenticated user');\r\n       }\r\n \r\n-      // Setup state subscription\r\n+      // Load components\r\n+      final components = await _userRepository.getAllComponents(userId: _currentUserId!);\r\n+\r\n+      // Load global state\r\n+      final globalState = await _globalRepository.getLatestState();\r\n+\r\n+      // Setup global state subscription\r\n       await _stateSubscription?.cancel();\r\n-      _stateSubscription = _repository.systemStateStream().listen(\r\n+      _stateSubscription = _globalRepository.watchSystemState().listen(\r\n         (systemState) {\r\n           if (systemState != null) {\r\n             add(SaveSystemState(systemState.data));\r\n           }\r\n@@ -60,8 +74,16 @@\n         onError: (error) {\r\n           add(SaveSystemState({'error': error.toString()}));\r\n         },\r\n       );\r\n+\r\n+      emit(state.copyWith(\r\n+        status: SystemOperationalStatus.ready,\r\n+        components: components,\r\n+        currentSystemState: globalState?.data ?? {},\r\n+        lastStateUpdate: globalState?.timestamp,\r\n+        isLoading: false,\r\n+      ));\r\n     } catch (error) {\r\n       emit(state.copyWith(\r\n         status: SystemOperationalStatus.error,\r\n         error: BlocUtils.handleError(error),\r\n@@ -83,9 +105,9 @@\n \r\n     try {\r\n       emit(state.copyWith(isLoading: true));\r\n \r\n-      await _repository.saveSystemState({\r\n+      await _globalRepository.saveSystemState({\r\n         'status': 'running',\r\n         'isSystemRunning': true,\r\n         'timestamp': DateTime.now().toIso8601String(),\r\n       });\r\n@@ -116,9 +138,9 @@\n \r\n     try {\r\n       emit(state.copyWith(isLoading: true));\r\n \r\n-      await _repository.saveSystemState({\r\n+      await _globalRepository.saveSystemState({\r\n         'status': 'ready',\r\n         'isSystemRunning': false,\r\n         'timestamp': DateTime.now().toIso8601String(),\r\n       });\r\n@@ -142,9 +164,9 @@\n   ) async {\r\n     try {\r\n       emit(state.copyWith(isLoading: true));\r\n \r\n-      await _repository.saveSystemState({\r\n+      await _globalRepository.saveSystemState({\r\n         ...state.currentSystemState,\r\n         'isRunning': false,\r\n         'emergencyStoppedAt': DateTime.now().toIso8601String(),\r\n         'timestamp': DateTime.now().toIso8601String(),\r\n@@ -192,13 +214,26 @@\n   ) async {\r\n     try {\r\n       emit(state.copyWith(isLoading: true));\r\n \r\n-      await _repository.saveSystemState({\r\n+      final stateData = {\r\n         ...event.state,\r\n         'timestamp': DateTime.now().toIso8601String(),\r\n-      });\r\n+      };\r\n \r\n+      // Save to both repositories\r\n+      await _globalRepository.saveSystemState(stateData);\r\n+      if (_currentUserId != null) {\r\n+        await _userRepository.saveSystemState(\r\n+          SystemStateData(\r\n+            id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+            data: stateData,\r\n+            timestamp: DateTime.now(),\r\n+          ),\r\n+          userId: _currentUserId!,\r\n+        );\r\n+      }\r\n+\r\n       emit(state.copyWith(\r\n         currentSystemState: event.state,\r\n         lastStateUpdate: DateTime.now(),\r\n         isLoading: false,\r\n@@ -250,9 +285,9 @@\n           }\r\n         }\r\n       });\r\n \r\n-      await _repository.saveSystemState(updatedState);\r\n+      await _globalRepository.saveSystemState(updatedState);\r\n \r\n       emit(state.copyWith(\r\n         currentSystemState: updatedState,\r\n         lastStateUpdate: DateTime.now(),\r\n"
                },
                {
                    "date": 1734466187660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,8 +368,46 @@\n \r\n     return issues;\r\n   }\r\n \r\n+  Future<void> _performSystemCheck() async {\r\n+    final issues = <String>[];\r\n+\r\n+    // Check all required components\r\n+    final components = state.components;\r\n+    for (final component in components.entries) {\r\n+      if (!_isComponentReady(component.value)) {\r\n+        issues.add('${component.key} not ready');\r\n+      }\r\n+    }\r\n+\r\n+    // Check system parameters\r\n+    if (!_areSystemParametersValid()) {\r\n+      issues.add('System parameters out of range');\r\n+    }\r\n+\r\n+    emit(state.copyWith(\r\n+      systemIssues: issues,\r\n+      isReadinessCheckPassed: issues.isEmpty,\r\n+      lastChecked: DateTime.now(),\r\n+    ));\r\n+  }\r\n+\r\n+  bool _isComponentReady(ComponentState component) {\r\n+    // Add your component readiness checks here\r\n+    return component.isInitialized &&\r\n+           component.isConnected &&\r\n+           !component.hasError;\r\n+  }\r\n+\r\n+  bool _areSystemParametersValid() {\r\n+    // Add your system parameter validation here\r\n+    final params = state.currentSystemState;\r\n+    // Example validation:\r\n+    return params['pressure'] != null &&\r\n+           params['temperature'] != null;\r\n+  }\r\n+\r\n   @override\r\n   Future<void> close() {\r\n     _stateSubscription?.cancel();\r\n     return super.close();\r\n"
                },
                {
                    "date": 1734466210553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import 'package:experiment_planner/core/utils/bloc_utils.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_state.dart';\r\n import '../repositories/user_system_state_repository.dart';\r\n import '../repositories/global_system_state_repository.dart';\r\n import '../models/system_state_data.dart';\r\n import '../../auth/bloc/auth_bloc.dart';\r\n"
                },
                {
                    "date": 1734466269213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,14 +373,19 @@\n   Future<void> _performSystemCheck() async {\r\n     final issues = <String>[];\r\n \r\n     // Check all required components\r\n-    final components = state.components;\r\n-    for (final component in components.entries) {\r\n-      if (!_isComponentReady(component.value)) {\r\n-        issues.add('${component.key} not ready');\r\n+    final componentMap = Map<String, ComponentState>.fromIterable(\r\n+      state.components,\r\n+      key: (component) => component.name,\r\n+      value: (component) => component.state\r\n+    );\r\n+\r\n+    componentMap.forEach((name, state) {\r\n+      if (!_isComponentReady(state)) {\r\n+        issues.add('$name not ready');\r\n       }\r\n-    }\r\n+    });\r\n \r\n     // Check system parameters\r\n     if (!_areSystemParametersValid()) {\r\n       issues.add('System parameters out of range');\r\n@@ -388,25 +393,48 @@\n \r\n     emit(state.copyWith(\r\n       systemIssues: issues,\r\n       isReadinessCheckPassed: issues.isEmpty,\r\n-      lastChecked: DateTime.now(),\r\n     ));\r\n   }\r\n \r\n   bool _isComponentReady(ComponentState component) {\r\n-    // Add your component readiness checks here\r\n     return component.isInitialized &&\r\n            component.isConnected &&\r\n            !component.hasError;\r\n   }\r\n \r\n   bool _areSystemParametersValid() {\r\n+    final params = state.currentSystemState;\r\n+\r\n     // Add your system parameter validation here\r\n-    final params = state.currentSystemState;\r\n-    // Example validation:\r\n-    return params['pressure'] != null &&\r\n-           params['temperature'] != null;\r\n+    if (!params.containsKey('components')) {\r\n+      return false;\r\n+    }\r\n+\r\n+    final components = params['components'] as Map<String, dynamic>?;\r\n+    if (components == null) {\r\n+      return false;\r\n+    }\r\n+\r\n+    // Check essential parameters\r\n+    try {\r\n+      final chamber = components['Reaction Chamber'] as Map<String, dynamic>;\r\n+      final pressure = components['Pressure Control System'] as Map<String, dynamic>;\r\n+\r\n+      final chamberTemp = chamber['currentValues']['temperature'] as double?;\r\n+      final systemPressure = pressure['currentValues']['pressure'] as double?;\r\n+\r\n+      if (chamberTemp == null || systemPressure == null) {\r\n+        return false;\r\n+      }\r\n+\r\n+      // Add your specific validation ranges here\r\n+      return chamberTemp >= 15.0 && chamberTemp <= 1000.0 &&\r\n+             systemPressure >= 0.1 && systemPressure <= 10.0;\r\n+    } catch (e) {\r\n+      return false;\r\n+    }\r\n   }\r\n \r\n   @override\r\n   Future<void> close() {\r\n"
                },
                {
                    "date": 1734466313057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import '../../auth/bloc/auth_bloc.dart';\r\n import '../../auth/bloc/auth_state.dart';\r\n import 'system_state_event.dart';\r\n import 'system_state_state.dart';\r\n+import '../models/component_state.dart';\r\n \r\n class SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n   final UserSystemStateRepository _userRepository;\r\n   final GlobalSystemStateRepository _globalRepository;\r\n@@ -373,19 +374,13 @@\n   Future<void> _performSystemCheck() async {\r\n     final issues = <String>[];\r\n \r\n     // Check all required components\r\n-    final componentMap = Map<String, ComponentState>.fromIterable(\r\n-      state.components,\r\n-      key: (component) => component.name,\r\n-      value: (component) => component.state\r\n-    );\r\n-\r\n-    componentMap.forEach((name, state) {\r\n-      if (!_isComponentReady(state)) {\r\n-        issues.add('$name not ready');\r\n+    for (final component in state.components) {\r\n+      if (!_isComponentReady(component)) {\r\n+        issues.add('${component.name} not ready');\r\n       }\r\n-    });\r\n+    }\r\n \r\n     // Check system parameters\r\n     if (!_areSystemParametersValid()) {\r\n       issues.add('System parameters out of range');\r\n"
                },
                {
                    "date": 1734466495912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import '../../auth/bloc/auth_bloc.dart';\r\n import '../../auth/bloc/auth_state.dart';\r\n import 'system_state_event.dart';\r\n import 'system_state_state.dart';\r\n-import '../models/component_state.dart';\r\n+import '../models/system_component_state.dart';\r\n \r\n class SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n   final UserSystemStateRepository _userRepository;\r\n   final GlobalSystemStateRepository _globalRepository;\r\n@@ -374,13 +374,19 @@\n   Future<void> _performSystemCheck() async {\r\n     final issues = <String>[];\r\n \r\n     // Check all required components\r\n-    for (final component in state.components) {\r\n-      if (!_isComponentReady(component)) {\r\n-        issues.add('${component.name} not ready');\r\n+    final componentMap = Map<String, SystemComponentState>.fromIterable(\r\n+      state.components,\r\n+      key: (component) => component.name,\r\n+      value: (component) => component.state\r\n+    );\r\n+\r\n+    componentMap.forEach((name, state) {\r\n+      if (!_isComponentReady(state)) {\r\n+        issues.add('$name not ready');\r\n       }\r\n-    }\r\n+    });\r\n \r\n     // Check system parameters\r\n     if (!_areSystemParametersValid()) {\r\n       issues.add('System parameters out of range');\r\n@@ -391,9 +397,9 @@\n       isReadinessCheckPassed: issues.isEmpty,\r\n     ));\r\n   }\r\n \r\n-  bool _isComponentReady(ComponentState component) {\r\n+  bool _isComponentReady(SystemComponentState component) {\r\n     return component.isInitialized &&\r\n            component.isConnected &&\r\n            !component.hasError;\r\n   }\r\n"
                },
                {
                    "date": 1734466959597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,11 @@\n \r\n       // Load components\r\n       final components = await _userRepository.getAllComponents(userId: _currentUserId!);\r\n \r\n+      // Perform initial readiness check\r\n+      final readinessResult = await _performSystemCheck();\r\n+\r\n       // Load global state\r\n       final globalState = await _globalRepository.getLatestState();\r\n \r\n       // Setup global state subscription\r\n@@ -70,21 +73,27 @@\n       _stateSubscription = _globalRepository.watchSystemState().listen(\r\n         (systemState) {\r\n           if (systemState != null) {\r\n             add(SaveSystemState(systemState.data));\r\n+            // Trigger readiness check on state updates\r\n+            add(CheckSystemReadiness());\r\n           }\r\n         },\r\n         onError: (error) {\r\n           add(SaveSystemState({'error': error.toString()}));\r\n         },\r\n       );\r\n \r\n       emit(state.copyWith(\r\n-        status: SystemOperationalStatus.ready,\r\n+        status: readinessResult.isReady ?\r\n+          SystemOperationalStatus.ready :\r\n+          SystemOperationalStatus.initializing,\r\n         components: components,\r\n         currentSystemState: globalState?.data ?? {},\r\n         lastStateUpdate: globalState?.timestamp,\r\n         isLoading: false,\r\n+        systemIssues: readinessResult.issues,\r\n+        isReadinessCheckPassed: readinessResult.isReady,\r\n       ));\r\n     } catch (error) {\r\n       emit(state.copyWith(\r\n         status: SystemOperationalStatus.error,\r\n@@ -370,8 +379,195 @@\n \r\n     return issues;\r\n   }\r\n \r\n+  Future<ReadinessCheckResult> _performSystemCheck() async {\r\n+    final issues = <String>[];\r\n+    bool isReady = true;\r\n+\r\n+    try {\r\n+      // 1. Check Component Initialization\r\n+      final componentResults = await Future.wait(\r\n+        state.components.map((component) => _checkComponentReadiness(component))\r\n+      );\r\n+\r\n+      for (var result in componentResults) {\r\n+        issues.addAll(result.issues);\r\n+        if (!result.isReady) isReady = false;\r\n+      }\r\n+\r\n+      // 2. Check System Parameters\r\n+      final parameterCheck = _validateSystemParameters();\r\n+      if (!parameterCheck.isValid) {\r\n+        issues.addAll(parameterCheck.issues);\r\n+        isReady = false;\r\n+      }\r\n+\r\n+      // 3. Check Safety Systems\r\n+      final safetyCheck = await _checkSafetySystems();\r\n+      if (!safetyCheck.isValid) {\r\n+        issues.addAll(safetyCheck.issues);\r\n+        isReady = false;\r\n+      }\r\n+\r\n+      // 4. Check Network Connectivity\r\n+      if (!await _checkNetworkConnectivity()) {\r\n+        issues.add('Network connectivity issues detected');\r\n+        isReady = false;\r\n+      }\r\n+\r\n+      // Save readiness state\r\n+      await _userRepository.saveSystemState(\r\n+        SystemStateData(\r\n+          id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+          data: {\r\n+            ...state.currentSystemState,\r\n+            'isReady': isReady,\r\n+            'readinessChecks': issues,\r\n+          },\r\n+          timestamp: DateTime.now(),\r\n+          isInitialized: true,\r\n+          isReady: isReady,\r\n+          readinessChecks: issues,\r\n+        ),\r\n+        userId: _currentUserId!,\r\n+      );\r\n+\r\n+      return ReadinessCheckResult(\r\n+        isReady: isReady,\r\n+        issues: issues,\r\n+      );\r\n+    } catch (e) {\r\n+      issues.add('Error during system check: ${e.toString()}');\r\n+      return ReadinessCheckResult(\r\n+        isReady: false,\r\n+        issues: issues,\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Future<ComponentCheckResult> _checkComponentReadiness(SystemComponent component) async {\r\n+    final issues = <String>[];\r\n+\r\n+    if (!component.state.isInitialized) {\r\n+      issues.add('${component.name} not initialized');\r\n+    }\r\n+\r\n+    if (!component.state.isConnected) {\r\n+      issues.add('${component.name} not connected');\r\n+    }\r\n+\r\n+    if (component.state.hasError) {\r\n+      issues.add('${component.name} error: ${component.state.errorMessage}');\r\n+    }\r\n+\r\n+    // Check component-specific parameters\r\n+    final parameterCheck = _validateComponentParameters(component);\r\n+    issues.addAll(parameterCheck.issues);\r\n+\r\n+    return ComponentCheckResult(\r\n+      isReady: issues.isEmpty,\r\n+      issues: issues,\r\n+    );\r\n+  }\r\n+\r\n+  ParameterValidationResult _validateSystemParameters() {\r\n+    final issues = <String>[];\r\n+\r\n+    final params = state.currentSystemState;\r\n+    if (!params.containsKey('components')) {\r\n+      return ParameterValidationResult(isValid: false, issues: ['System parameters not initialized']);\r\n+    }\r\n+\r\n+    try {\r\n+      final components = params['components'] as Map<String, dynamic>;\r\n+\r\n+      // Check essential parameters with specific ranges\r\n+      _validateParameterRange(\r\n+        components,\r\n+        'Reaction Chamber',\r\n+        'temperature',\r\n+        15.0,\r\n+        1000.0,\r\n+        issues,\r\n+      );\r\n+\r\n+      _validateParameterRange(\r\n+        components,\r\n+        'Pressure Control System',\r\n+        'pressure',\r\n+        0.1,\r\n+        10.0,\r\n+        issues,\r\n+      );\r\n+\r\n+      return ParameterValidationResult(\r\n+        isValid: issues.isEmpty,\r\n+        issues: issues,\r\n+      );\r\n+    } catch (e) {\r\n+      return ParameterValidationResult(\r\n+        isValid: false,\r\n+        issues: ['Parameter validation error: ${e.toString()}'],\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  void _validateParameterRange(\r\n+    Map<String, dynamic> components,\r\n+    String componentName,\r\n+    String parameterName,\r\n+    double min,\r\n+    double max,\r\n+    List<String> issues,\r\n+  ) {\r\n+    final component = components[componentName] as Map<String, dynamic>?;\r\n+    if (component == null) {\r\n+      issues.add('$componentName not found');\r\n+      return;\r\n+    }\r\n+\r\n+    final values = component['currentValues'] as Map<String, dynamic>?;\r\n+    if (values == null) {\r\n+      issues.add('$componentName values not initialized');\r\n+      return;\r\n+    }\r\n+\r\n+    final value = values[parameterName] as double?;\r\n+    if (value == null) {\r\n+      issues.add('$componentName $parameterName not initialized');\r\n+      return;\r\n+    }\r\n+\r\n+    if (value < min || value > max) {\r\n+      issues.add('$componentName $parameterName out of range ($min-$max): $value');\r\n+    }\r\n+  }\r\n+\r\n+  Future<SafetyCheckResult> _checkSafetySystems() async {\r\n+    final issues = <String>[];\r\n+\r\n+    // Check emergency stop system\r\n+    if (!_isEmergencyStopSystemOperational()) {\r\n+      issues.add('Emergency stop system not operational');\r\n+    }\r\n+\r\n+    // Check safety interlocks\r\n+    if (!_areSafetyInterlocksEngaged()) {\r\n+      issues.add('Safety interlocks not properly engaged');\r\n+    }\r\n+\r\n+    // Check alarm system\r\n+    if (!_isAlarmSystemOperational()) {\r\n+      issues.add('Alarm system not operational');\r\n+    }\r\n+\r\n+    return SafetyCheckResult(\r\n+      isValid: issues.isEmpty,\r\n+      issues: issues,\r\n+    );\r\n+  }\r\n+\r\n   Future<void> _performSystemCheck() async {\r\n     final issues = <String>[];\r\n \r\n     // Check all required components\r\n@@ -441,5 +637,45 @@\n   Future<void> close() {\r\n     _stateSubscription?.cancel();\r\n     return super.close();\r\n   }\r\n+}\r\n+\r\n+class ReadinessCheckResult {\r\n+  final bool isReady;\r\n+  final List<String> issues;\r\n+\r\n+  ReadinessCheckResult({\r\n+    required this.isReady,\r\n+    required this.issues,\r\n+  });\r\n+}\r\n+\r\n+class ComponentCheckResult {\r\n+  final bool isReady;\r\n+  final List<String> issues;\r\n+\r\n+  ComponentCheckResult({\r\n+    required this.isReady,\r\n+    required this.issues,\r\n+  });\r\n+}\r\n+\r\n+class ParameterValidationResult {\r\n+  final bool isValid;\r\n+  final List<String> issues;\r\n+\r\n+  ParameterValidationResult({\r\n+    required this.isValid,\r\n+    required this.issues,\r\n+  });\r\n+}\r\n+\r\n+class SafetyCheckResult {\r\n+  final bool isValid;\r\n+  final List<String> issues;\r\n+\r\n+  SafetyCheckResult({\r\n+    required this.isValid,\r\n+    required this.issues,\r\n+  });\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734376765315,
            "name": "Commit-0",
            "content": "^// *(lib|path)// lib/blocs/system_state/bloc/system_state_bloc.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\nimport '../../utils/bloc_utils.dart';\r\nimport '../models/system_state_data.dart';\r\nimport 'system_state_event.dart';\r\nimport 'system_state_state.dart';\r\n\r\nclass SystemStateBloc extends Bloc<SystemStateEvent, SystemStateState> {\r\n  final SystemStateRepository _repository;\r\n  StreamSubscription? _stateSubscription;\r\n\r\n  SystemStateBloc(this._repository) : super(SystemStateState()) {\r\n    on<InitializeSystem>(_onInitializeSystem);\r\n    on<StartSystem>(_onStartSystem);\r\n    on<StopSystem>(_onStopSystem);\r\n    on<EmergencyStop>(_onEmergencyStop);\r\n    on<CheckSystemReadiness>(_onCheckSystemReadiness);\r\n    on<SaveSystemState>(_onSaveSystemState);\r\n    on<ValidateSystemState>(_onValidateSystemState);\r\n    on<UpdateSystemParameters>(_onUpdateSystemParameters);\r\n  }\r\n\r\n  Future<void> _onInitializeSystem(\r\n    InitializeSystem event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(\r\n        status: SystemOperationalStatus.initializing,\r\n        isLoading: true,\r\n      ));\r\n\r\n      // Load the latest state\r\n      final latestState = await _repository.getSystemState();\r\n\r\n      if (latestState != null) {\r\n        emit(state.copyWith(\r\n          status: SystemOperationalStatus.ready,\r\n          currentSystemState: latestState.data,\r\n          lastStateUpdate: latestState.timestamp,\r\n          isLoading: false,\r\n        ));\r\n      } else {\r\n        emit(state.copyWith(\r\n          status: SystemOperationalStatus.ready,\r\n          isLoading: false,\r\n        ));\r\n      }\r\n\r\n      // Setup state subscription\r\n      await _stateSubscription?.cancel();\r\n      _stateSubscription = _repository.systemStateStream().listen(\r\n        (systemState) {\r\n          if (systemState != null) {\r\n            add(SaveSystemState(systemState.data));\r\n          }\r\n        },\r\n        onError: (error) {\r\n          add(SaveSystemState({'error': error.toString()}));\r\n        },\r\n      );\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        status: SystemOperationalStatus.error,\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onStartSystem(\r\n    StartSystem event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    if (!state.canStart) {\r\n      emit(state.copyWith(\r\n        error: 'System cannot be started in current state',\r\n      ));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      await _repository.saveSystemState({\r\n        'status': 'running',\r\n        'isSystemRunning': true,\r\n        'timestamp': DateTime.now().toIso8601String(),\r\n      });\r\n\r\n      emit(state.copyWith(\r\n        status: SystemOperationalStatus.running,\r\n        isSystemRunning: true,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onStopSystem(\r\n    StopSystem event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    if (!state.canStop) {\r\n      emit(state.copyWith(\r\n        error: 'System is not running',\r\n      ));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      await _repository.saveSystemState({\r\n        'status': 'ready',\r\n        'isSystemRunning': false,\r\n        'timestamp': DateTime.now().toIso8601String(),\r\n      });\r\n\r\n      emit(state.copyWith(\r\n        status: SystemOperationalStatus.ready,\r\n        isSystemRunning: false,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onEmergencyStop(\r\n    EmergencyStop event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      await _repository.saveSystemState({\r\n        ...state.currentSystemState,\r\n        'isRunning': false,\r\n        'emergencyStoppedAt': DateTime.now().toIso8601String(),\r\n        'timestamp': DateTime.now().toIso8601String(),\r\n      });\r\n\r\n      emit(state.copyWith(\r\n        status: SystemOperationalStatus.emergencyStopped,\r\n        isSystemRunning: false,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onCheckSystemReadiness(\r\n    CheckSystemReadiness event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      // Implement system readiness checks here\r\n      final issues = _checkSystemIssues();\r\n\r\n      emit(state.copyWith(\r\n        systemIssues: issues,\r\n        isReadinessCheckPassed: issues.isEmpty,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSaveSystemState(\r\n    SaveSystemState event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      await _repository.saveSystemState({\r\n        ...event.state,\r\n        'timestamp': DateTime.now().toIso8601String(),\r\n      });\r\n\r\n      emit(state.copyWith(\r\n        currentSystemState: event.state,\r\n        lastStateUpdate: DateTime.now(),\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onValidateSystemState(\r\n    ValidateSystemState event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      // Implement state validation logic here\r\n      final issues = _validateCurrentState();\r\n\r\n      emit(state.copyWith(\r\n        systemIssues: issues,\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onUpdateSystemParameters(\r\n    UpdateSystemParameters event,\r\n    Emitter<SystemStateState> emit,\r\n  ) async {\r\n    try {\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      final updatedState = Map<String, dynamic>.from(state.currentSystemState);\r\n      event.updates.forEach((component, values) {\r\n        if (updatedState.containsKey('components')) {\r\n          final components = updatedState['components'] as Map<String, dynamic>;\r\n          if (components.containsKey(component)) {\r\n            final componentData = components[component] as Map<String, dynamic>;\r\n            componentData['currentValues'] = values;\r\n          }\r\n        }\r\n      });\r\n\r\n      await _repository.saveSystemState(updatedState);\r\n\r\n      emit(state.copyWith(\r\n        currentSystemState: updatedState,\r\n        lastStateUpdate: DateTime.now(),\r\n        isLoading: false,\r\n      ));\r\n    } catch (error) {\r\n      emit(state.copyWith(\r\n        error: BlocUtils.handleError(error),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  List<String> _checkSystemIssues() {\r\n    final issues = <String>[];\r\n\r\n    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n\r\n    if (components == null || components.isEmpty) {\r\n      issues.add('No components found in system');\r\n      return issues;\r\n    }\r\n\r\n    components.forEach((componentName, componentData) {\r\n      final data = componentData as Map<String, dynamic>;\r\n      final isActivated = data['isActivated'] as bool? ?? false;\r\n      final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n      final setValues = data['setValues'] as Map<String, dynamic>?;\r\n\r\n      if (!isActivated) {\r\n        issues.add('$componentName is not activated');\r\n      }\r\n\r\n      if (currentValues != null && setValues != null) {\r\n        currentValues.forEach((parameter, value) {\r\n          final setValue = setValues[parameter];\r\n          if (setValue != null && (value as num).abs() - (setValue as num).abs() > 0.1) {\r\n            issues.add('$componentName: $parameter mismatch (current: $value, set: $setValue)');\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return issues;\r\n  }\r\n\r\n  List<String> _validateCurrentState() {\r\n    final issues = <String>[];\r\n\r\n    if (!state.isSystemRunning && state.status == SystemOperationalStatus.running) {\r\n      issues.add('System status inconsistency detected');\r\n    }\r\n\r\n    final components = state.currentSystemState['components'] as Map<String, dynamic>?;\r\n    if (components != null) {\r\n      components.forEach((componentName, componentData) {\r\n        final data = componentData as Map<String, dynamic>;\r\n        final currentValues = data['currentValues'] as Map<String, dynamic>?;\r\n        final minValues = data['minValues'] as Map<String, dynamic>?;\r\n        final maxValues = data['maxValues'] as Map<String, dynamic>?;\r\n\r\n        if (currentValues != null && minValues != null && maxValues != null) {\r\n          currentValues.forEach((parameter, value) {\r\n            final min = minValues[parameter] as num?;\r\n            final max = maxValues[parameter] as num?;\r\n            final current = value as num;\r\n\r\n            if (min != null && current < min) {\r\n              issues.add('$componentName: $parameter below minimum ($current < $min)');\r\n            }\r\n            if (max != null && current > max) {\r\n              issues.add('$componentName: $parameter above maximum ($current > $max)');\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _stateSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}