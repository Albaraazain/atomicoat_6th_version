{
    "sourceFile": "lib/features/recipes/recipe_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734376765348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434716370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,7 @@\n // test/blocs/recipe/recipe_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n-import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n-import 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\n-import 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\n-import 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\n-import 'package:experiment_planner/blocs/recipe/repository/recipe_repository.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/features/recipes/models/recipe.dart';\r\n-import 'package:experiment_planner/features/auth/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n class MockRecipeRepository extends Mock implements RecipeRepository {}\r\n"
                },
                {
                    "date": 1734434735619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n // test/blocs/recipe/recipe_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n+import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/features/recipes/models/recipe.dart';\r\n+import 'package:experiment_planner/features/recipes/repository/recipe_repository.dart';\r\n+import 'package:experiment_planner/features/system/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/features/system/bloc/system_state_event.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n class MockRecipeRepository extends Mock implements RecipeRepository {}\r\n"
                },
                {
                    "date": 1734434741819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // test/blocs/recipe/recipe_bloc_test.dart\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:experiment_planner/features/alarms/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n import 'package:experiment_planner/features/recipes/models/recipe.dart';\r\n import 'package:experiment_planner/features/recipes/repository/recipe_repository.dart';\r\n import 'package:experiment_planner/features/system/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/features/system/bloc/system_state_event.dart';\r\n"
                }
            ],
            "date": 1734376765348,
            "name": "Commit-0",
            "content": "// test/blocs/recipe/recipe_bloc_test.dart\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\nimport 'package:experiment_planner/blocs/recipe/repository/recipe_repository.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\nimport 'package:experiment_planner/features/recipes/models/recipe.dart';\r\nimport 'package:experiment_planner/features/auth/services/auth_service.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\n\r\nclass MockRecipeRepository extends Mock implements RecipeRepository {}\r\nclass MockAuthService extends Mock implements AuthService {}\r\nclass MockSystemStateBloc extends Mock implements SystemStateBloc {}\r\nclass MockAlarmBloc extends Mock implements AlarmBloc {}\r\n\r\n// Add these classes for fallback registration\r\nclass FakeRecipe extends Fake implements Recipe {}\r\nclass FakeSystemStateEvent extends Fake implements SystemStateEvent {}\r\n\r\nvoid main() {\r\n  late RecipeBloc recipeBloc;\r\n  late MockRecipeRepository repository;\r\n  late MockAuthService authService;\r\n  late MockSystemStateBloc systemStateBloc;\r\n  late MockAlarmBloc alarmBloc;\r\n\r\n  setUpAll(() {\r\n    registerFallbackValue(FakeRecipe());\r\n    registerFallbackValue(FakeSystemStateEvent());\r\n  });\r\n\r\n  final testRecipe = Recipe(\r\n    id: 'test-1',\r\n    name: 'Test Recipe',\r\n    substrate: 'Silicon',\r\n    steps: [\r\n      RecipeStep(\r\n        type: StepType.setParameter,\r\n        parameters: {\r\n          'component': 'Reaction Chamber',\r\n          'parameter': 'temperature',\r\n          'value': 150.0,\r\n        },\r\n      ),\r\n      RecipeStep(\r\n        type: StepType.purge,\r\n        parameters: {\r\n          'duration': 30,\r\n          'gasFlow': 100.0,\r\n        },\r\n      ),\r\n    ],\r\n  );\r\n\r\n  setUp(() {\r\n    repository = MockRecipeRepository();\r\n    authService = MockAuthService();\r\n    systemStateBloc = MockSystemStateBloc();\r\n    alarmBloc = MockAlarmBloc();\r\n\r\n    // Fix auth mock setup\r\n    when(() => authService.currentUserId).thenReturn('test-user');\r\n\r\n    recipeBloc = RecipeBloc(\r\n      repository: repository,\r\n      authService: authService,\r\n      systemStateBloc: systemStateBloc,\r\n      alarmBloc: alarmBloc,\r\n    );\r\n  });\r\n\r\n  tearDown(() {\r\n    recipeBloc.close();\r\n  });\r\n\r\n  group('RecipeBloc', () {\r\n    test('initial state is correct', () {\r\n      final state = recipeBloc.state;\r\n      expect(state.isLoading, false);\r\n      expect(state.recipes, isEmpty);\r\n      expect(state.executionStatus, RecipeExecutionStatus.idle);\r\n    });\r\n\r\n    group('LoadRecipes', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits loaded state when recipes are successfully loaded',\r\n        build: () {\r\n          when(() => repository.getAll(userId: any(named: 'userId')))\r\n              .thenAnswer((_) async => [testRecipe]);\r\n          return recipeBloc;\r\n        },\r\n        act: (bloc) => bloc.add(LoadRecipes()),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) => state.isLoading == true),\r\n          predicate<RecipeState>((state) =>\r\n            state.isLoading == false &&\r\n            state.recipes.length == 1 &&\r\n            state.recipes.first.id == testRecipe.id\r\n          ),\r\n        ],\r\n      );\r\n\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits error when user is not authenticated',\r\n        build: () {\r\n          when(() => authService.currentUserId).thenReturn(null);\r\n          return recipeBloc;\r\n        },\r\n        act: (bloc) => bloc.add(LoadRecipes()),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) => state.isLoading == true),\r\n          predicate<RecipeState>((state) =>\r\n            state.isLoading == false &&\r\n            state.error == 'User not authenticated'\r\n          ),\r\n        ],\r\n      );\r\n    });\r\n\r\n    group('AddRecipe', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits updated state when recipe is added',\r\n        build: () {\r\n          when(() => repository.add(any(), any(), userId: any(named: 'userId')))\r\n              .thenAnswer((_) async {});\r\n          return recipeBloc;\r\n        },\r\n        act: (bloc) => bloc.add(AddRecipe(testRecipe)),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) => state.isLoading == true),\r\n          predicate<RecipeState>((state) =>\r\n            state.isLoading == false &&\r\n            state.recipes.contains(testRecipe)\r\n          ),\r\n        ],\r\n        verify: (_) {\r\n          verify(() => repository.add(testRecipe.id, testRecipe, userId: 'test-user')).called(1);\r\n        },\r\n      );\r\n    });\r\n\r\n    group('StartRecipeExecution', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits running state when recipe execution starts',\r\n        build: () {\r\n          when(() => systemStateBloc.state).thenReturn(\r\n            SystemStateState(\r\n              status: SystemOperationalStatus.ready,\r\n              isReadinessCheckPassed: true,\r\n              currentSystemState: {\r\n                'components': {\r\n                  'Reaction Chamber': {\r\n                    'currentValues': {\r\n                      'temperature': 150.0,\r\n                    },\r\n                  },\r\n                  'Pressure Control System': {\r\n                    'currentValues': {\r\n                      'pressure': 1.0,\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            ),\r\n          );\r\n          when(() => systemStateBloc.add(any())).thenAnswer((_) async {});\r\n          return recipeBloc;\r\n        },\r\n        seed: () => RecipeState.initial().copyWith(recipes: [testRecipe]),\r\n        act: (bloc) => bloc.add(StartRecipeExecution(testRecipe.id)),\r\n        expect: () => [\r\n          isA<RecipeState>()\r\n            .having((s) => s.activeRecipe?.id, 'activeRecipe.id', testRecipe.id)\r\n            .having((s) => s.executionStatus, 'executionStatus', RecipeExecutionStatus.running)\r\n            .having((s) => s.currentStepIndex, 'currentStepIndex', 0),\r\n        ],\r\n        wait: const Duration(milliseconds: 100),\r\n      );\r\n\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits error when recipe is not found',\r\n        build: () => recipeBloc,\r\n        act: (bloc) => bloc.add(StartRecipeExecution('non-existent')),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) =>\r\n            state.error != null &&\r\n            state.error!.contains('Recipe not found') &&\r\n            state.executionStatus == RecipeExecutionStatus.error\r\n          ),\r\n        ],\r\n      );\r\n    });\r\n\r\n    group('StopRecipeExecution', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits idle state when recipe execution is stopped',\r\n        build: () {\r\n          when(() => systemStateBloc.add(any())).thenAnswer((_) async {});\r\n          when(() => systemStateBloc.state).thenReturn(\r\n            SystemStateState(\r\n              status: SystemOperationalStatus.ready,\r\n            ),\r\n          );\r\n          return recipeBloc;\r\n        },\r\n        seed: () => RecipeState.initial().copyWith(\r\n          activeRecipe: testRecipe,\r\n          executionStatus: RecipeExecutionStatus.running,\r\n        ),\r\n        act: (bloc) => bloc.add(StopRecipeExecution()),\r\n        expect: () => [\r\n          isA<RecipeState>()\r\n            .having((s) => s.executionStatus, 'executionStatus', RecipeExecutionStatus.idle)\r\n            .having((s) => s.activeRecipe, 'activeRecipe', isNull)\r\n            .having((s) => s.currentStepIndex, 'currentStepIndex', 0)\r\n            .having((s) => s.recipes, 'recipes', isEmpty),\r\n        ],\r\n        verify: (_) {\r\n          verify(() => systemStateBloc.add(any())).called(1);\r\n        },\r\n        wait: const Duration(milliseconds: 100),\r\n      );\r\n    });\r\n\r\n    group('LoadRecipeVersions', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'emits versions when loaded successfully',\r\n        build: () {\r\n          final versions = [\r\n            testRecipe.copyWith(version: 1),\r\n            testRecipe.copyWith(version: 2),\r\n          ];\r\n          when(() => repository.getAll(userId: any(named: 'userId')))\r\n              .thenAnswer((_) async => versions);\r\n          return recipeBloc;\r\n        },\r\n        act: (bloc) => bloc.add(LoadRecipeVersions(testRecipe.id)),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) => state.isLoading == true),\r\n          predicate<RecipeState>((state) =>\r\n            state.isLoading == false &&\r\n            state.recipeVersions[testRecipe.id]?.length == 2\r\n          ),\r\n        ],\r\n      );\r\n    });\r\n\r\n    group('RecipeStepCompleted', () {\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'moves to next step when available',\r\n        build: () => recipeBloc,\r\n        seed: () => RecipeState.initial().copyWith(\r\n          activeRecipe: testRecipe,\r\n          executionStatus: RecipeExecutionStatus.running,\r\n          currentStepIndex: 0,\r\n        ),\r\n        act: (bloc) => bloc.add(RecipeStepCompleted(0)),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) =>\r\n            state.currentStepIndex == 1 &&\r\n            state.executionStatus == RecipeExecutionStatus.running\r\n          ),\r\n        ],\r\n      );\r\n\r\n      blocTest<RecipeBloc, RecipeState>(\r\n        'completes recipe when no more steps',\r\n        build: () {\r\n          when(() => systemStateBloc.add(any())).thenAnswer((_) async {});\r\n          return recipeBloc;\r\n        },\r\n        seed: () => RecipeState.initial().copyWith(\r\n          activeRecipe: testRecipe,\r\n          executionStatus: RecipeExecutionStatus.running,\r\n          currentStepIndex: 1,\r\n        ),\r\n        act: (bloc) => bloc.add(RecipeStepCompleted(1)),\r\n        expect: () => [\r\n          predicate<RecipeState>((state) =>\r\n            state.currentStepIndex == 0 &&\r\n            state.executionStatus == RecipeExecutionStatus.completed\r\n          ),\r\n        ],\r\n      );\r\n    });\r\n  });\r\n}"
        }
    ]
}