{
    "sourceFile": "lib/features/recipes/screens/recipe_detail_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1734376760282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434405877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,8 @@\n \r\n \r\n-import 'package:experiment_planner/blocs/component/bloc/component_list_event.dart';\r\n-import 'package:experiment_planner/blocs/component/bloc/component_list_state.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\n-import '../../../blocs/recipe/bloc/recipe_event.dart';\r\n-import '../../../blocs/recipe/bloc/recipe_state.dart';\r\n-import '../../../blocs/component/bloc/component_list_bloc.dart';\r\n import '../models/recipe.dart';\r\n \r\n class DarkThemeColors {\r\n   static const Color background = Color(0xFF121212);\r\n"
                },
                {
                    "date": 1734434432537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,994 @@\n+\r\n+\r\n+import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_event.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../models/recipe.dart';\r\n+\r\n+class DarkThemeColors {\r\n+  static const Color background = Color(0xFF121212);\r\n+  static const Color cardBackground = Color(0xFF1E1E1E);\r\n+  static const Color primaryText = Color(0xFFE0E0E0);\r\n+  static const Color secondaryText = Color(0xFFB0B0B0);\r\n+  static const Color accent = Color(0xFF64FFDA);\r\n+  static const Color divider = Color(0xFF2A2A2A);\r\n+  static const Color inputFill = Color(0xFF2C2C2C);\r\n+}\r\n+\r\n+class RecipeDetailScreen extends StatefulWidget {\r\n+  final String? recipeId;\r\n+\r\n+  RecipeDetailScreen({this.recipeId});\r\n+\r\n+  @override\r\n+  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n+}\r\n+\r\n+class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n+    with TickerProviderStateMixin {\r\n+  late TextEditingController _nameController;\r\n+  late TextEditingController _substrateController;\r\n+  late TextEditingController _chamberTempController;\r\n+  late TextEditingController _pressureController;\r\n+  List<RecipeStep> _steps = [];\r\n+  late AnimationController _animationController;\r\n+  late Animation<double> _fadeAnimation;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _nameController = TextEditingController();\r\n+    _substrateController = TextEditingController();\r\n+    _chamberTempController = TextEditingController();\r\n+    _pressureController = TextEditingController();\r\n+    _animationController = AnimationController(\r\n+      vsync: this,\r\n+      duration: Duration(milliseconds: 300),\r\n+    );\r\n+    _fadeAnimation =\r\n+        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n+    _animationController.forward();\r\n+\r\n+    // Initialize blocs\r\n+    context.read<ComponentListBloc>().add(LoadComponents());\r\n+    if (widget.recipeId != null) {\r\n+      context.read<RecipeBloc>().add(LoadRecipes());\r\n+    }\r\n+\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _loadRecipeData();\r\n+    });\r\n+  }\r\n+\r\n+  void _loadRecipeData() {\r\n+    if (widget.recipeId != null) {\r\n+      final recipeState = context.read<RecipeBloc>().state;\r\n+      final recipe = recipeState.recipes.firstWhere(\r\n+        (r) => r.id == widget.recipeId,\r\n+        orElse: () => Recipe(\r\n+          id: widget.recipeId!,\r\n+          name: '',\r\n+          substrate: '',\r\n+          steps: [],\r\n+          chamberTemperatureSetPoint: 150.0,\r\n+          pressureSetPoint: 1.0,\r\n+        ),\r\n+      );\r\n+\r\n+      setState(() {\r\n+        _nameController.text = recipe.name;\r\n+        _substrateController.text = recipe.substrate;\r\n+        _chamberTempController.text =\r\n+            recipe.chamberTemperatureSetPoint.toString();\r\n+        _pressureController.text = recipe.pressureSetPoint.toString();\r\n+        _steps = List.from(recipe.steps);\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _substrateController.dispose();\r\n+    _chamberTempController.dispose();\r\n+    _pressureController.dispose();\r\n+    _animationController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocListener<RecipeBloc, RecipeState>(\r\n+      listener: (context, state) {\r\n+        if (state.error != null) {\r\n+          ScaffoldMessenger.of(context).showSnackBar(\r\n+            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n+          );\r\n+        }\r\n+      },\r\n+      child: Scaffold(\r\n+        backgroundColor: DarkThemeColors.background,\r\n+        appBar: _buildAppBar(),\r\n+        body: _buildBody(),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  PreferredSizeWidget _buildAppBar() {\r\n+    return AppBar(\r\n+      elevation: 0,\r\n+      backgroundColor: DarkThemeColors.background,\r\n+      title: Text(\r\n+        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n+        style: TextStyle(\r\n+            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n+      ),\r\n+      actions: [\r\n+        BlocBuilder<RecipeBloc, RecipeState>(\r\n+          builder: (context, state) {\r\n+            return IconButton(\r\n+              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n+              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n+            );\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBody() {\r\n+    return BlocBuilder<RecipeBloc, RecipeState>(\r\n+      builder: (context, recipeState) {\r\n+        if (recipeState.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+        return SafeArea(\r\n+          child: FadeTransition(\r\n+            opacity: _fadeAnimation,\r\n+            child: SingleChildScrollView(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.all(16.0),\r\n+                child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  children: [\r\n+                    _buildBasicInputs(),\r\n+                    SizedBox(height: 24),\r\n+                    _buildStepsSection(),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBasicInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildTextField(\r\n+          controller: _nameController,\r\n+          label: 'Recipe Name',\r\n+          icon: Icons.title,\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _substrateController,\r\n+          label: 'Substrate',\r\n+          icon: Icons.layers,\r\n+        ),\r\n+        SizedBox(height: 24),\r\n+        _buildGlobalParametersInputs(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildGlobalParametersInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          'Global Parameters',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _chamberTempController,\r\n+          label: 'Chamber Temperature (Â°C)',\r\n+          icon: Icons.thermostat,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _pressureController,\r\n+          label: 'Pressure (atm)',\r\n+          icon: Icons.compress,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required TextEditingController controller,\r\n+    required String label,\r\n+    required IconData icon,\r\n+    TextInputType keyboardType = TextInputType.text,\r\n+  }) {\r\n+    return TextField(\r\n+      controller: controller,\r\n+      style: TextStyle(color: DarkThemeColors.primaryText),\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n+        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n+        filled: true,\r\n+        fillColor: DarkThemeColors.inputFill,\r\n+        border: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide.none,\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsSection() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildStepsHeader(),\r\n+        SizedBox(height: 16),\r\n+        _buildStepsList(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsHeader() {\r\n+    return Row(\r\n+      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+      children: [\r\n+        Text(\r\n+          'Recipe Steps',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        ElevatedButton.icon(\r\n+          icon: Icon(Icons.add),\r\n+          label: Text('Add Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsList() {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, componentState) {\r\n+        return ReorderableListView(\r\n+          shrinkWrap: true,\r\n+          physics: NeverScrollableScrollPhysics(),\r\n+          children: _steps.asMap().entries.map((entry) {\r\n+            final index = entry.key;\r\n+            final step = entry.value;\r\n+            return _buildStepCard(step, index);\r\n+          }).toList(),\r\n+          onReorder: (oldIndex, newIndex) {\r\n+            setState(() {\r\n+              if (newIndex > oldIndex) {\r\n+                newIndex -= 1;\r\n+              }\r\n+              final RecipeStep item = _steps.removeAt(oldIndex);\r\n+              _steps.insert(newIndex, item);\r\n+            });\r\n+          },\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepCard(RecipeStep step, int index) {\r\n+    return Card(\r\n+      key: ValueKey(step),\r\n+      margin: EdgeInsets.only(bottom: 16),\r\n+      color: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ExpansionTile(\r\n+        title: Text(\r\n+          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        children: [\r\n+          Padding(\r\n+            padding: EdgeInsets.all(16),\r\n+            child: Column(\r\n+              crossAxisAlignment: CrossAxisAlignment.start,\r\n+              children: [\r\n+                _buildStepEditor(step),\r\n+                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ],\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(context, step, index),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () => _showDeleteStepDialog(context, index),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // show dialog to confirm deletion of a step\r\n+  void _showDeleteStepDialog(BuildContext context, int index) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Delete Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: Text(\r\n+            'Are you sure you want to delete this step?',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child: Text('Delete',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {\r\n+                  _steps.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepEditor(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return _buildLoopEditor(step);\r\n+      case StepType.valve:\r\n+        return _buildValveEditor(step);\r\n+      case StepType.purge:\r\n+        return _buildPurgeEditor(step);\r\n+      case StepType.setParameter:\r\n+        return _buildSetParameterEditor(step);\r\n+      default:\r\n+        return Text('Unknown Step Type',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText));\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildLoopEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildNumberInput(\r\n+          label: 'Number of iterations',\r\n+          value: step.parameters['iterations'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['iterations'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Temperature (Â°C)',\r\n+          value: step.parameters['temperature'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['temperature'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Pressure (atm)',\r\n+          value: step.parameters['pressure'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['pressure'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildValveEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildDropdown<ValveType>(\r\n+          label: 'Valve',\r\n+          value: step.parameters['valveType'],\r\n+          items: ValveType.values,\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['valveType'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Duration (seconds)',\r\n+          value: step.parameters['duration'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['duration'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildPurgeEditor(RecipeStep step) {\r\n+    return _buildNumberInput(\r\n+      label: 'Duration (seconds)',\r\n+      value: step.parameters['duration'],\r\n+      onChanged: (value) {\r\n+        setState(() {\r\n+          step.parameters['duration'] = value;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSetParameterEditor(RecipeStep step) {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, state) {\r\n+        if (state.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+\r\n+        final availableComponents = state.components.values.toList();\r\n+        final selectedComponent = step.parameters['component'] != null\r\n+            ? availableComponents.firstWhere(\r\n+                (c) => c.name == step.parameters['component'],\r\n+                orElse: () => availableComponents.first,\r\n+              )\r\n+            : availableComponents.first;\r\n+\r\n+        return Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            _buildDropdown<String>(\r\n+              label: 'Component',\r\n+              value: step.parameters['component'] ?? selectedComponent.name,\r\n+              items: availableComponents.map((c) => c.name).toList(),\r\n+              onChanged: (value) {\r\n+                setState(() {\r\n+                  step.parameters['component'] = value;\r\n+                  step.parameters['parameter'] = null;\r\n+                  step.parameters['value'] = null;\r\n+                });\r\n+              },\r\n+            ),\r\n+            if (selectedComponent != null) ...[\r\n+              SizedBox(height: 16),\r\n+              _buildDropdown<String>(\r\n+                label: 'Parameter',\r\n+                value: step.parameters['parameter'],\r\n+                items: selectedComponent.setValues.keys.toList(),\r\n+                onChanged: (value) {\r\n+                  setState(() {\r\n+                    step.parameters['parameter'] = value;\r\n+                    step.parameters['value'] = null;\r\n+                  });\r\n+                },\r\n+              ),\r\n+              if (step.parameters['parameter'] != null) ...[\r\n+                SizedBox(height: 16),\r\n+                _buildNumberInput(\r\n+                  label: 'Value',\r\n+                  value: step.parameters['value'],\r\n+                  onChanged: (value) {\r\n+                    setState(() {\r\n+                      step.parameters['value'] = value;\r\n+                    });\r\n+                  },\r\n+                ),\r\n+              ],\r\n+            ],\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        SizedBox(height: 16),\r\n+        Text(\r\n+          'Loop Steps:',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontWeight: FontWeight.w500,\r\n+            fontSize: 14,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 8),\r\n+        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n+          int index = entry.key;\r\n+          RecipeStep subStep = entry.value;\r\n+          return _buildSubStepCard(subStep, index, loopStep);\r\n+        }).toList(),\r\n+        SizedBox(height: 8),\r\n+        ElevatedButton(\r\n+          child: Text('Add Loop Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n+    return Card(\r\n+      margin: EdgeInsets.only(bottom: 8),\r\n+      color: DarkThemeColors.inputFill,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ListTile(\r\n+        title: Text(\r\n+          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n+        ),\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(\r\n+                context,\r\n+                step,\r\n+                index,\r\n+                parentStep: parentStep,\r\n+              ),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  parentStep.subSteps!.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildDropdown<T>({\r\n+    required String label,\r\n+    required T? value,\r\n+    required List<T> items,\r\n+    required Function(T?) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: DropdownButtonFormField<T>(\r\n+            value: value,\r\n+            onChanged: onChanged,\r\n+            items: items.map((T item) {\r\n+              return DropdownMenuItem<T>(\r\n+                value: item,\r\n+                child: Text(\r\n+                  item.toString(),\r\n+                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+            dropdownColor: DarkThemeColors.cardBackground,\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildNumberInput({\r\n+    required String label,\r\n+    required dynamic value,\r\n+    required Function(dynamic) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: TextFormField(\r\n+            initialValue: value?.toString() ?? '',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+            onChanged: (newValue) {\r\n+              onChanged(num.tryParse(newValue));\r\n+            },\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n+      {RecipeStep? parentStep}) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Edit Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: SingleChildScrollView(\r\n+            child: _buildStepEditor(step),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child:\r\n+                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {});\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n+    showModalBottomSheet(\r\n+      context: context,\r\n+      backgroundColor: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n+      ),\r\n+      builder: (BuildContext context) {\r\n+        return SafeArea(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              ListTile(\r\n+                title: Text('Add Step',\r\n+                    style: TextStyle(\r\n+                        color: DarkThemeColors.primaryText,\r\n+                        fontWeight: FontWeight.bold)),\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Loop',\r\n+                Icons.loop,\r\n+                StepType.loop,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Valve',\r\n+                Icons.arrow_forward,\r\n+                StepType.valve,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Purge',\r\n+                Icons.air,\r\n+                StepType.purge,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Set Parameter',\r\n+                Icons.settings,\r\n+                StepType.setParameter,\r\n+                parentStep,\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepTypeOption(\r\n+    BuildContext context,\r\n+    String title,\r\n+    IconData icon,\r\n+    StepType type,\r\n+    RecipeStep? parentStep,\r\n+  ) {\r\n+    return ListTile(\r\n+      leading: Icon(icon, color: DarkThemeColors.accent),\r\n+      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+      onTap: () {\r\n+        Navigator.pop(context);\r\n+        _addStep(type, parentStep?.subSteps ?? _steps);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _addStep(StepType type, List<RecipeStep> steps) {\r\n+    setState(() {\r\n+      switch (type) {\r\n+        case StepType.loop:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.loop,\r\n+            parameters: {\r\n+              'iterations': 1,\r\n+              'temperature': null,\r\n+              'pressure': null\r\n+            },\r\n+            subSteps: [],\r\n+          ));\r\n+          break;\r\n+        case StepType.valve:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.valve,\r\n+            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n+          ));\r\n+          break;\r\n+        case StepType.purge:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.purge,\r\n+            parameters: {'duration': 10},\r\n+          ));\r\n+          break;\r\n+        case StepType.setParameter:\r\n+          final componentState = context.read<ComponentListBloc>().state;\r\n+          final availableComponents = componentState.components.values.toList();\r\n+\r\n+          if (availableComponents.isNotEmpty) {\r\n+            final firstComponent = availableComponents.first;\r\n+            steps.add(RecipeStep(\r\n+              type: StepType.setParameter,\r\n+              parameters: {\r\n+                'component': firstComponent.name,\r\n+                'parameter': null,\r\n+                'value': null,\r\n+              },\r\n+            ));\r\n+          } else {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(content: Text('No components available')),\r\n+            );\r\n+          }\r\n+          break;\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  String _getStepTitle(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return 'Loop ${step.parameters['iterations']} times';\r\n+      case StepType.valve:\r\n+        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n+            'for ${step.parameters['duration']}s';\r\n+      case StepType.purge:\r\n+        return 'Purge for ${step.parameters['duration']}s';\r\n+      case StepType.setParameter:\r\n+        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n+            'to ${step.parameters['value']}';\r\n+      default:\r\n+        return 'Unknown Step';\r\n+    }\r\n+  }\r\n+\r\n+  void _saveRecipe(BuildContext context) {\r\n+    final errors = _validateRecipe();\r\n+    if (errors.isNotEmpty) {\r\n+      _showValidationErrors(errors);\r\n+      return;\r\n+    }\r\n+\r\n+    final newRecipe = Recipe(\r\n+      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      name: _nameController.text,\r\n+      substrate: _substrateController.text,\r\n+      steps: _steps,\r\n+      chamberTemperatureSetPoint:\r\n+          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n+      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n+    );\r\n+\r\n+    if (widget.recipeId == null) {\r\n+      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n+    } else {\r\n+      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n+    }\r\n+  }\r\n+\r\n+  List<String> _validateRecipe() {\r\n+    final errors = <String>[];\r\n+\r\n+    if (_nameController.text.isEmpty) {\r\n+      errors.add('Recipe name is required');\r\n+    }\r\n+\r\n+    if (_substrateController.text.isEmpty) {\r\n+      errors.add('Substrate is required');\r\n+    }\r\n+\r\n+    if (_steps.isEmpty) {\r\n+      errors.add('At least one step is required');\r\n+    }\r\n+\r\n+    // Validate all steps\r\n+    for (var i = 0; i < _steps.length; i++) {\r\n+      final stepErrors = _validateStep(_steps[i], i + 1);\r\n+      errors.addAll(stepErrors);\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n+    final errors = <String>[];\r\n+    final prefix = 'Step $stepNumber:';\r\n+\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        if (step.parameters['iterations'] == null ||\r\n+            step.parameters['iterations'] <= 0) {\r\n+          errors.add('$prefix Loop iterations must be greater than 0');\r\n+        }\r\n+        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n+          errors.add('$prefix Loop must contain at least one step');\r\n+        } else {\r\n+          for (var i = 0; i < step.subSteps!.length; i++) {\r\n+            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n+            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n+          }\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.valve:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Valve duration must be greater than 0');\r\n+        }\r\n+        if (step.parameters['valveType'] == null) {\r\n+          errors.add('$prefix Valve type must be selected');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.purge:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Purge duration must be greater than 0');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.setParameter:\r\n+        if (step.parameters['component'] == null) {\r\n+          errors.add('$prefix Component must be selected');\r\n+        }\r\n+        if (step.parameters['parameter'] == null) {\r\n+          errors.add('$prefix Parameter must be selected');\r\n+        }\r\n+        if (step.parameters['value'] == null) {\r\n+          errors.add('$prefix Value must be set');\r\n+        }\r\n+        break;\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  void _showValidationErrors(List<String> errors) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: Text(\r\n+          'Validation Errors',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: errors\r\n+                .map((error) => Padding(\r\n+                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n+                      child: Text(\r\n+                        'â¢ $error',\r\n+                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                      ),\r\n+                    ))\r\n+                .toList(),\r\n+          ),\r\n+        ),\r\n+        backgroundColor: DarkThemeColors.cardBackground,\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734434446926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,996 @@\n+\r\n+\r\n+import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_event.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../models/recipe.dart';\r\n+\r\n+class DarkThemeColors {\r\n+  static const Color background = Color(0xFF121212);\r\n+  static const Color cardBackground = Color(0xFF1E1E1E);\r\n+  static const Color primaryText = Color(0xFFE0E0E0);\r\n+  static const Color secondaryText = Color(0xFFB0B0B0);\r\n+  static const Color accent = Color(0xFF64FFDA);\r\n+  static const Color divider = Color(0xFF2A2A2A);\r\n+  static const Color inputFill = Color(0xFF2C2C2C);\r\n+}\r\n+\r\n+class RecipeDetailScreen extends StatefulWidget {\r\n+  final String? recipeId;\r\n+\r\n+  RecipeDetailScreen({this.recipeId});\r\n+\r\n+  @override\r\n+  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n+}\r\n+\r\n+class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n+    with TickerProviderStateMixin {\r\n+  late TextEditingController _nameController;\r\n+  late TextEditingController _substrateController;\r\n+  late TextEditingController _chamberTempController;\r\n+  late TextEditingController _pressureController;\r\n+  List<RecipeStep> _steps = [];\r\n+  late AnimationController _animationController;\r\n+  late Animation<double> _fadeAnimation;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _nameController = TextEditingController();\r\n+    _substrateController = TextEditingController();\r\n+    _chamberTempController = TextEditingController();\r\n+    _pressureController = TextEditingController();\r\n+    _animationController = AnimationController(\r\n+      vsync: this,\r\n+      duration: Duration(milliseconds: 300),\r\n+    );\r\n+    _fadeAnimation =\r\n+        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n+    _animationController.forward();\r\n+\r\n+    // Initialize blocs\r\n+    context.read<ComponentListBloc>().add(LoadComponents());\r\n+    if (widget.recipeId != null) {\r\n+      context.read<RecipeBloc>().add(LoadRecipes());\r\n+    }\r\n+\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _loadRecipeData();\r\n+    });\r\n+  }\r\n+\r\n+  void _loadRecipeData() {\r\n+    if (widget.recipeId != null) {\r\n+      final recipeState = context.read<RecipeBloc>().state;\r\n+      final recipe = recipeState.recipes.firstWhere(\r\n+        (r) => r.id == widget.recipeId,\r\n+        orElse: () => Recipe(\r\n+          id: widget.recipeId!,\r\n+          name: '',\r\n+          substrate: '',\r\n+          steps: [],\r\n+          chamberTemperatureSetPoint: 150.0,\r\n+          pressureSetPoint: 1.0,\r\n+        ),\r\n+      );\r\n+\r\n+      setState(() {\r\n+        _nameController.text = recipe.name;\r\n+        _substrateController.text = recipe.substrate;\r\n+        _chamberTempController.text =\r\n+            recipe.chamberTemperatureSetPoint.toString();\r\n+        _pressureController.text = recipe.pressureSetPoint.toString();\r\n+        _steps = List.from(recipe.steps);\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _substrateController.dispose();\r\n+    _chamberTempController.dispose();\r\n+    _pressureController.dispose();\r\n+    _animationController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocListener<RecipeBloc, RecipeState>(\r\n+      listener: (context, state) {\r\n+        if (state.error != null) {\r\n+          ScaffoldMessenger.of(context).showSnackBar(\r\n+            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n+          );\r\n+        }\r\n+      },\r\n+      child: Scaffold(\r\n+        backgroundColor: DarkThemeColors.background,\r\n+        appBar: _buildAppBar(),\r\n+        body: _buildBody(),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  PreferredSizeWidget _buildAppBar() {\r\n+    return AppBar(\r\n+      elevation: 0,\r\n+      backgroundColor: DarkThemeColors.background,\r\n+      title: Text(\r\n+        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n+        style: TextStyle(\r\n+            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n+      ),\r\n+      actions: [\r\n+        BlocBuilder<RecipeBloc, RecipeState>(\r\n+          builder: (context, state) {\r\n+            return IconButton(\r\n+              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n+              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n+            );\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBody() {\r\n+    return BlocBuilder<RecipeBloc, RecipeState>(\r\n+      builder: (context, recipeState) {\r\n+        if (recipeState.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+        return SafeArea(\r\n+          child: FadeTransition(\r\n+            opacity: _fadeAnimation,\r\n+            child: SingleChildScrollView(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.all(16.0),\r\n+                child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  children: [\r\n+                    _buildBasicInputs(),\r\n+                    SizedBox(height: 24),\r\n+                    _buildStepsSection(),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBasicInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildTextField(\r\n+          controller: _nameController,\r\n+          label: 'Recipe Name',\r\n+          icon: Icons.title,\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _substrateController,\r\n+          label: 'Substrate',\r\n+          icon: Icons.layers,\r\n+        ),\r\n+        SizedBox(height: 24),\r\n+        _buildGlobalParametersInputs(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildGlobalParametersInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          'Global Parameters',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _chamberTempController,\r\n+          label: 'Chamber Temperature (Â°C)',\r\n+          icon: Icons.thermostat,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _pressureController,\r\n+          label: 'Pressure (atm)',\r\n+          icon: Icons.compress,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required TextEditingController controller,\r\n+    required String label,\r\n+    required IconData icon,\r\n+    TextInputType keyboardType = TextInputType.text,\r\n+  }) {\r\n+    return TextField(\r\n+      controller: controller,\r\n+      style: TextStyle(color: DarkThemeColors.primaryText),\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n+        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n+        filled: true,\r\n+        fillColor: DarkThemeColors.inputFill,\r\n+        border: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide.none,\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsSection() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildStepsHeader(),\r\n+        SizedBox(height: 16),\r\n+        _buildStepsList(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsHeader() {\r\n+    return Row(\r\n+      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+      children: [\r\n+        Text(\r\n+          'Recipe Steps',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        ElevatedButton.icon(\r\n+          icon: Icon(Icons.add),\r\n+          label: Text('Add Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsList() {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, componentState) {\r\n+        return ReorderableListView(\r\n+          shrinkWrap: true,\r\n+          physics: NeverScrollableScrollPhysics(),\r\n+          children: _steps.asMap().entries.map((entry) {\r\n+            final index = entry.key;\r\n+            final step = entry.value;\r\n+            return _buildStepCard(step, index);\r\n+          }).toList(),\r\n+          onReorder: (oldIndex, newIndex) {\r\n+            setState(() {\r\n+              if (newIndex > oldIndex) {\r\n+                newIndex -= 1;\r\n+              }\r\n+              final RecipeStep item = _steps.removeAt(oldIndex);\r\n+              _steps.insert(newIndex, item);\r\n+            });\r\n+          },\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepCard(RecipeStep step, int index) {\r\n+    return Card(\r\n+      key: ValueKey(step),\r\n+      margin: EdgeInsets.only(bottom: 16),\r\n+      color: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ExpansionTile(\r\n+        title: Text(\r\n+          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        children: [\r\n+          Padding(\r\n+            padding: EdgeInsets.all(16),\r\n+            child: Column(\r\n+              crossAxisAlignment: CrossAxisAlignment.start,\r\n+              children: [\r\n+                _buildStepEditor(step),\r\n+                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ],\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(context, step, index),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () => _showDeleteStepDialog(context, index),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // show dialog to confirm deletion of a step\r\n+  void _showDeleteStepDialog(BuildContext context, int index) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Delete Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: Text(\r\n+            'Are you sure you want to delete this step?',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child: Text('Delete',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {\r\n+                  _steps.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepEditor(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return _buildLoopEditor(step);\r\n+      case StepType.valve:\r\n+        return _buildValveEditor(step);\r\n+      case StepType.purge:\r\n+        return _buildPurgeEditor(step);\r\n+      case StepType.setParameter:\r\n+        return _buildSetParameterEditor(step);\r\n+      default:\r\n+        return Text('Unknown Step Type',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText));\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildLoopEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildNumberInput(\r\n+          label: 'Number of iterations',\r\n+          value: step.parameters['iterations'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['iterations'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Temperature (Â°C)',\r\n+          value: step.parameters['temperature'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['temperature'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Pressure (atm)',\r\n+          value: step.parameters['pressure'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['pressure'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildValveEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildDropdown<ValveType>(\r\n+          label: 'Valve',\r\n+          value: step.parameters['valveType'],\r\n+          items: ValveType.values,\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['valveType'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Duration (seconds)',\r\n+          value: step.parameters['duration'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['duration'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildPurgeEditor(RecipeStep step) {\r\n+    return _buildNumberInput(\r\n+      label: 'Duration (seconds)',\r\n+      value: step.parameters['duration'],\r\n+      onChanged: (value) {\r\n+        setState(() {\r\n+          step.parameters['duration'] = value;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSetParameterEditor(RecipeStep step) {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, state) {\r\n+        if (state.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+\r\n+        final availableComponents = state.components.values.toList();\r\n+        final selectedComponent = step.parameters['component'] != null\r\n+            ? availableComponents.firstWhere(\r\n+                (c) => c.name == step.parameters['component'],\r\n+                orElse: () => availableComponents.first,\r\n+              )\r\n+            : availableComponents.first;\r\n+\r\n+        return Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            _buildDropdown<String>(\r\n+              label: 'Component',\r\n+              value: step.parameters['component'] ?? selectedComponent.name,\r\n+              items: availableComponents.map((c) => c.name).toList(),\r\n+              onChanged: (value) {\r\n+                setState(() {\r\n+                  step.parameters['component'] = value;\r\n+                  step.parameters['parameter'] = null;\r\n+                  step.parameters['value'] = null;\r\n+                });\r\n+              },\r\n+            ),\r\n+            if (selectedComponent != null) ...[\r\n+              SizedBox(height: 16),\r\n+              _buildDropdown<String>(\r\n+                label: 'Parameter',\r\n+                value: step.parameters['parameter'],\r\n+                items: selectedComponent.setValues.keys.toList(),\r\n+                onChanged: (value) {\r\n+                  setState(() {\r\n+                    step.parameters['parameter'] = value;\r\n+                    step.parameters['value'] = null;\r\n+                  });\r\n+                },\r\n+              ),\r\n+              if (step.parameters['parameter'] != null) ...[\r\n+                SizedBox(height: 16),\r\n+                _buildNumberInput(\r\n+                  label: 'Value',\r\n+                  value: step.parameters['value'],\r\n+                  onChanged: (value) {\r\n+                    setState(() {\r\n+                      step.parameters['value'] = value;\r\n+                    });\r\n+                  },\r\n+                ),\r\n+              ],\r\n+            ],\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        SizedBox(height: 16),\r\n+        Text(\r\n+          'Loop Steps:',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontWeight: FontWeight.w500,\r\n+            fontSize: 14,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 8),\r\n+        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n+          int index = entry.key;\r\n+          RecipeStep subStep = entry.value;\r\n+          return _buildSubStepCard(subStep, index, loopStep);\r\n+        }).toList(),\r\n+        SizedBox(height: 8),\r\n+        ElevatedButton(\r\n+          child: Text('Add Loop Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n+    return Card(\r\n+      margin: EdgeInsets.only(bottom: 8),\r\n+      color: DarkThemeColors.inputFill,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ListTile(\r\n+        title: Text(\r\n+          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n+        ),\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(\r\n+                context,\r\n+                step,\r\n+                index,\r\n+                parentStep: parentStep,\r\n+              ),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  parentStep.subSteps!.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildDropdown<T>({\r\n+    required String label,\r\n+    required T? value,\r\n+    required List<T> items,\r\n+    required Function(T?) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: DropdownButtonFormField<T>(\r\n+            value: value,\r\n+            onChanged: onChanged,\r\n+            items: items.map((T item) {\r\n+              return DropdownMenuItem<T>(\r\n+                value: item,\r\n+                child: Text(\r\n+                  item.toString(),\r\n+                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+            dropdownColor: DarkThemeColors.cardBackground,\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildNumberInput({\r\n+    required String label,\r\n+    required dynamic value,\r\n+    required Function(dynamic) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: TextFormField(\r\n+            initialValue: value?.toString() ?? '',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+            onChanged: (newValue) {\r\n+              onChanged(num.tryParse(newValue));\r\n+            },\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n+      {RecipeStep? parentStep}) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Edit Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: SingleChildScrollView(\r\n+            child: _buildStepEditor(step),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child:\r\n+                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {});\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n+    showModalBottomSheet(\r\n+      context: context,\r\n+      backgroundColor: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n+      ),\r\n+      builder: (BuildContext context) {\r\n+        return SafeArea(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              ListTile(\r\n+                title: Text('Add Step',\r\n+                    style: TextStyle(\r\n+                        color: DarkThemeColors.primaryText,\r\n+                        fontWeight: FontWeight.bold)),\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Loop',\r\n+                Icons.loop,\r\n+                StepType.loop,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Valve',\r\n+                Icons.arrow_forward,\r\n+                StepType.valve,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Purge',\r\n+                Icons.air,\r\n+                StepType.purge,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Set Parameter',\r\n+                Icons.settings,\r\n+                StepType.setParameter,\r\n+                parentStep,\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepTypeOption(\r\n+    BuildContext context,\r\n+    String title,\r\n+    IconData icon,\r\n+    StepType type,\r\n+    RecipeStep? parentStep,\r\n+  ) {\r\n+    return ListTile(\r\n+      leading: Icon(icon, color: DarkThemeColors.accent),\r\n+      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+      onTap: () {\r\n+        Navigator.pop(context);\r\n+        _addStep(type, parentStep?.subSteps ?? _steps);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _addStep(StepType type, List<RecipeStep> steps) {\r\n+    setState(() {\r\n+      switch (type) {\r\n+        case StepType.loop:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.loop,\r\n+            parameters: {\r\n+              'iterations': 1,\r\n+              'temperature': null,\r\n+              'pressure': null\r\n+            },\r\n+            subSteps: [],\r\n+          ));\r\n+          break;\r\n+        case StepType.valve:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.valve,\r\n+            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n+          ));\r\n+          break;\r\n+        case StepType.purge:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.purge,\r\n+            parameters: {'duration': 10},\r\n+          ));\r\n+          break;\r\n+        case StepType.setParameter:\r\n+          final componentState = context.read<ComponentListBloc>().state;\r\n+          final availableComponents = componentState.components.values.toList();\r\n+\r\n+          if (availableComponents.isNotEmpty) {\r\n+            final firstComponent = availableComponents.first;\r\n+            steps.add(RecipeStep(\r\n+              type: StepType.setParameter,\r\n+              parameters: {\r\n+                'component': firstComponent.name,\r\n+                'parameter': null,\r\n+                'value': null,\r\n+              },\r\n+            ));\r\n+          } else {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(content: Text('No components available')),\r\n+            );\r\n+          }\r\n+          break;\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  String _getStepTitle(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return 'Loop ${step.parameters['iterations']} times';\r\n+      case StepType.valve:\r\n+        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n+            'for ${step.parameters['duration']}s';\r\n+      case StepType.purge:\r\n+        return 'Purge for ${step.parameters['duration']}s';\r\n+      case StepType.setParameter:\r\n+        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n+            'to ${step.parameters['value']}';\r\n+      default:\r\n+        return 'Unknown Step';\r\n+    }\r\n+  }\r\n+\r\n+  void _saveRecipe(BuildContext context) {\r\n+    final errors = _validateRecipe();\r\n+    if (errors.isNotEmpty) {\r\n+      _showValidationErrors(errors);\r\n+      return;\r\n+    }\r\n+\r\n+    final newRecipe = Recipe(\r\n+      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      name: _nameController.text,\r\n+      substrate: _substrateController.text,\r\n+      steps: _steps,\r\n+      chamberTemperatureSetPoint:\r\n+          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n+      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n+    );\r\n+\r\n+    if (widget.recipeId == null) {\r\n+      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n+    } else {\r\n+      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n+    }\r\n+  }\r\n+\r\n+  List<String> _validateRecipe() {\r\n+    final errors = <String>[];\r\n+\r\n+    if (_nameController.text.isEmpty) {\r\n+      errors.add('Recipe name is required');\r\n+    }\r\n+\r\n+    if (_substrateController.text.isEmpty) {\r\n+      errors.add('Substrate is required');\r\n+    }\r\n+\r\n+    if (_steps.isEmpty) {\r\n+      errors.add('At least one step is required');\r\n+    }\r\n+\r\n+    // Validate all steps\r\n+    for (var i = 0; i < _steps.length; i++) {\r\n+      final stepErrors = _validateStep(_steps[i], i + 1);\r\n+      errors.addAll(stepErrors);\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n+    final errors = <String>[];\r\n+    final prefix = 'Step $stepNumber:';\r\n+\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        if (step.parameters['iterations'] == null ||\r\n+            step.parameters['iterations'] <= 0) {\r\n+          errors.add('$prefix Loop iterations must be greater than 0');\r\n+        }\r\n+        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n+          errors.add('$prefix Loop must contain at least one step');\r\n+        } else {\r\n+          for (var i = 0; i < step.subSteps!.length; i++) {\r\n+            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n+            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n+          }\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.valve:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Valve duration must be greater than 0');\r\n+        }\r\n+        if (step.parameters['valveType'] == null) {\r\n+          errors.add('$prefix Valve type must be selected');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.purge:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Purge duration must be greater than 0');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.setParameter:\r\n+        if (step.parameters['component'] == null) {\r\n+          errors.add('$prefix Component must be selected');\r\n+        }\r\n+        if (step.parameters['parameter'] == null) {\r\n+          errors.add('$prefix Parameter must be selected');\r\n+        }\r\n+        if (step.parameters['value'] == null) {\r\n+          errors.add('$prefix Value must be set');\r\n+        }\r\n+        break;\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  void _showValidationErrors(List<String> errors) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: Text(\r\n+          'Validation Errors',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: errors\r\n+                .map((error) => Padding(\r\n+                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n+                      child: Text(\r\n+                        'â¢ $error',\r\n+                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                      ),\r\n+                    ))\r\n+                .toList(),\r\n+          ),\r\n+        ),\r\n+        backgroundColor: DarkThemeColors.cardBackground,\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734434460200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -993,1988 +993,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-\r\n-\r\n-import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n-import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n-import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n-import 'package:experiment_planner/features/recipes/bloc/recipe_event.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../models/recipe.dart';\r\n-\r\n-class DarkThemeColors {\r\n-  static const Color background = Color(0xFF121212);\r\n-  static const Color cardBackground = Color(0xFF1E1E1E);\r\n-  static const Color primaryText = Color(0xFFE0E0E0);\r\n-  static const Color secondaryText = Color(0xFFB0B0B0);\r\n-  static const Color accent = Color(0xFF64FFDA);\r\n-  static const Color divider = Color(0xFF2A2A2A);\r\n-  static const Color inputFill = Color(0xFF2C2C2C);\r\n-}\r\n-\r\n-class RecipeDetailScreen extends StatefulWidget {\r\n-  final String? recipeId;\r\n-\r\n-  RecipeDetailScreen({this.recipeId});\r\n-\r\n-  @override\r\n-  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n-}\r\n-\r\n-class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n-    with TickerProviderStateMixin {\r\n-  late TextEditingController _nameController;\r\n-  late TextEditingController _substrateController;\r\n-  late TextEditingController _chamberTempController;\r\n-  late TextEditingController _pressureController;\r\n-  List<RecipeStep> _steps = [];\r\n-  late AnimationController _animationController;\r\n-  late Animation<double> _fadeAnimation;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _nameController = TextEditingController();\r\n-    _substrateController = TextEditingController();\r\n-    _chamberTempController = TextEditingController();\r\n-    _pressureController = TextEditingController();\r\n-    _animationController = AnimationController(\r\n-      vsync: this,\r\n-      duration: Duration(milliseconds: 300),\r\n-    );\r\n-    _fadeAnimation =\r\n-        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n-    _animationController.forward();\r\n-\r\n-    // Initialize blocs\r\n-    context.read<ComponentListBloc>().add(LoadComponents());\r\n-    if (widget.recipeId != null) {\r\n-      context.read<RecipeBloc>().add(LoadRecipes());\r\n-    }\r\n-\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-      _loadRecipeData();\r\n-    });\r\n-  }\r\n-\r\n-  void _loadRecipeData() {\r\n-    if (widget.recipeId != null) {\r\n-      final recipeState = context.read<RecipeBloc>().state;\r\n-      final recipe = recipeState.recipes.firstWhere(\r\n-        (r) => r.id == widget.recipeId,\r\n-        orElse: () => Recipe(\r\n-          id: widget.recipeId!,\r\n-          name: '',\r\n-          substrate: '',\r\n-          steps: [],\r\n-          chamberTemperatureSetPoint: 150.0,\r\n-          pressureSetPoint: 1.0,\r\n-        ),\r\n-      );\r\n-\r\n-      setState(() {\r\n-        _nameController.text = recipe.name;\r\n-        _substrateController.text = recipe.substrate;\r\n-        _chamberTempController.text =\r\n-            recipe.chamberTemperatureSetPoint.toString();\r\n-        _pressureController.text = recipe.pressureSetPoint.toString();\r\n-        _steps = List.from(recipe.steps);\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _substrateController.dispose();\r\n-    _chamberTempController.dispose();\r\n-    _pressureController.dispose();\r\n-    _animationController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return BlocListener<RecipeBloc, RecipeState>(\r\n-      listener: (context, state) {\r\n-        if (state.error != null) {\r\n-          ScaffoldMessenger.of(context).showSnackBar(\r\n-            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n-          );\r\n-        }\r\n-      },\r\n-      child: Scaffold(\r\n-        backgroundColor: DarkThemeColors.background,\r\n-        appBar: _buildAppBar(),\r\n-        body: _buildBody(),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  PreferredSizeWidget _buildAppBar() {\r\n-    return AppBar(\r\n-      elevation: 0,\r\n-      backgroundColor: DarkThemeColors.background,\r\n-      title: Text(\r\n-        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n-        style: TextStyle(\r\n-            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n-      ),\r\n-      actions: [\r\n-        BlocBuilder<RecipeBloc, RecipeState>(\r\n-          builder: (context, state) {\r\n-            return IconButton(\r\n-              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n-              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n-            );\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBody() {\r\n-    return BlocBuilder<RecipeBloc, RecipeState>(\r\n-      builder: (context, recipeState) {\r\n-        if (recipeState.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-        return SafeArea(\r\n-          child: FadeTransition(\r\n-            opacity: _fadeAnimation,\r\n-            child: SingleChildScrollView(\r\n-              child: Padding(\r\n-                padding: EdgeInsets.all(16.0),\r\n-                child: Column(\r\n-                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                  children: [\r\n-                    _buildBasicInputs(),\r\n-                    SizedBox(height: 24),\r\n-                    _buildStepsSection(),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBasicInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildTextField(\r\n-          controller: _nameController,\r\n-          label: 'Recipe Name',\r\n-          icon: Icons.title,\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _substrateController,\r\n-          label: 'Substrate',\r\n-          icon: Icons.layers,\r\n-        ),\r\n-        SizedBox(height: 24),\r\n-        _buildGlobalParametersInputs(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildGlobalParametersInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        Text(\r\n-          'Global Parameters',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _chamberTempController,\r\n-          label: 'Chamber Temperature (Â°C)',\r\n-          icon: Icons.thermostat,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _pressureController,\r\n-          label: 'Pressure (atm)',\r\n-          icon: Icons.compress,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required TextEditingController controller,\r\n-    required String label,\r\n-    required IconData icon,\r\n-    TextInputType keyboardType = TextInputType.text,\r\n-  }) {\r\n-    return TextField(\r\n-      controller: controller,\r\n-      style: TextStyle(color: DarkThemeColors.primaryText),\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n-        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n-        filled: true,\r\n-        fillColor: DarkThemeColors.inputFill,\r\n-        border: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide.none,\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsSection() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildStepsHeader(),\r\n-        SizedBox(height: 16),\r\n-        _buildStepsList(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsHeader() {\r\n-    return Row(\r\n-      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-      children: [\r\n-        Text(\r\n-          'Recipe Steps',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        ElevatedButton.icon(\r\n-          icon: Icon(Icons.add),\r\n-          label: Text('Add Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsList() {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, componentState) {\r\n-        return ReorderableListView(\r\n-          shrinkWrap: true,\r\n-          physics: NeverScrollableScrollPhysics(),\r\n-          children: _steps.asMap().entries.map((entry) {\r\n-            final index = entry.key;\r\n-            final step = entry.value;\r\n-            return _buildStepCard(step, index);\r\n-          }).toList(),\r\n-          onReorder: (oldIndex, newIndex) {\r\n-            setState(() {\r\n-              if (newIndex > oldIndex) {\r\n-                newIndex -= 1;\r\n-              }\r\n-              final RecipeStep item = _steps.removeAt(oldIndex);\r\n-              _steps.insert(newIndex, item);\r\n-            });\r\n-          },\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepCard(RecipeStep step, int index) {\r\n-    return Card(\r\n-      key: ValueKey(step),\r\n-      margin: EdgeInsets.only(bottom: 16),\r\n-      color: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ExpansionTile(\r\n-        title: Text(\r\n-          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        children: [\r\n-          Padding(\r\n-            padding: EdgeInsets.all(16),\r\n-            child: Column(\r\n-              crossAxisAlignment: CrossAxisAlignment.start,\r\n-              children: [\r\n-                _buildStepEditor(step),\r\n-                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ],\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(context, step, index),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () => _showDeleteStepDialog(context, index),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // show dialog to confirm deletion of a step\r\n-  void _showDeleteStepDialog(BuildContext context, int index) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Delete Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: Text(\r\n-            'Are you sure you want to delete this step?',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Delete',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {\r\n-                  _steps.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepEditor(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return _buildLoopEditor(step);\r\n-      case StepType.valve:\r\n-        return _buildValveEditor(step);\r\n-      case StepType.purge:\r\n-        return _buildPurgeEditor(step);\r\n-      case StepType.setParameter:\r\n-        return _buildSetParameterEditor(step);\r\n-      default:\r\n-        return Text('Unknown Step Type',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText));\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildLoopEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildNumberInput(\r\n-          label: 'Number of iterations',\r\n-          value: step.parameters['iterations'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['iterations'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Temperature (Â°C)',\r\n-          value: step.parameters['temperature'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['temperature'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Pressure (atm)',\r\n-          value: step.parameters['pressure'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['pressure'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildValveEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildDropdown<ValveType>(\r\n-          label: 'Valve',\r\n-          value: step.parameters['valveType'],\r\n-          items: ValveType.values,\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['valveType'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Duration (seconds)',\r\n-          value: step.parameters['duration'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['duration'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildPurgeEditor(RecipeStep step) {\r\n-    return _buildNumberInput(\r\n-      label: 'Duration (seconds)',\r\n-      value: step.parameters['duration'],\r\n-      onChanged: (value) {\r\n-        setState(() {\r\n-          step.parameters['duration'] = value;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSetParameterEditor(RecipeStep step) {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, state) {\r\n-        if (state.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-\r\n-        final availableComponents = state.components.values.toList();\r\n-        final selectedComponent = step.parameters['component'] != null\r\n-            ? availableComponents.firstWhere(\r\n-                (c) => c.name == step.parameters['component'],\r\n-                orElse: () => availableComponents.first,\r\n-              )\r\n-            : availableComponents.first;\r\n-\r\n-        return Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            _buildDropdown<String>(\r\n-              label: 'Component',\r\n-              value: step.parameters['component'] ?? selectedComponent.name,\r\n-              items: availableComponents.map((c) => c.name).toList(),\r\n-              onChanged: (value) {\r\n-                setState(() {\r\n-                  step.parameters['component'] = value;\r\n-                  step.parameters['parameter'] = null;\r\n-                  step.parameters['value'] = null;\r\n-                });\r\n-              },\r\n-            ),\r\n-            if (selectedComponent != null) ...[\r\n-              SizedBox(height: 16),\r\n-              _buildDropdown<String>(\r\n-                label: 'Parameter',\r\n-                value: step.parameters['parameter'],\r\n-                items: selectedComponent.setValues.keys.toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    step.parameters['parameter'] = value;\r\n-                    step.parameters['value'] = null;\r\n-                  });\r\n-                },\r\n-              ),\r\n-              if (step.parameters['parameter'] != null) ...[\r\n-                SizedBox(height: 16),\r\n-                _buildNumberInput(\r\n-                  label: 'Value',\r\n-                  value: step.parameters['value'],\r\n-                  onChanged: (value) {\r\n-                    setState(() {\r\n-                      step.parameters['value'] = value;\r\n-                    });\r\n-                  },\r\n-                ),\r\n-              ],\r\n-            ],\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        SizedBox(height: 16),\r\n-        Text(\r\n-          'Loop Steps:',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontWeight: FontWeight.w500,\r\n-            fontSize: 14,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 8),\r\n-        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n-          int index = entry.key;\r\n-          RecipeStep subStep = entry.value;\r\n-          return _buildSubStepCard(subStep, index, loopStep);\r\n-        }).toList(),\r\n-        SizedBox(height: 8),\r\n-        ElevatedButton(\r\n-          child: Text('Add Loop Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n-    return Card(\r\n-      margin: EdgeInsets.only(bottom: 8),\r\n-      color: DarkThemeColors.inputFill,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ListTile(\r\n-        title: Text(\r\n-          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n-        ),\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(\r\n-                context,\r\n-                step,\r\n-                index,\r\n-                parentStep: parentStep,\r\n-              ),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () {\r\n-                setState(() {\r\n-                  parentStep.subSteps!.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildDropdown<T>({\r\n-    required String label,\r\n-    required T? value,\r\n-    required List<T> items,\r\n-    required Function(T?) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: DropdownButtonFormField<T>(\r\n-            value: value,\r\n-            onChanged: onChanged,\r\n-            items: items.map((T item) {\r\n-              return DropdownMenuItem<T>(\r\n-                value: item,\r\n-                child: Text(\r\n-                  item.toString(),\r\n-                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                ),\r\n-              );\r\n-            }).toList(),\r\n-            dropdownColor: DarkThemeColors.cardBackground,\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildNumberInput({\r\n-    required String label,\r\n-    required dynamic value,\r\n-    required Function(dynamic) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: TextFormField(\r\n-            initialValue: value?.toString() ?? '',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-            onChanged: (newValue) {\r\n-              onChanged(num.tryParse(newValue));\r\n-            },\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n-      {RecipeStep? parentStep}) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Edit Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: SingleChildScrollView(\r\n-            child: _buildStepEditor(step),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child:\r\n-                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {});\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n-    showModalBottomSheet(\r\n-      context: context,\r\n-      backgroundColor: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(\r\n-        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n-      ),\r\n-      builder: (BuildContext context) {\r\n-        return SafeArea(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              ListTile(\r\n-                title: Text('Add Step',\r\n-                    style: TextStyle(\r\n-                        color: DarkThemeColors.primaryText,\r\n-                        fontWeight: FontWeight.bold)),\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Loop',\r\n-                Icons.loop,\r\n-                StepType.loop,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Valve',\r\n-                Icons.arrow_forward,\r\n-                StepType.valve,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Purge',\r\n-                Icons.air,\r\n-                StepType.purge,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Set Parameter',\r\n-                Icons.settings,\r\n-                StepType.setParameter,\r\n-                parentStep,\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepTypeOption(\r\n-    BuildContext context,\r\n-    String title,\r\n-    IconData icon,\r\n-    StepType type,\r\n-    RecipeStep? parentStep,\r\n-  ) {\r\n-    return ListTile(\r\n-      leading: Icon(icon, color: DarkThemeColors.accent),\r\n-      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-      onTap: () {\r\n-        Navigator.pop(context);\r\n-        _addStep(type, parentStep?.subSteps ?? _steps);\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _addStep(StepType type, List<RecipeStep> steps) {\r\n-    setState(() {\r\n-      switch (type) {\r\n-        case StepType.loop:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.loop,\r\n-            parameters: {\r\n-              'iterations': 1,\r\n-              'temperature': null,\r\n-              'pressure': null\r\n-            },\r\n-            subSteps: [],\r\n-          ));\r\n-          break;\r\n-        case StepType.valve:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.valve,\r\n-            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n-          ));\r\n-          break;\r\n-        case StepType.purge:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.purge,\r\n-            parameters: {'duration': 10},\r\n-          ));\r\n-          break;\r\n-        case StepType.setParameter:\r\n-          final componentState = context.read<ComponentListBloc>().state;\r\n-          final availableComponents = componentState.components.values.toList();\r\n-\r\n-          if (availableComponents.isNotEmpty) {\r\n-            final firstComponent = availableComponents.first;\r\n-            steps.add(RecipeStep(\r\n-              type: StepType.setParameter,\r\n-              parameters: {\r\n-                'component': firstComponent.name,\r\n-                'parameter': null,\r\n-                'value': null,\r\n-              },\r\n-            ));\r\n-          } else {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(content: Text('No components available')),\r\n-            );\r\n-          }\r\n-          break;\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  String _getStepTitle(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return 'Loop ${step.parameters['iterations']} times';\r\n-      case StepType.valve:\r\n-        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n-            'for ${step.parameters['duration']}s';\r\n-      case StepType.purge:\r\n-        return 'Purge for ${step.parameters['duration']}s';\r\n-      case StepType.setParameter:\r\n-        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n-            'to ${step.parameters['value']}';\r\n-      default:\r\n-        return 'Unknown Step';\r\n-    }\r\n-  }\r\n-\r\n-  void _saveRecipe(BuildContext context) {\r\n-    final errors = _validateRecipe();\r\n-    if (errors.isNotEmpty) {\r\n-      _showValidationErrors(errors);\r\n-      return;\r\n-    }\r\n-\r\n-    final newRecipe = Recipe(\r\n-      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n-      name: _nameController.text,\r\n-      substrate: _substrateController.text,\r\n-      steps: _steps,\r\n-      chamberTemperatureSetPoint:\r\n-          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n-      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n-    );\r\n-\r\n-    if (widget.recipeId == null) {\r\n-      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n-    } else {\r\n-      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n-    }\r\n-  }\r\n-\r\n-  List<String> _validateRecipe() {\r\n-    final errors = <String>[];\r\n-\r\n-    if (_nameController.text.isEmpty) {\r\n-      errors.add('Recipe name is required');\r\n-    }\r\n-\r\n-    if (_substrateController.text.isEmpty) {\r\n-      errors.add('Substrate is required');\r\n-    }\r\n-\r\n-    if (_steps.isEmpty) {\r\n-      errors.add('At least one step is required');\r\n-    }\r\n-\r\n-    // Validate all steps\r\n-    for (var i = 0; i < _steps.length; i++) {\r\n-      final stepErrors = _validateStep(_steps[i], i + 1);\r\n-      errors.addAll(stepErrors);\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n-    final errors = <String>[];\r\n-    final prefix = 'Step $stepNumber:';\r\n-\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        if (step.parameters['iterations'] == null ||\r\n-            step.parameters['iterations'] <= 0) {\r\n-          errors.add('$prefix Loop iterations must be greater than 0');\r\n-        }\r\n-        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n-          errors.add('$prefix Loop must contain at least one step');\r\n-        } else {\r\n-          for (var i = 0; i < step.subSteps!.length; i++) {\r\n-            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n-            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n-          }\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.valve:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Valve duration must be greater than 0');\r\n-        }\r\n-        if (step.parameters['valveType'] == null) {\r\n-          errors.add('$prefix Valve type must be selected');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.purge:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Purge duration must be greater than 0');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.setParameter:\r\n-        if (step.parameters['component'] == null) {\r\n-          errors.add('$prefix Component must be selected');\r\n-        }\r\n-        if (step.parameters['parameter'] == null) {\r\n-          errors.add('$prefix Parameter must be selected');\r\n-        }\r\n-        if (step.parameters['value'] == null) {\r\n-          errors.add('$prefix Value must be set');\r\n-        }\r\n-        break;\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  void _showValidationErrors(List<String> errors) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: Text(\r\n-          'Validation Errors',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        content: SingleChildScrollView(\r\n-          child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.start,\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: errors\r\n-                .map((error) => Padding(\r\n-                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n-                      child: Text(\r\n-                        'â¢ $error',\r\n-                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                      ),\r\n-                    ))\r\n-                .toList(),\r\n-          ),\r\n-        ),\r\n-        backgroundColor: DarkThemeColors.cardBackground,\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../models/recipe.dart';\r\n-\r\n-class DarkThemeColors {\r\n-  static const Color background = Color(0xFF121212);\r\n-  static const Color cardBackground = Color(0xFF1E1E1E);\r\n-  static const Color primaryText = Color(0xFFE0E0E0);\r\n-  static const Color secondaryText = Color(0xFFB0B0B0);\r\n-  static const Color accent = Color(0xFF64FFDA);\r\n-  static const Color divider = Color(0xFF2A2A2A);\r\n-  static const Color inputFill = Color(0xFF2C2C2C);\r\n-}\r\n-\r\n-class RecipeDetailScreen extends StatefulWidget {\r\n-  final String? recipeId;\r\n-\r\n-  RecipeDetailScreen({this.recipeId});\r\n-\r\n-  @override\r\n-  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n-}\r\n-\r\n-class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n-    with TickerProviderStateMixin {\r\n-  late TextEditingController _nameController;\r\n-  late TextEditingController _substrateController;\r\n-  late TextEditingController _chamberTempController;\r\n-  late TextEditingController _pressureController;\r\n-  List<RecipeStep> _steps = [];\r\n-  late AnimationController _animationController;\r\n-  late Animation<double> _fadeAnimation;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _nameController = TextEditingController();\r\n-    _substrateController = TextEditingController();\r\n-    _chamberTempController = TextEditingController();\r\n-    _pressureController = TextEditingController();\r\n-    _animationController = AnimationController(\r\n-      vsync: this,\r\n-      duration: Duration(milliseconds: 300),\r\n-    );\r\n-    _fadeAnimation =\r\n-        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n-    _animationController.forward();\r\n-\r\n-    // Initialize blocs\r\n-    context.read<ComponentListBloc>().add(LoadComponents());\r\n-    if (widget.recipeId != null) {\r\n-      context.read<RecipeBloc>().add(LoadRecipes());\r\n-    }\r\n-\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-      _loadRecipeData();\r\n-    });\r\n-  }\r\n-\r\n-  void _loadRecipeData() {\r\n-    if (widget.recipeId != null) {\r\n-      final recipeState = context.read<RecipeBloc>().state;\r\n-      final recipe = recipeState.recipes.firstWhere(\r\n-        (r) => r.id == widget.recipeId,\r\n-        orElse: () => Recipe(\r\n-          id: widget.recipeId!,\r\n-          name: '',\r\n-          substrate: '',\r\n-          steps: [],\r\n-          chamberTemperatureSetPoint: 150.0,\r\n-          pressureSetPoint: 1.0,\r\n-        ),\r\n-      );\r\n-\r\n-      setState(() {\r\n-        _nameController.text = recipe.name;\r\n-        _substrateController.text = recipe.substrate;\r\n-        _chamberTempController.text =\r\n-            recipe.chamberTemperatureSetPoint.toString();\r\n-        _pressureController.text = recipe.pressureSetPoint.toString();\r\n-        _steps = List.from(recipe.steps);\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _substrateController.dispose();\r\n-    _chamberTempController.dispose();\r\n-    _pressureController.dispose();\r\n-    _animationController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return BlocListener<RecipeBloc, RecipeState>(\r\n-      listener: (context, state) {\r\n-        if (state.error != null) {\r\n-          ScaffoldMessenger.of(context).showSnackBar(\r\n-            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n-          );\r\n-        }\r\n-      },\r\n-      child: Scaffold(\r\n-        backgroundColor: DarkThemeColors.background,\r\n-        appBar: _buildAppBar(),\r\n-        body: _buildBody(),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  PreferredSizeWidget _buildAppBar() {\r\n-    return AppBar(\r\n-      elevation: 0,\r\n-      backgroundColor: DarkThemeColors.background,\r\n-      title: Text(\r\n-        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n-        style: TextStyle(\r\n-            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n-      ),\r\n-      actions: [\r\n-        BlocBuilder<RecipeBloc, RecipeState>(\r\n-          builder: (context, state) {\r\n-            return IconButton(\r\n-              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n-              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n-            );\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBody() {\r\n-    return BlocBuilder<RecipeBloc, RecipeState>(\r\n-      builder: (context, recipeState) {\r\n-        if (recipeState.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-        return SafeArea(\r\n-          child: FadeTransition(\r\n-            opacity: _fadeAnimation,\r\n-            child: SingleChildScrollView(\r\n-              child: Padding(\r\n-                padding: EdgeInsets.all(16.0),\r\n-                child: Column(\r\n-                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                  children: [\r\n-                    _buildBasicInputs(),\r\n-                    SizedBox(height: 24),\r\n-                    _buildStepsSection(),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBasicInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildTextField(\r\n-          controller: _nameController,\r\n-          label: 'Recipe Name',\r\n-          icon: Icons.title,\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _substrateController,\r\n-          label: 'Substrate',\r\n-          icon: Icons.layers,\r\n-        ),\r\n-        SizedBox(height: 24),\r\n-        _buildGlobalParametersInputs(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildGlobalParametersInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        Text(\r\n-          'Global Parameters',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _chamberTempController,\r\n-          label: 'Chamber Temperature (Â°C)',\r\n-          icon: Icons.thermostat,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _pressureController,\r\n-          label: 'Pressure (atm)',\r\n-          icon: Icons.compress,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required TextEditingController controller,\r\n-    required String label,\r\n-    required IconData icon,\r\n-    TextInputType keyboardType = TextInputType.text,\r\n-  }) {\r\n-    return TextField(\r\n-      controller: controller,\r\n-      style: TextStyle(color: DarkThemeColors.primaryText),\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n-        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n-        filled: true,\r\n-        fillColor: DarkThemeColors.inputFill,\r\n-        border: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide.none,\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsSection() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildStepsHeader(),\r\n-        SizedBox(height: 16),\r\n-        _buildStepsList(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsHeader() {\r\n-    return Row(\r\n-      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-      children: [\r\n-        Text(\r\n-          'Recipe Steps',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        ElevatedButton.icon(\r\n-          icon: Icon(Icons.add),\r\n-          label: Text('Add Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsList() {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, componentState) {\r\n-        return ReorderableListView(\r\n-          shrinkWrap: true,\r\n-          physics: NeverScrollableScrollPhysics(),\r\n-          children: _steps.asMap().entries.map((entry) {\r\n-            final index = entry.key;\r\n-            final step = entry.value;\r\n-            return _buildStepCard(step, index);\r\n-          }).toList(),\r\n-          onReorder: (oldIndex, newIndex) {\r\n-            setState(() {\r\n-              if (newIndex > oldIndex) {\r\n-                newIndex -= 1;\r\n-              }\r\n-              final RecipeStep item = _steps.removeAt(oldIndex);\r\n-              _steps.insert(newIndex, item);\r\n-            });\r\n-          },\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepCard(RecipeStep step, int index) {\r\n-    return Card(\r\n-      key: ValueKey(step),\r\n-      margin: EdgeInsets.only(bottom: 16),\r\n-      color: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ExpansionTile(\r\n-        title: Text(\r\n-          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        children: [\r\n-          Padding(\r\n-            padding: EdgeInsets.all(16),\r\n-            child: Column(\r\n-              crossAxisAlignment: CrossAxisAlignment.start,\r\n-              children: [\r\n-                _buildStepEditor(step),\r\n-                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ],\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(context, step, index),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () => _showDeleteStepDialog(context, index),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // show dialog to confirm deletion of a step\r\n-  void _showDeleteStepDialog(BuildContext context, int index) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Delete Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: Text(\r\n-            'Are you sure you want to delete this step?',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Delete',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {\r\n-                  _steps.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepEditor(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return _buildLoopEditor(step);\r\n-      case StepType.valve:\r\n-        return _buildValveEditor(step);\r\n-      case StepType.purge:\r\n-        return _buildPurgeEditor(step);\r\n-      case StepType.setParameter:\r\n-        return _buildSetParameterEditor(step);\r\n-      default:\r\n-        return Text('Unknown Step Type',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText));\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildLoopEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildNumberInput(\r\n-          label: 'Number of iterations',\r\n-          value: step.parameters['iterations'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['iterations'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Temperature (Â°C)',\r\n-          value: step.parameters['temperature'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['temperature'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Pressure (atm)',\r\n-          value: step.parameters['pressure'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['pressure'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildValveEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildDropdown<ValveType>(\r\n-          label: 'Valve',\r\n-          value: step.parameters['valveType'],\r\n-          items: ValveType.values,\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['valveType'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Duration (seconds)',\r\n-          value: step.parameters['duration'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['duration'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildPurgeEditor(RecipeStep step) {\r\n-    return _buildNumberInput(\r\n-      label: 'Duration (seconds)',\r\n-      value: step.parameters['duration'],\r\n-      onChanged: (value) {\r\n-        setState(() {\r\n-          step.parameters['duration'] = value;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSetParameterEditor(RecipeStep step) {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, state) {\r\n-        if (state.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-\r\n-        final availableComponents = state.components.values.toList();\r\n-        final selectedComponent = step.parameters['component'] != null\r\n-            ? availableComponents.firstWhere(\r\n-                (c) => c.name == step.parameters['component'],\r\n-                orElse: () => availableComponents.first,\r\n-              )\r\n-            : availableComponents.first;\r\n-\r\n-        return Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            _buildDropdown<String>(\r\n-              label: 'Component',\r\n-              value: step.parameters['component'] ?? selectedComponent.name,\r\n-              items: availableComponents.map((c) => c.name).toList(),\r\n-              onChanged: (value) {\r\n-                setState(() {\r\n-                  step.parameters['component'] = value;\r\n-                  step.parameters['parameter'] = null;\r\n-                  step.parameters['value'] = null;\r\n-                });\r\n-              },\r\n-            ),\r\n-            if (selectedComponent != null) ...[\r\n-              SizedBox(height: 16),\r\n-              _buildDropdown<String>(\r\n-                label: 'Parameter',\r\n-                value: step.parameters['parameter'],\r\n-                items: selectedComponent.setValues.keys.toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    step.parameters['parameter'] = value;\r\n-                    step.parameters['value'] = null;\r\n-                  });\r\n-                },\r\n-              ),\r\n-              if (step.parameters['parameter'] != null) ...[\r\n-                SizedBox(height: 16),\r\n-                _buildNumberInput(\r\n-                  label: 'Value',\r\n-                  value: step.parameters['value'],\r\n-                  onChanged: (value) {\r\n-                    setState(() {\r\n-                      step.parameters['value'] = value;\r\n-                    });\r\n-                  },\r\n-                ),\r\n-              ],\r\n-            ],\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        SizedBox(height: 16),\r\n-        Text(\r\n-          'Loop Steps:',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontWeight: FontWeight.w500,\r\n-            fontSize: 14,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 8),\r\n-        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n-          int index = entry.key;\r\n-          RecipeStep subStep = entry.value;\r\n-          return _buildSubStepCard(subStep, index, loopStep);\r\n-        }).toList(),\r\n-        SizedBox(height: 8),\r\n-        ElevatedButton(\r\n-          child: Text('Add Loop Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n-    return Card(\r\n-      margin: EdgeInsets.only(bottom: 8),\r\n-      color: DarkThemeColors.inputFill,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ListTile(\r\n-        title: Text(\r\n-          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n-        ),\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(\r\n-                context,\r\n-                step,\r\n-                index,\r\n-                parentStep: parentStep,\r\n-              ),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () {\r\n-                setState(() {\r\n-                  parentStep.subSteps!.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildDropdown<T>({\r\n-    required String label,\r\n-    required T? value,\r\n-    required List<T> items,\r\n-    required Function(T?) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: DropdownButtonFormField<T>(\r\n-            value: value,\r\n-            onChanged: onChanged,\r\n-            items: items.map((T item) {\r\n-              return DropdownMenuItem<T>(\r\n-                value: item,\r\n-                child: Text(\r\n-                  item.toString(),\r\n-                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                ),\r\n-              );\r\n-            }).toList(),\r\n-            dropdownColor: DarkThemeColors.cardBackground,\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildNumberInput({\r\n-    required String label,\r\n-    required dynamic value,\r\n-    required Function(dynamic) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: TextFormField(\r\n-            initialValue: value?.toString() ?? '',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-            onChanged: (newValue) {\r\n-              onChanged(num.tryParse(newValue));\r\n-            },\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n-      {RecipeStep? parentStep}) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Edit Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: SingleChildScrollView(\r\n-            child: _buildStepEditor(step),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child:\r\n-                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {});\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n-    showModalBottomSheet(\r\n-      context: context,\r\n-      backgroundColor: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(\r\n-        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n-      ),\r\n-      builder: (BuildContext context) {\r\n-        return SafeArea(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              ListTile(\r\n-                title: Text('Add Step',\r\n-                    style: TextStyle(\r\n-                        color: DarkThemeColors.primaryText,\r\n-                        fontWeight: FontWeight.bold)),\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Loop',\r\n-                Icons.loop,\r\n-                StepType.loop,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Valve',\r\n-                Icons.arrow_forward,\r\n-                StepType.valve,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Purge',\r\n-                Icons.air,\r\n-                StepType.purge,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Set Parameter',\r\n-                Icons.settings,\r\n-                StepType.setParameter,\r\n-                parentStep,\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepTypeOption(\r\n-    BuildContext context,\r\n-    String title,\r\n-    IconData icon,\r\n-    StepType type,\r\n-    RecipeStep? parentStep,\r\n-  ) {\r\n-    return ListTile(\r\n-      leading: Icon(icon, color: DarkThemeColors.accent),\r\n-      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-      onTap: () {\r\n-        Navigator.pop(context);\r\n-        _addStep(type, parentStep?.subSteps ?? _steps);\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _addStep(StepType type, List<RecipeStep> steps) {\r\n-    setState(() {\r\n-      switch (type) {\r\n-        case StepType.loop:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.loop,\r\n-            parameters: {\r\n-              'iterations': 1,\r\n-              'temperature': null,\r\n-              'pressure': null\r\n-            },\r\n-            subSteps: [],\r\n-          ));\r\n-          break;\r\n-        case StepType.valve:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.valve,\r\n-            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n-          ));\r\n-          break;\r\n-        case StepType.purge:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.purge,\r\n-            parameters: {'duration': 10},\r\n-          ));\r\n-          break;\r\n-        case StepType.setParameter:\r\n-          final componentState = context.read<ComponentListBloc>().state;\r\n-          final availableComponents = componentState.components.values.toList();\r\n-\r\n-          if (availableComponents.isNotEmpty) {\r\n-            final firstComponent = availableComponents.first;\r\n-            steps.add(RecipeStep(\r\n-              type: StepType.setParameter,\r\n-              parameters: {\r\n-                'component': firstComponent.name,\r\n-                'parameter': null,\r\n-                'value': null,\r\n-              },\r\n-            ));\r\n-          } else {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(content: Text('No components available')),\r\n-            );\r\n-          }\r\n-          break;\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  String _getStepTitle(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return 'Loop ${step.parameters['iterations']} times';\r\n-      case StepType.valve:\r\n-        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n-            'for ${step.parameters['duration']}s';\r\n-      case StepType.purge:\r\n-        return 'Purge for ${step.parameters['duration']}s';\r\n-      case StepType.setParameter:\r\n-        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n-            'to ${step.parameters['value']}';\r\n-      default:\r\n-        return 'Unknown Step';\r\n-    }\r\n-  }\r\n-\r\n-  void _saveRecipe(BuildContext context) {\r\n-    final errors = _validateRecipe();\r\n-    if (errors.isNotEmpty) {\r\n-      _showValidationErrors(errors);\r\n-      return;\r\n-    }\r\n-\r\n-    final newRecipe = Recipe(\r\n-      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n-      name: _nameController.text,\r\n-      substrate: _substrateController.text,\r\n-      steps: _steps,\r\n-      chamberTemperatureSetPoint:\r\n-          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n-      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n-    );\r\n-\r\n-    if (widget.recipeId == null) {\r\n-      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n-    } else {\r\n-      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n-    }\r\n-  }\r\n-\r\n-  List<String> _validateRecipe() {\r\n-    final errors = <String>[];\r\n-\r\n-    if (_nameController.text.isEmpty) {\r\n-      errors.add('Recipe name is required');\r\n-    }\r\n-\r\n-    if (_substrateController.text.isEmpty) {\r\n-      errors.add('Substrate is required');\r\n-    }\r\n-\r\n-    if (_steps.isEmpty) {\r\n-      errors.add('At least one step is required');\r\n-    }\r\n-\r\n-    // Validate all steps\r\n-    for (var i = 0; i < _steps.length; i++) {\r\n-      final stepErrors = _validateStep(_steps[i], i + 1);\r\n-      errors.addAll(stepErrors);\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n-    final errors = <String>[];\r\n-    final prefix = 'Step $stepNumber:';\r\n-\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        if (step.parameters['iterations'] == null ||\r\n-            step.parameters['iterations'] <= 0) {\r\n-          errors.add('$prefix Loop iterations must be greater than 0');\r\n-        }\r\n-        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n-          errors.add('$prefix Loop must contain at least one step');\r\n-        } else {\r\n-          for (var i = 0; i < step.subSteps!.length; i++) {\r\n-            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n-            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n-          }\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.valve:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Valve duration must be greater than 0');\r\n-        }\r\n-        if (step.parameters['valveType'] == null) {\r\n-          errors.add('$prefix Valve type must be selected');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.purge:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Purge duration must be greater than 0');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.setParameter:\r\n-        if (step.parameters['component'] == null) {\r\n-          errors.add('$prefix Component must be selected');\r\n-        }\r\n-        if (step.parameters['parameter'] == null) {\r\n-          errors.add('$prefix Parameter must be selected');\r\n-        }\r\n-        if (step.parameters['value'] == null) {\r\n-          errors.add('$prefix Value must be set');\r\n-        }\r\n-        break;\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  void _showValidationErrors(List<String> errors) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: Text(\r\n-          'Validation Errors',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        content: SingleChildScrollView(\r\n-          child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.start,\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: errors\r\n-                .map((error) => Padding(\r\n-                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n-                      child: Text(\r\n-                        'â¢ $error',\r\n-                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                      ),\r\n-                    ))\r\n-                .toList(),\r\n-          ),\r\n-        ),\r\n-        backgroundColor: DarkThemeColors.cardBackground,\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1734434698101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,996 @@\n+\r\n+\r\n+import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_event.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../models/recipe.dart';\r\n+\r\n+class DarkThemeColors {\r\n+  static const Color background = Color(0xFF121212);\r\n+  static const Color cardBackground = Color(0xFF1E1E1E);\r\n+  static const Color primaryText = Color(0xFFE0E0E0);\r\n+  static const Color secondaryText = Color(0xFFB0B0B0);\r\n+  static const Color accent = Color(0xFF64FFDA);\r\n+  static const Color divider = Color(0xFF2A2A2A);\r\n+  static const Color inputFill = Color(0xFF2C2C2C);\r\n+}\r\n+\r\n+class RecipeDetailScreen extends StatefulWidget {\r\n+  final String? recipeId;\r\n+\r\n+  RecipeDetailScreen({this.recipeId});\r\n+\r\n+  @override\r\n+  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n+}\r\n+\r\n+class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n+    with TickerProviderStateMixin {\r\n+  late TextEditingController _nameController;\r\n+  late TextEditingController _substrateController;\r\n+  late TextEditingController _chamberTempController;\r\n+  late TextEditingController _pressureController;\r\n+  List<RecipeStep> _steps = [];\r\n+  late AnimationController _animationController;\r\n+  late Animation<double> _fadeAnimation;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _nameController = TextEditingController();\r\n+    _substrateController = TextEditingController();\r\n+    _chamberTempController = TextEditingController();\r\n+    _pressureController = TextEditingController();\r\n+    _animationController = AnimationController(\r\n+      vsync: this,\r\n+      duration: Duration(milliseconds: 300),\r\n+    );\r\n+    _fadeAnimation =\r\n+        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n+    _animationController.forward();\r\n+\r\n+    // Initialize blocs\r\n+    context.read<ComponentListBloc>().add(LoadComponents());\r\n+    if (widget.recipeId != null) {\r\n+      context.read<RecipeBloc>().add(LoadRecipes());\r\n+    }\r\n+\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _loadRecipeData();\r\n+    });\r\n+  }\r\n+\r\n+  void _loadRecipeData() {\r\n+    if (widget.recipeId != null) {\r\n+      final recipeState = context.read<RecipeBloc>().state;\r\n+      final recipe = recipeState.recipes.firstWhere(\r\n+        (r) => r.id == widget.recipeId,\r\n+        orElse: () => Recipe(\r\n+          id: widget.recipeId!,\r\n+          name: '',\r\n+          substrate: '',\r\n+          steps: [],\r\n+          chamberTemperatureSetPoint: 150.0,\r\n+          pressureSetPoint: 1.0,\r\n+        ),\r\n+      );\r\n+\r\n+      setState(() {\r\n+        _nameController.text = recipe.name;\r\n+        _substrateController.text = recipe.substrate;\r\n+        _chamberTempController.text =\r\n+            recipe.chamberTemperatureSetPoint.toString();\r\n+        _pressureController.text = recipe.pressureSetPoint.toString();\r\n+        _steps = List.from(recipe.steps);\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _nameController.dispose();\r\n+    _substrateController.dispose();\r\n+    _chamberTempController.dispose();\r\n+    _pressureController.dispose();\r\n+    _animationController.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocListener<RecipeBloc, RecipeState>(\r\n+      listener: (context, state) {\r\n+        if (state.error != null) {\r\n+          ScaffoldMessenger.of(context).showSnackBar(\r\n+            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n+          );\r\n+        }\r\n+      },\r\n+      child: Scaffold(\r\n+        backgroundColor: DarkThemeColors.background,\r\n+        appBar: _buildAppBar(),\r\n+        body: _buildBody(),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  PreferredSizeWidget _buildAppBar() {\r\n+    return AppBar(\r\n+      elevation: 0,\r\n+      backgroundColor: DarkThemeColors.background,\r\n+      title: Text(\r\n+        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n+        style: TextStyle(\r\n+            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n+      ),\r\n+      actions: [\r\n+        BlocBuilder<RecipeBloc, RecipeState>(\r\n+          builder: (context, state) {\r\n+            return IconButton(\r\n+              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n+              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n+            );\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBody() {\r\n+    return BlocBuilder<RecipeBloc, RecipeState>(\r\n+      builder: (context, recipeState) {\r\n+        if (recipeState.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+        return SafeArea(\r\n+          child: FadeTransition(\r\n+            opacity: _fadeAnimation,\r\n+            child: SingleChildScrollView(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.all(16.0),\r\n+                child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  children: [\r\n+                    _buildBasicInputs(),\r\n+                    SizedBox(height: 24),\r\n+                    _buildStepsSection(),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildBasicInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildTextField(\r\n+          controller: _nameController,\r\n+          label: 'Recipe Name',\r\n+          icon: Icons.title,\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _substrateController,\r\n+          label: 'Substrate',\r\n+          icon: Icons.layers,\r\n+        ),\r\n+        SizedBox(height: 24),\r\n+        _buildGlobalParametersInputs(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildGlobalParametersInputs() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          'Global Parameters',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _chamberTempController,\r\n+          label: 'Chamber Temperature (Â°C)',\r\n+          icon: Icons.thermostat,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildTextField(\r\n+          controller: _pressureController,\r\n+          label: 'Pressure (atm)',\r\n+          icon: Icons.compress,\r\n+          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildTextField({\r\n+    required TextEditingController controller,\r\n+    required String label,\r\n+    required IconData icon,\r\n+    TextInputType keyboardType = TextInputType.text,\r\n+  }) {\r\n+    return TextField(\r\n+      controller: controller,\r\n+      style: TextStyle(color: DarkThemeColors.primaryText),\r\n+      keyboardType: keyboardType,\r\n+      decoration: InputDecoration(\r\n+        labelText: label,\r\n+        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n+        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n+        filled: true,\r\n+        fillColor: DarkThemeColors.inputFill,\r\n+        border: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide.none,\r\n+        ),\r\n+        focusedBorder: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsSection() {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        _buildStepsHeader(),\r\n+        SizedBox(height: 16),\r\n+        _buildStepsList(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsHeader() {\r\n+    return Row(\r\n+      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+      children: [\r\n+        Text(\r\n+          'Recipe Steps',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontSize: 18,\r\n+            fontWeight: FontWeight.w500,\r\n+          ),\r\n+        ),\r\n+        ElevatedButton.icon(\r\n+          icon: Icon(Icons.add),\r\n+          label: Text('Add Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepsList() {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, componentState) {\r\n+        return ReorderableListView(\r\n+          shrinkWrap: true,\r\n+          physics: NeverScrollableScrollPhysics(),\r\n+          children: _steps.asMap().entries.map((entry) {\r\n+            final index = entry.key;\r\n+            final step = entry.value;\r\n+            return _buildStepCard(step, index);\r\n+          }).toList(),\r\n+          onReorder: (oldIndex, newIndex) {\r\n+            setState(() {\r\n+              if (newIndex > oldIndex) {\r\n+                newIndex -= 1;\r\n+              }\r\n+              final RecipeStep item = _steps.removeAt(oldIndex);\r\n+              _steps.insert(newIndex, item);\r\n+            });\r\n+          },\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepCard(RecipeStep step, int index) {\r\n+    return Card(\r\n+      key: ValueKey(step),\r\n+      margin: EdgeInsets.only(bottom: 16),\r\n+      color: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ExpansionTile(\r\n+        title: Text(\r\n+          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        children: [\r\n+          Padding(\r\n+            padding: EdgeInsets.all(16),\r\n+            child: Column(\r\n+              crossAxisAlignment: CrossAxisAlignment.start,\r\n+              children: [\r\n+                _buildStepEditor(step),\r\n+                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ],\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(context, step, index),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () => _showDeleteStepDialog(context, index),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // show dialog to confirm deletion of a step\r\n+  void _showDeleteStepDialog(BuildContext context, int index) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Delete Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: Text(\r\n+            'Are you sure you want to delete this step?',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child: Text('Delete',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {\r\n+                  _steps.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepEditor(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return _buildLoopEditor(step);\r\n+      case StepType.valve:\r\n+        return _buildValveEditor(step);\r\n+      case StepType.purge:\r\n+        return _buildPurgeEditor(step);\r\n+      case StepType.setParameter:\r\n+        return _buildSetParameterEditor(step);\r\n+      default:\r\n+        return Text('Unknown Step Type',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText));\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildLoopEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildNumberInput(\r\n+          label: 'Number of iterations',\r\n+          value: step.parameters['iterations'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['iterations'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Temperature (Â°C)',\r\n+          value: step.parameters['temperature'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['temperature'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Pressure (atm)',\r\n+          value: step.parameters['pressure'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['pressure'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildValveEditor(RecipeStep step) {\r\n+    return Column(\r\n+      children: [\r\n+        _buildDropdown<ValveType>(\r\n+          label: 'Valve',\r\n+          value: step.parameters['valveType'],\r\n+          items: ValveType.values,\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['valveType'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+        SizedBox(height: 16),\r\n+        _buildNumberInput(\r\n+          label: 'Duration (seconds)',\r\n+          value: step.parameters['duration'],\r\n+          onChanged: (value) {\r\n+            setState(() {\r\n+              step.parameters['duration'] = value;\r\n+            });\r\n+          },\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildPurgeEditor(RecipeStep step) {\r\n+    return _buildNumberInput(\r\n+      label: 'Duration (seconds)',\r\n+      value: step.parameters['duration'],\r\n+      onChanged: (value) {\r\n+        setState(() {\r\n+          step.parameters['duration'] = value;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSetParameterEditor(RecipeStep step) {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, state) {\r\n+        if (state.isLoading) {\r\n+          return Center(child: CircularProgressIndicator());\r\n+        }\r\n+\r\n+        final availableComponents = state.components.values.toList();\r\n+        final selectedComponent = step.parameters['component'] != null\r\n+            ? availableComponents.firstWhere(\r\n+                (c) => c.name == step.parameters['component'],\r\n+                orElse: () => availableComponents.first,\r\n+              )\r\n+            : availableComponents.first;\r\n+\r\n+        return Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.start,\r\n+          children: [\r\n+            _buildDropdown<String>(\r\n+              label: 'Component',\r\n+              value: step.parameters['component'] ?? selectedComponent.name,\r\n+              items: availableComponents.map((c) => c.name).toList(),\r\n+              onChanged: (value) {\r\n+                setState(() {\r\n+                  step.parameters['component'] = value;\r\n+                  step.parameters['parameter'] = null;\r\n+                  step.parameters['value'] = null;\r\n+                });\r\n+              },\r\n+            ),\r\n+            if (selectedComponent != null) ...[\r\n+              SizedBox(height: 16),\r\n+              _buildDropdown<String>(\r\n+                label: 'Parameter',\r\n+                value: step.parameters['parameter'],\r\n+                items: selectedComponent.setValues.keys.toList(),\r\n+                onChanged: (value) {\r\n+                  setState(() {\r\n+                    step.parameters['parameter'] = value;\r\n+                    step.parameters['value'] = null;\r\n+                  });\r\n+                },\r\n+              ),\r\n+              if (step.parameters['parameter'] != null) ...[\r\n+                SizedBox(height: 16),\r\n+                _buildNumberInput(\r\n+                  label: 'Value',\r\n+                  value: step.parameters['value'],\r\n+                  onChanged: (value) {\r\n+                    setState(() {\r\n+                      step.parameters['value'] = value;\r\n+                    });\r\n+                  },\r\n+                ),\r\n+              ],\r\n+            ],\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n+    return Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        SizedBox(height: 16),\r\n+        Text(\r\n+          'Loop Steps:',\r\n+          style: TextStyle(\r\n+            color: DarkThemeColors.primaryText,\r\n+            fontWeight: FontWeight.w500,\r\n+            fontSize: 14,\r\n+          ),\r\n+        ),\r\n+        SizedBox(height: 8),\r\n+        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n+          int index = entry.key;\r\n+          RecipeStep subStep = entry.value;\r\n+          return _buildSubStepCard(subStep, index, loopStep);\r\n+        }).toList(),\r\n+        SizedBox(height: 8),\r\n+        ElevatedButton(\r\n+          child: Text('Add Loop Step'),\r\n+          style: ElevatedButton.styleFrom(\r\n+            foregroundColor: DarkThemeColors.background,\r\n+            backgroundColor: DarkThemeColors.accent,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n+          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n+    return Card(\r\n+      margin: EdgeInsets.only(bottom: 8),\r\n+      color: DarkThemeColors.inputFill,\r\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+      child: ListTile(\r\n+        title: Text(\r\n+          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n+        ),\r\n+        trailing: Row(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            IconButton(\r\n+              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n+              onPressed: () => _showEditStepDialog(\r\n+                context,\r\n+                step,\r\n+                index,\r\n+                parentStep: parentStep,\r\n+              ),\r\n+            ),\r\n+            IconButton(\r\n+              icon: Icon(Icons.delete, color: Colors.red),\r\n+              onPressed: () {\r\n+                setState(() {\r\n+                  parentStep.subSteps!.removeAt(index);\r\n+                });\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildDropdown<T>({\r\n+    required String label,\r\n+    required T? value,\r\n+    required List<T> items,\r\n+    required Function(T?) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: DropdownButtonFormField<T>(\r\n+            value: value,\r\n+            onChanged: onChanged,\r\n+            items: items.map((T item) {\r\n+              return DropdownMenuItem<T>(\r\n+                value: item,\r\n+                child: Text(\r\n+                  item.toString(),\r\n+                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+            dropdownColor: DarkThemeColors.cardBackground,\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildNumberInput({\r\n+    required String label,\r\n+    required dynamic value,\r\n+    required Function(dynamic) onChanged,\r\n+  }) {\r\n+    return Row(\r\n+      children: [\r\n+        Expanded(\r\n+          flex: 2,\r\n+          child: Text(label,\r\n+              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n+        ),\r\n+        Expanded(\r\n+          flex: 3,\r\n+          child: TextFormField(\r\n+            initialValue: value?.toString() ?? '',\r\n+            style: TextStyle(color: DarkThemeColors.primaryText),\r\n+            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+            decoration: InputDecoration(\r\n+              filled: true,\r\n+              fillColor: DarkThemeColors.inputFill,\r\n+              border: OutlineInputBorder(\r\n+                borderRadius: BorderRadius.circular(8),\r\n+                borderSide: BorderSide.none,\r\n+              ),\r\n+              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n+            ),\r\n+            onChanged: (newValue) {\r\n+              onChanged(num.tryParse(newValue));\r\n+            },\r\n+          ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n+      {RecipeStep? parentStep}) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (BuildContext context) {\r\n+        return AlertDialog(\r\n+          title: Text('Edit Step',\r\n+              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+          content: SingleChildScrollView(\r\n+            child: _buildStepEditor(step),\r\n+          ),\r\n+          backgroundColor: DarkThemeColors.cardBackground,\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel',\r\n+                  style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () => Navigator.pop(context),\r\n+            ),\r\n+            TextButton(\r\n+              child:\r\n+                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n+              onPressed: () {\r\n+                Navigator.pop(context);\r\n+                setState(() {});\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n+    showModalBottomSheet(\r\n+      context: context,\r\n+      backgroundColor: DarkThemeColors.cardBackground,\r\n+      shape: RoundedRectangleBorder(\r\n+        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n+      ),\r\n+      builder: (BuildContext context) {\r\n+        return SafeArea(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              ListTile(\r\n+                title: Text('Add Step',\r\n+                    style: TextStyle(\r\n+                        color: DarkThemeColors.primaryText,\r\n+                        fontWeight: FontWeight.bold)),\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Loop',\r\n+                Icons.loop,\r\n+                StepType.loop,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Valve',\r\n+                Icons.arrow_forward,\r\n+                StepType.valve,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Purge',\r\n+                Icons.air,\r\n+                StepType.purge,\r\n+                parentStep,\r\n+              ),\r\n+              _buildStepTypeOption(\r\n+                context,\r\n+                'Set Parameter',\r\n+                Icons.settings,\r\n+                StepType.setParameter,\r\n+                parentStep,\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildStepTypeOption(\r\n+    BuildContext context,\r\n+    String title,\r\n+    IconData icon,\r\n+    StepType type,\r\n+    RecipeStep? parentStep,\r\n+  ) {\r\n+    return ListTile(\r\n+      leading: Icon(icon, color: DarkThemeColors.accent),\r\n+      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n+      onTap: () {\r\n+        Navigator.pop(context);\r\n+        _addStep(type, parentStep?.subSteps ?? _steps);\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _addStep(StepType type, List<RecipeStep> steps) {\r\n+    setState(() {\r\n+      switch (type) {\r\n+        case StepType.loop:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.loop,\r\n+            parameters: {\r\n+              'iterations': 1,\r\n+              'temperature': null,\r\n+              'pressure': null\r\n+            },\r\n+            subSteps: [],\r\n+          ));\r\n+          break;\r\n+        case StepType.valve:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.valve,\r\n+            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n+          ));\r\n+          break;\r\n+        case StepType.purge:\r\n+          steps.add(RecipeStep(\r\n+            type: StepType.purge,\r\n+            parameters: {'duration': 10},\r\n+          ));\r\n+          break;\r\n+        case StepType.setParameter:\r\n+          final componentState = context.read<ComponentListBloc>().state;\r\n+          final availableComponents = componentState.components.values.toList();\r\n+\r\n+          if (availableComponents.isNotEmpty) {\r\n+            final firstComponent = availableComponents.first;\r\n+            steps.add(RecipeStep(\r\n+              type: StepType.setParameter,\r\n+              parameters: {\r\n+                'component': firstComponent.name,\r\n+                'parameter': null,\r\n+                'value': null,\r\n+              },\r\n+            ));\r\n+          } else {\r\n+            ScaffoldMessenger.of(context).showSnackBar(\r\n+              SnackBar(content: Text('No components available')),\r\n+            );\r\n+          }\r\n+          break;\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  String _getStepTitle(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        return 'Loop ${step.parameters['iterations']} times';\r\n+      case StepType.valve:\r\n+        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n+            'for ${step.parameters['duration']}s';\r\n+      case StepType.purge:\r\n+        return 'Purge for ${step.parameters['duration']}s';\r\n+      case StepType.setParameter:\r\n+        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n+            'to ${step.parameters['value']}';\r\n+      default:\r\n+        return 'Unknown Step';\r\n+    }\r\n+  }\r\n+\r\n+  void _saveRecipe(BuildContext context) {\r\n+    final errors = _validateRecipe();\r\n+    if (errors.isNotEmpty) {\r\n+      _showValidationErrors(errors);\r\n+      return;\r\n+    }\r\n+\r\n+    final newRecipe = Recipe(\r\n+      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      name: _nameController.text,\r\n+      substrate: _substrateController.text,\r\n+      steps: _steps,\r\n+      chamberTemperatureSetPoint:\r\n+          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n+      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n+    );\r\n+\r\n+    if (widget.recipeId == null) {\r\n+      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n+    } else {\r\n+      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n+    }\r\n+  }\r\n+\r\n+  List<String> _validateRecipe() {\r\n+    final errors = <String>[];\r\n+\r\n+    if (_nameController.text.isEmpty) {\r\n+      errors.add('Recipe name is required');\r\n+    }\r\n+\r\n+    if (_substrateController.text.isEmpty) {\r\n+      errors.add('Substrate is required');\r\n+    }\r\n+\r\n+    if (_steps.isEmpty) {\r\n+      errors.add('At least one step is required');\r\n+    }\r\n+\r\n+    // Validate all steps\r\n+    for (var i = 0; i < _steps.length; i++) {\r\n+      final stepErrors = _validateStep(_steps[i], i + 1);\r\n+      errors.addAll(stepErrors);\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n+    final errors = <String>[];\r\n+    final prefix = 'Step $stepNumber:';\r\n+\r\n+    switch (step.type) {\r\n+      case StepType.loop:\r\n+        if (step.parameters['iterations'] == null ||\r\n+            step.parameters['iterations'] <= 0) {\r\n+          errors.add('$prefix Loop iterations must be greater than 0');\r\n+        }\r\n+        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n+          errors.add('$prefix Loop must contain at least one step');\r\n+        } else {\r\n+          for (var i = 0; i < step.subSteps!.length; i++) {\r\n+            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n+            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n+          }\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.valve:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Valve duration must be greater than 0');\r\n+        }\r\n+        if (step.parameters['valveType'] == null) {\r\n+          errors.add('$prefix Valve type must be selected');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.purge:\r\n+        if (step.parameters['duration'] == null ||\r\n+            step.parameters['duration'] <= 0) {\r\n+          errors.add('$prefix Purge duration must be greater than 0');\r\n+        }\r\n+        break;\r\n+\r\n+      case StepType.setParameter:\r\n+        if (step.parameters['component'] == null) {\r\n+          errors.add('$prefix Component must be selected');\r\n+        }\r\n+        if (step.parameters['parameter'] == null) {\r\n+          errors.add('$prefix Parameter must be selected');\r\n+        }\r\n+        if (step.parameters['value'] == null) {\r\n+          errors.add('$prefix Value must be set');\r\n+        }\r\n+        break;\r\n+    }\r\n+\r\n+    return errors;\r\n+  }\r\n+\r\n+  void _showValidationErrors(List<String> errors) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: Text(\r\n+          'Validation Errors',\r\n+          style: TextStyle(color: DarkThemeColors.primaryText),\r\n+        ),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: errors\r\n+                .map((error) => Padding(\r\n+                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n+                      child: Text(\r\n+                        'â¢ $error',\r\n+                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n+                      ),\r\n+                    ))\r\n+                .toList(),\r\n+          ),\r\n+        ),\r\n+        backgroundColor: DarkThemeColors.cardBackground,\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1734459210878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-\r\n-\r\n import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n@@ -21,10 +19,14 @@\n }\r\n \r\n class RecipeDetailScreen extends StatefulWidget {\r\n   final String? recipeId;\r\n+  final String userId;\r\n \r\n-  RecipeDetailScreen({this.recipeId});\r\n+  RecipeDetailScreen({\r\n+    this.recipeId,\r\n+    required this.userId,\r\n+  });\r\n \r\n   @override\r\n   _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n }\r\n@@ -54,9 +56,9 @@\n         Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n     _animationController.forward();\r\n \r\n     // Initialize blocs\r\n-    context.read<ComponentListBloc>().add(LoadComponents());\r\n+    context.read<ComponentListBloc>().add(LoadComponents(userId: widget.userId));\r\n     if (widget.recipeId != null) {\r\n       context.read<RecipeBloc>().add(LoadRecipes());\r\n     }\r\n \r\n@@ -993,1000 +995,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-\r\n-\r\n-import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n-import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n-import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n-import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n-import 'package:experiment_planner/features/recipes/bloc/recipe_event.dart';\r\n-import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../models/recipe.dart';\r\n-\r\n-class DarkThemeColors {\r\n-  static const Color background = Color(0xFF121212);\r\n-  static const Color cardBackground = Color(0xFF1E1E1E);\r\n-  static const Color primaryText = Color(0xFFE0E0E0);\r\n-  static const Color secondaryText = Color(0xFFB0B0B0);\r\n-  static const Color accent = Color(0xFF64FFDA);\r\n-  static const Color divider = Color(0xFF2A2A2A);\r\n-  static const Color inputFill = Color(0xFF2C2C2C);\r\n-}\r\n-\r\n-class RecipeDetailScreen extends StatefulWidget {\r\n-  final String? recipeId;\r\n-\r\n-  RecipeDetailScreen({this.recipeId});\r\n-\r\n-  @override\r\n-  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n-}\r\n-\r\n-class _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n-    with TickerProviderStateMixin {\r\n-  late TextEditingController _nameController;\r\n-  late TextEditingController _substrateController;\r\n-  late TextEditingController _chamberTempController;\r\n-  late TextEditingController _pressureController;\r\n-  List<RecipeStep> _steps = [];\r\n-  late AnimationController _animationController;\r\n-  late Animation<double> _fadeAnimation;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _nameController = TextEditingController();\r\n-    _substrateController = TextEditingController();\r\n-    _chamberTempController = TextEditingController();\r\n-    _pressureController = TextEditingController();\r\n-    _animationController = AnimationController(\r\n-      vsync: this,\r\n-      duration: Duration(milliseconds: 300),\r\n-    );\r\n-    _fadeAnimation =\r\n-        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n-    _animationController.forward();\r\n-\r\n-    // Initialize blocs\r\n-    context.read<ComponentListBloc>().add(LoadComponents());\r\n-    if (widget.recipeId != null) {\r\n-      context.read<RecipeBloc>().add(LoadRecipes());\r\n-    }\r\n-\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-      _loadRecipeData();\r\n-    });\r\n-  }\r\n-\r\n-  void _loadRecipeData() {\r\n-    if (widget.recipeId != null) {\r\n-      final recipeState = context.read<RecipeBloc>().state;\r\n-      final recipe = recipeState.recipes.firstWhere(\r\n-        (r) => r.id == widget.recipeId,\r\n-        orElse: () => Recipe(\r\n-          id: widget.recipeId!,\r\n-          name: '',\r\n-          substrate: '',\r\n-          steps: [],\r\n-          chamberTemperatureSetPoint: 150.0,\r\n-          pressureSetPoint: 1.0,\r\n-        ),\r\n-      );\r\n-\r\n-      setState(() {\r\n-        _nameController.text = recipe.name;\r\n-        _substrateController.text = recipe.substrate;\r\n-        _chamberTempController.text =\r\n-            recipe.chamberTemperatureSetPoint.toString();\r\n-        _pressureController.text = recipe.pressureSetPoint.toString();\r\n-        _steps = List.from(recipe.steps);\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _nameController.dispose();\r\n-    _substrateController.dispose();\r\n-    _chamberTempController.dispose();\r\n-    _pressureController.dispose();\r\n-    _animationController.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return BlocListener<RecipeBloc, RecipeState>(\r\n-      listener: (context, state) {\r\n-        if (state.error != null) {\r\n-          ScaffoldMessenger.of(context).showSnackBar(\r\n-            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n-          );\r\n-        }\r\n-      },\r\n-      child: Scaffold(\r\n-        backgroundColor: DarkThemeColors.background,\r\n-        appBar: _buildAppBar(),\r\n-        body: _buildBody(),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  PreferredSizeWidget _buildAppBar() {\r\n-    return AppBar(\r\n-      elevation: 0,\r\n-      backgroundColor: DarkThemeColors.background,\r\n-      title: Text(\r\n-        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n-        style: TextStyle(\r\n-            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n-      ),\r\n-      actions: [\r\n-        BlocBuilder<RecipeBloc, RecipeState>(\r\n-          builder: (context, state) {\r\n-            return IconButton(\r\n-              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n-              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n-            );\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBody() {\r\n-    return BlocBuilder<RecipeBloc, RecipeState>(\r\n-      builder: (context, recipeState) {\r\n-        if (recipeState.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-        return SafeArea(\r\n-          child: FadeTransition(\r\n-            opacity: _fadeAnimation,\r\n-            child: SingleChildScrollView(\r\n-              child: Padding(\r\n-                padding: EdgeInsets.all(16.0),\r\n-                child: Column(\r\n-                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                  children: [\r\n-                    _buildBasicInputs(),\r\n-                    SizedBox(height: 24),\r\n-                    _buildStepsSection(),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildBasicInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildTextField(\r\n-          controller: _nameController,\r\n-          label: 'Recipe Name',\r\n-          icon: Icons.title,\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _substrateController,\r\n-          label: 'Substrate',\r\n-          icon: Icons.layers,\r\n-        ),\r\n-        SizedBox(height: 24),\r\n-        _buildGlobalParametersInputs(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildGlobalParametersInputs() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        Text(\r\n-          'Global Parameters',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _chamberTempController,\r\n-          label: 'Chamber Temperature (Â°C)',\r\n-          icon: Icons.thermostat,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildTextField(\r\n-          controller: _pressureController,\r\n-          label: 'Pressure (atm)',\r\n-          icon: Icons.compress,\r\n-          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildTextField({\r\n-    required TextEditingController controller,\r\n-    required String label,\r\n-    required IconData icon,\r\n-    TextInputType keyboardType = TextInputType.text,\r\n-  }) {\r\n-    return TextField(\r\n-      controller: controller,\r\n-      style: TextStyle(color: DarkThemeColors.primaryText),\r\n-      keyboardType: keyboardType,\r\n-      decoration: InputDecoration(\r\n-        labelText: label,\r\n-        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n-        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n-        filled: true,\r\n-        fillColor: DarkThemeColors.inputFill,\r\n-        border: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide.none,\r\n-        ),\r\n-        focusedBorder: OutlineInputBorder(\r\n-          borderRadius: BorderRadius.circular(8),\r\n-          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsSection() {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        _buildStepsHeader(),\r\n-        SizedBox(height: 16),\r\n-        _buildStepsList(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsHeader() {\r\n-    return Row(\r\n-      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-      children: [\r\n-        Text(\r\n-          'Recipe Steps',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontSize: 18,\r\n-            fontWeight: FontWeight.w500,\r\n-          ),\r\n-        ),\r\n-        ElevatedButton.icon(\r\n-          icon: Icon(Icons.add),\r\n-          label: Text('Add Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepsList() {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, componentState) {\r\n-        return ReorderableListView(\r\n-          shrinkWrap: true,\r\n-          physics: NeverScrollableScrollPhysics(),\r\n-          children: _steps.asMap().entries.map((entry) {\r\n-            final index = entry.key;\r\n-            final step = entry.value;\r\n-            return _buildStepCard(step, index);\r\n-          }).toList(),\r\n-          onReorder: (oldIndex, newIndex) {\r\n-            setState(() {\r\n-              if (newIndex > oldIndex) {\r\n-                newIndex -= 1;\r\n-              }\r\n-              final RecipeStep item = _steps.removeAt(oldIndex);\r\n-              _steps.insert(newIndex, item);\r\n-            });\r\n-          },\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepCard(RecipeStep step, int index) {\r\n-    return Card(\r\n-      key: ValueKey(step),\r\n-      margin: EdgeInsets.only(bottom: 16),\r\n-      color: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ExpansionTile(\r\n-        title: Text(\r\n-          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        children: [\r\n-          Padding(\r\n-            padding: EdgeInsets.all(16),\r\n-            child: Column(\r\n-              crossAxisAlignment: CrossAxisAlignment.start,\r\n-              children: [\r\n-                _buildStepEditor(step),\r\n-                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ],\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(context, step, index),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () => _showDeleteStepDialog(context, index),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // show dialog to confirm deletion of a step\r\n-  void _showDeleteStepDialog(BuildContext context, int index) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Delete Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: Text(\r\n-            'Are you sure you want to delete this step?',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Delete',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {\r\n-                  _steps.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepEditor(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return _buildLoopEditor(step);\r\n-      case StepType.valve:\r\n-        return _buildValveEditor(step);\r\n-      case StepType.purge:\r\n-        return _buildPurgeEditor(step);\r\n-      case StepType.setParameter:\r\n-        return _buildSetParameterEditor(step);\r\n-      default:\r\n-        return Text('Unknown Step Type',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText));\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildLoopEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildNumberInput(\r\n-          label: 'Number of iterations',\r\n-          value: step.parameters['iterations'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['iterations'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Temperature (Â°C)',\r\n-          value: step.parameters['temperature'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['temperature'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Pressure (atm)',\r\n-          value: step.parameters['pressure'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['pressure'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildValveEditor(RecipeStep step) {\r\n-    return Column(\r\n-      children: [\r\n-        _buildDropdown<ValveType>(\r\n-          label: 'Valve',\r\n-          value: step.parameters['valveType'],\r\n-          items: ValveType.values,\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['valveType'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-        SizedBox(height: 16),\r\n-        _buildNumberInput(\r\n-          label: 'Duration (seconds)',\r\n-          value: step.parameters['duration'],\r\n-          onChanged: (value) {\r\n-            setState(() {\r\n-              step.parameters['duration'] = value;\r\n-            });\r\n-          },\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildPurgeEditor(RecipeStep step) {\r\n-    return _buildNumberInput(\r\n-      label: 'Duration (seconds)',\r\n-      value: step.parameters['duration'],\r\n-      onChanged: (value) {\r\n-        setState(() {\r\n-          step.parameters['duration'] = value;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSetParameterEditor(RecipeStep step) {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, state) {\r\n-        if (state.isLoading) {\r\n-          return Center(child: CircularProgressIndicator());\r\n-        }\r\n-\r\n-        final availableComponents = state.components.values.toList();\r\n-        final selectedComponent = step.parameters['component'] != null\r\n-            ? availableComponents.firstWhere(\r\n-                (c) => c.name == step.parameters['component'],\r\n-                orElse: () => availableComponents.first,\r\n-              )\r\n-            : availableComponents.first;\r\n-\r\n-        return Column(\r\n-          crossAxisAlignment: CrossAxisAlignment.start,\r\n-          children: [\r\n-            _buildDropdown<String>(\r\n-              label: 'Component',\r\n-              value: step.parameters['component'] ?? selectedComponent.name,\r\n-              items: availableComponents.map((c) => c.name).toList(),\r\n-              onChanged: (value) {\r\n-                setState(() {\r\n-                  step.parameters['component'] = value;\r\n-                  step.parameters['parameter'] = null;\r\n-                  step.parameters['value'] = null;\r\n-                });\r\n-              },\r\n-            ),\r\n-            if (selectedComponent != null) ...[\r\n-              SizedBox(height: 16),\r\n-              _buildDropdown<String>(\r\n-                label: 'Parameter',\r\n-                value: step.parameters['parameter'],\r\n-                items: selectedComponent.setValues.keys.toList(),\r\n-                onChanged: (value) {\r\n-                  setState(() {\r\n-                    step.parameters['parameter'] = value;\r\n-                    step.parameters['value'] = null;\r\n-                  });\r\n-                },\r\n-              ),\r\n-              if (step.parameters['parameter'] != null) ...[\r\n-                SizedBox(height: 16),\r\n-                _buildNumberInput(\r\n-                  label: 'Value',\r\n-                  value: step.parameters['value'],\r\n-                  onChanged: (value) {\r\n-                    setState(() {\r\n-                      step.parameters['value'] = value;\r\n-                    });\r\n-                  },\r\n-                ),\r\n-              ],\r\n-            ],\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n-    return Column(\r\n-      crossAxisAlignment: CrossAxisAlignment.start,\r\n-      children: [\r\n-        SizedBox(height: 16),\r\n-        Text(\r\n-          'Loop Steps:',\r\n-          style: TextStyle(\r\n-            color: DarkThemeColors.primaryText,\r\n-            fontWeight: FontWeight.w500,\r\n-            fontSize: 14,\r\n-          ),\r\n-        ),\r\n-        SizedBox(height: 8),\r\n-        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n-          int index = entry.key;\r\n-          RecipeStep subStep = entry.value;\r\n-          return _buildSubStepCard(subStep, index, loopStep);\r\n-        }).toList(),\r\n-        SizedBox(height: 8),\r\n-        ElevatedButton(\r\n-          child: Text('Add Loop Step'),\r\n-          style: ElevatedButton.styleFrom(\r\n-            foregroundColor: DarkThemeColors.background,\r\n-            backgroundColor: DarkThemeColors.accent,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n-    return Card(\r\n-      margin: EdgeInsets.only(bottom: 8),\r\n-      color: DarkThemeColors.inputFill,\r\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n-      child: ListTile(\r\n-        title: Text(\r\n-          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n-        ),\r\n-        trailing: Row(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            IconButton(\r\n-              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n-              onPressed: () => _showEditStepDialog(\r\n-                context,\r\n-                step,\r\n-                index,\r\n-                parentStep: parentStep,\r\n-              ),\r\n-            ),\r\n-            IconButton(\r\n-              icon: Icon(Icons.delete, color: Colors.red),\r\n-              onPressed: () {\r\n-                setState(() {\r\n-                  parentStep.subSteps!.removeAt(index);\r\n-                });\r\n-              },\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildDropdown<T>({\r\n-    required String label,\r\n-    required T? value,\r\n-    required List<T> items,\r\n-    required Function(T?) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: DropdownButtonFormField<T>(\r\n-            value: value,\r\n-            onChanged: onChanged,\r\n-            items: items.map((T item) {\r\n-              return DropdownMenuItem<T>(\r\n-                value: item,\r\n-                child: Text(\r\n-                  item.toString(),\r\n-                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                ),\r\n-              );\r\n-            }).toList(),\r\n-            dropdownColor: DarkThemeColors.cardBackground,\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildNumberInput({\r\n-    required String label,\r\n-    required dynamic value,\r\n-    required Function(dynamic) onChanged,\r\n-  }) {\r\n-    return Row(\r\n-      children: [\r\n-        Expanded(\r\n-          flex: 2,\r\n-          child: Text(label,\r\n-              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n-        ),\r\n-        Expanded(\r\n-          flex: 3,\r\n-          child: TextFormField(\r\n-            initialValue: value?.toString() ?? '',\r\n-            style: TextStyle(color: DarkThemeColors.primaryText),\r\n-            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n-            decoration: InputDecoration(\r\n-              filled: true,\r\n-              fillColor: DarkThemeColors.inputFill,\r\n-              border: OutlineInputBorder(\r\n-                borderRadius: BorderRadius.circular(8),\r\n-                borderSide: BorderSide.none,\r\n-              ),\r\n-              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n-            ),\r\n-            onChanged: (newValue) {\r\n-              onChanged(num.tryParse(newValue));\r\n-            },\r\n-          ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n-      {RecipeStep? parentStep}) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (BuildContext context) {\r\n-        return AlertDialog(\r\n-          title: Text('Edit Step',\r\n-              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-          content: SingleChildScrollView(\r\n-            child: _buildStepEditor(step),\r\n-          ),\r\n-          backgroundColor: DarkThemeColors.cardBackground,\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel',\r\n-                  style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () => Navigator.pop(context),\r\n-            ),\r\n-            TextButton(\r\n-              child:\r\n-                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n-              onPressed: () {\r\n-                Navigator.pop(context);\r\n-                setState(() {});\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n-    showModalBottomSheet(\r\n-      context: context,\r\n-      backgroundColor: DarkThemeColors.cardBackground,\r\n-      shape: RoundedRectangleBorder(\r\n-        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n-      ),\r\n-      builder: (BuildContext context) {\r\n-        return SafeArea(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              ListTile(\r\n-                title: Text('Add Step',\r\n-                    style: TextStyle(\r\n-                        color: DarkThemeColors.primaryText,\r\n-                        fontWeight: FontWeight.bold)),\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Loop',\r\n-                Icons.loop,\r\n-                StepType.loop,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Valve',\r\n-                Icons.arrow_forward,\r\n-                StepType.valve,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Purge',\r\n-                Icons.air,\r\n-                StepType.purge,\r\n-                parentStep,\r\n-              ),\r\n-              _buildStepTypeOption(\r\n-                context,\r\n-                'Set Parameter',\r\n-                Icons.settings,\r\n-                StepType.setParameter,\r\n-                parentStep,\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildStepTypeOption(\r\n-    BuildContext context,\r\n-    String title,\r\n-    IconData icon,\r\n-    StepType type,\r\n-    RecipeStep? parentStep,\r\n-  ) {\r\n-    return ListTile(\r\n-      leading: Icon(icon, color: DarkThemeColors.accent),\r\n-      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n-      onTap: () {\r\n-        Navigator.pop(context);\r\n-        _addStep(type, parentStep?.subSteps ?? _steps);\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _addStep(StepType type, List<RecipeStep> steps) {\r\n-    setState(() {\r\n-      switch (type) {\r\n-        case StepType.loop:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.loop,\r\n-            parameters: {\r\n-              'iterations': 1,\r\n-              'temperature': null,\r\n-              'pressure': null\r\n-            },\r\n-            subSteps: [],\r\n-          ));\r\n-          break;\r\n-        case StepType.valve:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.valve,\r\n-            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n-          ));\r\n-          break;\r\n-        case StepType.purge:\r\n-          steps.add(RecipeStep(\r\n-            type: StepType.purge,\r\n-            parameters: {'duration': 10},\r\n-          ));\r\n-          break;\r\n-        case StepType.setParameter:\r\n-          final componentState = context.read<ComponentListBloc>().state;\r\n-          final availableComponents = componentState.components.values.toList();\r\n-\r\n-          if (availableComponents.isNotEmpty) {\r\n-            final firstComponent = availableComponents.first;\r\n-            steps.add(RecipeStep(\r\n-              type: StepType.setParameter,\r\n-              parameters: {\r\n-                'component': firstComponent.name,\r\n-                'parameter': null,\r\n-                'value': null,\r\n-              },\r\n-            ));\r\n-          } else {\r\n-            ScaffoldMessenger.of(context).showSnackBar(\r\n-              SnackBar(content: Text('No components available')),\r\n-            );\r\n-          }\r\n-          break;\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  String _getStepTitle(RecipeStep step) {\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        return 'Loop ${step.parameters['iterations']} times';\r\n-      case StepType.valve:\r\n-        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n-            'for ${step.parameters['duration']}s';\r\n-      case StepType.purge:\r\n-        return 'Purge for ${step.parameters['duration']}s';\r\n-      case StepType.setParameter:\r\n-        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n-            'to ${step.parameters['value']}';\r\n-      default:\r\n-        return 'Unknown Step';\r\n-    }\r\n-  }\r\n-\r\n-  void _saveRecipe(BuildContext context) {\r\n-    final errors = _validateRecipe();\r\n-    if (errors.isNotEmpty) {\r\n-      _showValidationErrors(errors);\r\n-      return;\r\n-    }\r\n-\r\n-    final newRecipe = Recipe(\r\n-      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n-      name: _nameController.text,\r\n-      substrate: _substrateController.text,\r\n-      steps: _steps,\r\n-      chamberTemperatureSetPoint:\r\n-          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n-      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n-    );\r\n-\r\n-    if (widget.recipeId == null) {\r\n-      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n-    } else {\r\n-      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n-    }\r\n-  }\r\n-\r\n-  List<String> _validateRecipe() {\r\n-    final errors = <String>[];\r\n-\r\n-    if (_nameController.text.isEmpty) {\r\n-      errors.add('Recipe name is required');\r\n-    }\r\n-\r\n-    if (_substrateController.text.isEmpty) {\r\n-      errors.add('Substrate is required');\r\n-    }\r\n-\r\n-    if (_steps.isEmpty) {\r\n-      errors.add('At least one step is required');\r\n-    }\r\n-\r\n-    // Validate all steps\r\n-    for (var i = 0; i < _steps.length; i++) {\r\n-      final stepErrors = _validateStep(_steps[i], i + 1);\r\n-      errors.addAll(stepErrors);\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n-    final errors = <String>[];\r\n-    final prefix = 'Step $stepNumber:';\r\n-\r\n-    switch (step.type) {\r\n-      case StepType.loop:\r\n-        if (step.parameters['iterations'] == null ||\r\n-            step.parameters['iterations'] <= 0) {\r\n-          errors.add('$prefix Loop iterations must be greater than 0');\r\n-        }\r\n-        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n-          errors.add('$prefix Loop must contain at least one step');\r\n-        } else {\r\n-          for (var i = 0; i < step.subSteps!.length; i++) {\r\n-            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n-            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n-          }\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.valve:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Valve duration must be greater than 0');\r\n-        }\r\n-        if (step.parameters['valveType'] == null) {\r\n-          errors.add('$prefix Valve type must be selected');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.purge:\r\n-        if (step.parameters['duration'] == null ||\r\n-            step.parameters['duration'] <= 0) {\r\n-          errors.add('$prefix Purge duration must be greater than 0');\r\n-        }\r\n-        break;\r\n-\r\n-      case StepType.setParameter:\r\n-        if (step.parameters['component'] == null) {\r\n-          errors.add('$prefix Component must be selected');\r\n-        }\r\n-        if (step.parameters['parameter'] == null) {\r\n-          errors.add('$prefix Parameter must be selected');\r\n-        }\r\n-        if (step.parameters['value'] == null) {\r\n-          errors.add('$prefix Value must be set');\r\n-        }\r\n-        break;\r\n-    }\r\n-\r\n-    return errors;\r\n-  }\r\n-\r\n-  void _showValidationErrors(List<String> errors) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: Text(\r\n-          'Validation Errors',\r\n-          style: TextStyle(color: DarkThemeColors.primaryText),\r\n-        ),\r\n-        content: SingleChildScrollView(\r\n-          child: Column(\r\n-            crossAxisAlignment: CrossAxisAlignment.start,\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: errors\r\n-                .map((error) => Padding(\r\n-                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n-                      child: Text(\r\n-                        'â¢ $error',\r\n-                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n-                      ),\r\n-                    ))\r\n-                .toList(),\r\n-          ),\r\n-        ),\r\n-        backgroundColor: DarkThemeColors.cardBackground,\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1734459253604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,14 +487,12 @@\n           return Center(child: CircularProgressIndicator());\r\n         }\r\n \r\n         final availableComponents = state.components.values.toList();\r\n-        final selectedComponent = step.parameters['component'] != null\r\n-            ? availableComponents.firstWhere(\r\n-                (c) => c.name == step.parameters['component'],\r\n-                orElse: () => availableComponents.first,\r\n-              )\r\n-            : availableComponents.first;\r\n+        final selectedComponent = availableComponents.firstWhere(\r\n+          (c) => c.name == step.parameters['component'],\r\n+          orElse: () => availableComponents.first,\r\n+        );\r\n \r\n         return Column(\r\n           crossAxisAlignment: CrossAxisAlignment.start,\r\n           children: [\r\n"
                },
                {
                    "date": 1734459308807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../models/recipe.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_event.dart'; // Add this import\r\n \r\n class DarkThemeColors {\r\n   static const Color background = Color(0xFF121212);\r\n   static const Color cardBackground = Color(0xFF1E1E1E);\r\n@@ -55,10 +56,10 @@\n     _fadeAnimation =\r\n         Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n     _animationController.forward();\r\n \r\n-    // Initialize blocs\r\n-    context.read<ComponentListBloc>().add(LoadComponents(userId: widget.userId));\r\n+    // Initialize blocs with proper event type\r\n+    context.read<ComponentListBloc>().add(LoadComponents(userId: widget.userId) as ComponentListEvent);\r\n     if (widget.recipeId != null) {\r\n       context.read<RecipeBloc>().add(LoadRecipes());\r\n     }\r\n \r\n"
                },
                {
                    "date": 1734459440722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../models/recipe.dart';\r\n-import 'package:experiment_planner/features/components/bloc/component_list_event.dart'; // Add this import\r\n+import 'package:experiment_planner/features/components/bloc/component_list_event.dart' as list_events; // Add this import\r\n \r\n class DarkThemeColors {\r\n   static const Color background = Color(0xFF121212);\r\n   static const Color cardBackground = Color(0xFF1E1E1E);\r\n@@ -57,9 +57,9 @@\n         Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n     _animationController.forward();\r\n \r\n     // Initialize blocs with proper event type\r\n-    context.read<ComponentListBloc>().add(LoadComponents(userId: widget.userId) as ComponentListEvent);\r\n+    context.read<ComponentListBloc>().add(list_events.LoadComponents(userId: widget.userId));\r\n     if (widget.recipeId != null) {\r\n       context.read<RecipeBloc>().add(LoadRecipes());\r\n     }\r\n \r\n@@ -864,9 +864,8 @@\n     final errors = _validateRecipe();\r\n     if (errors.isNotEmpty) {\r\n       _showValidationErrors(errors);\r\n       return;\r\n-    }\r\n \r\n     final newRecipe = Recipe(\r\n       id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n       name: _nameController.text,\r\n"
                },
                {
                    "date": 1734459503334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -864,8 +864,9 @@\n     final errors = _validateRecipe();\r\n     if (errors.isNotEmpty) {\r\n       _showValidationErrors(errors);\r\n       return;\r\n+    }\r\n \r\n     final newRecipe = Recipe(\r\n       id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n       name: _nameController.text,\r\n"
                }
            ],
            "date": 1734376760282,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:experiment_planner/blocs/component/bloc/component_list_event.dart';\r\nimport 'package:experiment_planner/blocs/component/bloc/component_list_state.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_event.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_state.dart';\r\nimport '../../../blocs/component/bloc/component_list_bloc.dart';\r\nimport '../models/recipe.dart';\r\n\r\nclass DarkThemeColors {\r\n  static const Color background = Color(0xFF121212);\r\n  static const Color cardBackground = Color(0xFF1E1E1E);\r\n  static const Color primaryText = Color(0xFFE0E0E0);\r\n  static const Color secondaryText = Color(0xFFB0B0B0);\r\n  static const Color accent = Color(0xFF64FFDA);\r\n  static const Color divider = Color(0xFF2A2A2A);\r\n  static const Color inputFill = Color(0xFF2C2C2C);\r\n}\r\n\r\nclass RecipeDetailScreen extends StatefulWidget {\r\n  final String? recipeId;\r\n\r\n  RecipeDetailScreen({this.recipeId});\r\n\r\n  @override\r\n  _RecipeDetailScreenState createState() => _RecipeDetailScreenState();\r\n}\r\n\r\nclass _RecipeDetailScreenState extends State<RecipeDetailScreen>\r\n    with TickerProviderStateMixin {\r\n  late TextEditingController _nameController;\r\n  late TextEditingController _substrateController;\r\n  late TextEditingController _chamberTempController;\r\n  late TextEditingController _pressureController;\r\n  List<RecipeStep> _steps = [];\r\n  late AnimationController _animationController;\r\n  late Animation<double> _fadeAnimation;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _nameController = TextEditingController();\r\n    _substrateController = TextEditingController();\r\n    _chamberTempController = TextEditingController();\r\n    _pressureController = TextEditingController();\r\n    _animationController = AnimationController(\r\n      vsync: this,\r\n      duration: Duration(milliseconds: 300),\r\n    );\r\n    _fadeAnimation =\r\n        Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);\r\n    _animationController.forward();\r\n\r\n    // Initialize blocs\r\n    context.read<ComponentListBloc>().add(LoadComponents());\r\n    if (widget.recipeId != null) {\r\n      context.read<RecipeBloc>().add(LoadRecipes());\r\n    }\r\n\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _loadRecipeData();\r\n    });\r\n  }\r\n\r\n  void _loadRecipeData() {\r\n    if (widget.recipeId != null) {\r\n      final recipeState = context.read<RecipeBloc>().state;\r\n      final recipe = recipeState.recipes.firstWhere(\r\n        (r) => r.id == widget.recipeId,\r\n        orElse: () => Recipe(\r\n          id: widget.recipeId!,\r\n          name: '',\r\n          substrate: '',\r\n          steps: [],\r\n          chamberTemperatureSetPoint: 150.0,\r\n          pressureSetPoint: 1.0,\r\n        ),\r\n      );\r\n\r\n      setState(() {\r\n        _nameController.text = recipe.name;\r\n        _substrateController.text = recipe.substrate;\r\n        _chamberTempController.text =\r\n            recipe.chamberTemperatureSetPoint.toString();\r\n        _pressureController.text = recipe.pressureSetPoint.toString();\r\n        _steps = List.from(recipe.steps);\r\n      });\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _nameController.dispose();\r\n    _substrateController.dispose();\r\n    _chamberTempController.dispose();\r\n    _pressureController.dispose();\r\n    _animationController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocListener<RecipeBloc, RecipeState>(\r\n      listener: (context, state) {\r\n        if (state.error != null) {\r\n          ScaffoldMessenger.of(context).showSnackBar(\r\n            SnackBar(content: Text(state.error!), backgroundColor: Colors.red),\r\n          );\r\n        }\r\n      },\r\n      child: Scaffold(\r\n        backgroundColor: DarkThemeColors.background,\r\n        appBar: _buildAppBar(),\r\n        body: _buildBody(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  PreferredSizeWidget _buildAppBar() {\r\n    return AppBar(\r\n      elevation: 0,\r\n      backgroundColor: DarkThemeColors.background,\r\n      title: Text(\r\n        widget.recipeId == null ? 'Create Recipe' : 'Edit Recipe',\r\n        style: TextStyle(\r\n            color: DarkThemeColors.primaryText, fontWeight: FontWeight.w500),\r\n      ),\r\n      actions: [\r\n        BlocBuilder<RecipeBloc, RecipeState>(\r\n          builder: (context, state) {\r\n            return IconButton(\r\n              icon: Icon(Icons.save, color: DarkThemeColors.accent),\r\n              onPressed: state.isLoading ? null : () => _saveRecipe(context),\r\n            );\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildBody() {\r\n    return BlocBuilder<RecipeBloc, RecipeState>(\r\n      builder: (context, recipeState) {\r\n        if (recipeState.isLoading) {\r\n          return Center(child: CircularProgressIndicator());\r\n        }\r\n        return SafeArea(\r\n          child: FadeTransition(\r\n            opacity: _fadeAnimation,\r\n            child: SingleChildScrollView(\r\n              child: Padding(\r\n                padding: EdgeInsets.all(16.0),\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    _buildBasicInputs(),\r\n                    SizedBox(height: 24),\r\n                    _buildStepsSection(),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildBasicInputs() {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        _buildTextField(\r\n          controller: _nameController,\r\n          label: 'Recipe Name',\r\n          icon: Icons.title,\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildTextField(\r\n          controller: _substrateController,\r\n          label: 'Substrate',\r\n          icon: Icons.layers,\r\n        ),\r\n        SizedBox(height: 24),\r\n        _buildGlobalParametersInputs(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildGlobalParametersInputs() {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        Text(\r\n          'Global Parameters',\r\n          style: TextStyle(\r\n            color: DarkThemeColors.primaryText,\r\n            fontSize: 18,\r\n            fontWeight: FontWeight.w500,\r\n          ),\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildTextField(\r\n          controller: _chamberTempController,\r\n          label: 'Chamber Temperature (Â°C)',\r\n          icon: Icons.thermostat,\r\n          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildTextField(\r\n          controller: _pressureController,\r\n          label: 'Pressure (atm)',\r\n          icon: Icons.compress,\r\n          keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildTextField({\r\n    required TextEditingController controller,\r\n    required String label,\r\n    required IconData icon,\r\n    TextInputType keyboardType = TextInputType.text,\r\n  }) {\r\n    return TextField(\r\n      controller: controller,\r\n      style: TextStyle(color: DarkThemeColors.primaryText),\r\n      keyboardType: keyboardType,\r\n      decoration: InputDecoration(\r\n        labelText: label,\r\n        labelStyle: TextStyle(color: DarkThemeColors.secondaryText),\r\n        prefixIcon: Icon(icon, color: DarkThemeColors.accent),\r\n        filled: true,\r\n        fillColor: DarkThemeColors.inputFill,\r\n        border: OutlineInputBorder(\r\n          borderRadius: BorderRadius.circular(8),\r\n          borderSide: BorderSide.none,\r\n        ),\r\n        focusedBorder: OutlineInputBorder(\r\n          borderRadius: BorderRadius.circular(8),\r\n          borderSide: BorderSide(color: DarkThemeColors.accent),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildStepsSection() {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        _buildStepsHeader(),\r\n        SizedBox(height: 16),\r\n        _buildStepsList(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildStepsHeader() {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n      children: [\r\n        Text(\r\n          'Recipe Steps',\r\n          style: TextStyle(\r\n            color: DarkThemeColors.primaryText,\r\n            fontSize: 18,\r\n            fontWeight: FontWeight.w500,\r\n          ),\r\n        ),\r\n        ElevatedButton.icon(\r\n          icon: Icon(Icons.add),\r\n          label: Text('Add Step'),\r\n          style: ElevatedButton.styleFrom(\r\n            foregroundColor: DarkThemeColors.background,\r\n            backgroundColor: DarkThemeColors.accent,\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(8),\r\n            ),\r\n          ),\r\n          onPressed: () => _showAddStepDialog(context),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildStepsList() {\r\n    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n      builder: (context, componentState) {\r\n        return ReorderableListView(\r\n          shrinkWrap: true,\r\n          physics: NeverScrollableScrollPhysics(),\r\n          children: _steps.asMap().entries.map((entry) {\r\n            final index = entry.key;\r\n            final step = entry.value;\r\n            return _buildStepCard(step, index);\r\n          }).toList(),\r\n          onReorder: (oldIndex, newIndex) {\r\n            setState(() {\r\n              if (newIndex > oldIndex) {\r\n                newIndex -= 1;\r\n              }\r\n              final RecipeStep item = _steps.removeAt(oldIndex);\r\n              _steps.insert(newIndex, item);\r\n            });\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildStepCard(RecipeStep step, int index) {\r\n    return Card(\r\n      key: ValueKey(step),\r\n      margin: EdgeInsets.only(bottom: 16),\r\n      color: DarkThemeColors.cardBackground,\r\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n      child: ExpansionTile(\r\n        title: Text(\r\n          'Step ${index + 1}: ${_getStepTitle(step)}',\r\n          style: TextStyle(color: DarkThemeColors.primaryText),\r\n        ),\r\n        children: [\r\n          Padding(\r\n            padding: EdgeInsets.all(16),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                _buildStepEditor(step),\r\n                if (step.type == StepType.loop) _buildLoopSubSteps(step),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n        trailing: Row(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            IconButton(\r\n              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n              onPressed: () => _showEditStepDialog(context, step, index),\r\n            ),\r\n            IconButton(\r\n              icon: Icon(Icons.delete, color: Colors.red),\r\n              onPressed: () => _showDeleteStepDialog(context, index),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  // show dialog to confirm deletion of a step\r\n  void _showDeleteStepDialog(BuildContext context, int index) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text('Delete Step',\r\n              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n          content: Text(\r\n            'Are you sure you want to delete this step?',\r\n            style: TextStyle(color: DarkThemeColors.primaryText),\r\n          ),\r\n          backgroundColor: DarkThemeColors.cardBackground,\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Cancel',\r\n                  style: TextStyle(color: DarkThemeColors.accent)),\r\n              onPressed: () => Navigator.pop(context),\r\n            ),\r\n            TextButton(\r\n              child: Text('Delete',\r\n                  style: TextStyle(color: DarkThemeColors.accent)),\r\n              onPressed: () {\r\n                Navigator.pop(context);\r\n                setState(() {\r\n                  _steps.removeAt(index);\r\n                });\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildStepEditor(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.loop:\r\n        return _buildLoopEditor(step);\r\n      case StepType.valve:\r\n        return _buildValveEditor(step);\r\n      case StepType.purge:\r\n        return _buildPurgeEditor(step);\r\n      case StepType.setParameter:\r\n        return _buildSetParameterEditor(step);\r\n      default:\r\n        return Text('Unknown Step Type',\r\n            style: TextStyle(color: DarkThemeColors.primaryText));\r\n    }\r\n  }\r\n\r\n  Widget _buildLoopEditor(RecipeStep step) {\r\n    return Column(\r\n      children: [\r\n        _buildNumberInput(\r\n          label: 'Number of iterations',\r\n          value: step.parameters['iterations'],\r\n          onChanged: (value) {\r\n            setState(() {\r\n              step.parameters['iterations'] = value;\r\n            });\r\n          },\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildNumberInput(\r\n          label: 'Temperature (Â°C)',\r\n          value: step.parameters['temperature'],\r\n          onChanged: (value) {\r\n            setState(() {\r\n              step.parameters['temperature'] = value;\r\n            });\r\n          },\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildNumberInput(\r\n          label: 'Pressure (atm)',\r\n          value: step.parameters['pressure'],\r\n          onChanged: (value) {\r\n            setState(() {\r\n              step.parameters['pressure'] = value;\r\n            });\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildValveEditor(RecipeStep step) {\r\n    return Column(\r\n      children: [\r\n        _buildDropdown<ValveType>(\r\n          label: 'Valve',\r\n          value: step.parameters['valveType'],\r\n          items: ValveType.values,\r\n          onChanged: (value) {\r\n            setState(() {\r\n              step.parameters['valveType'] = value;\r\n            });\r\n          },\r\n        ),\r\n        SizedBox(height: 16),\r\n        _buildNumberInput(\r\n          label: 'Duration (seconds)',\r\n          value: step.parameters['duration'],\r\n          onChanged: (value) {\r\n            setState(() {\r\n              step.parameters['duration'] = value;\r\n            });\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildPurgeEditor(RecipeStep step) {\r\n    return _buildNumberInput(\r\n      label: 'Duration (seconds)',\r\n      value: step.parameters['duration'],\r\n      onChanged: (value) {\r\n        setState(() {\r\n          step.parameters['duration'] = value;\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildSetParameterEditor(RecipeStep step) {\r\n    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n      builder: (context, state) {\r\n        if (state.isLoading) {\r\n          return Center(child: CircularProgressIndicator());\r\n        }\r\n\r\n        final availableComponents = state.components.values.toList();\r\n        final selectedComponent = step.parameters['component'] != null\r\n            ? availableComponents.firstWhere(\r\n                (c) => c.name == step.parameters['component'],\r\n                orElse: () => availableComponents.first,\r\n              )\r\n            : availableComponents.first;\r\n\r\n        return Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            _buildDropdown<String>(\r\n              label: 'Component',\r\n              value: step.parameters['component'] ?? selectedComponent.name,\r\n              items: availableComponents.map((c) => c.name).toList(),\r\n              onChanged: (value) {\r\n                setState(() {\r\n                  step.parameters['component'] = value;\r\n                  step.parameters['parameter'] = null;\r\n                  step.parameters['value'] = null;\r\n                });\r\n              },\r\n            ),\r\n            if (selectedComponent != null) ...[\r\n              SizedBox(height: 16),\r\n              _buildDropdown<String>(\r\n                label: 'Parameter',\r\n                value: step.parameters['parameter'],\r\n                items: selectedComponent.setValues.keys.toList(),\r\n                onChanged: (value) {\r\n                  setState(() {\r\n                    step.parameters['parameter'] = value;\r\n                    step.parameters['value'] = null;\r\n                  });\r\n                },\r\n              ),\r\n              if (step.parameters['parameter'] != null) ...[\r\n                SizedBox(height: 16),\r\n                _buildNumberInput(\r\n                  label: 'Value',\r\n                  value: step.parameters['value'],\r\n                  onChanged: (value) {\r\n                    setState(() {\r\n                      step.parameters['value'] = value;\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            ],\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildLoopSubSteps(RecipeStep loopStep) {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        SizedBox(height: 16),\r\n        Text(\r\n          'Loop Steps:',\r\n          style: TextStyle(\r\n            color: DarkThemeColors.primaryText,\r\n            fontWeight: FontWeight.w500,\r\n            fontSize: 14,\r\n          ),\r\n        ),\r\n        SizedBox(height: 8),\r\n        ...loopStep.subSteps!.asMap().entries.map((entry) {\r\n          int index = entry.key;\r\n          RecipeStep subStep = entry.value;\r\n          return _buildSubStepCard(subStep, index, loopStep);\r\n        }).toList(),\r\n        SizedBox(height: 8),\r\n        ElevatedButton(\r\n          child: Text('Add Loop Step'),\r\n          style: ElevatedButton.styleFrom(\r\n            foregroundColor: DarkThemeColors.background,\r\n            backgroundColor: DarkThemeColors.accent,\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(8),\r\n            ),\r\n          ),\r\n          onPressed: () => _showAddStepDialog(context, parentStep: loopStep),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildSubStepCard(RecipeStep step, int index, RecipeStep parentStep) {\r\n    return Card(\r\n      margin: EdgeInsets.only(bottom: 8),\r\n      color: DarkThemeColors.inputFill,\r\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n      child: ListTile(\r\n        title: Text(\r\n          'Substep ${index + 1}: ${_getStepTitle(step)}',\r\n          style: TextStyle(color: DarkThemeColors.primaryText, fontSize: 14),\r\n        ),\r\n        trailing: Row(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            IconButton(\r\n              icon: Icon(Icons.edit, color: DarkThemeColors.accent),\r\n              onPressed: () => _showEditStepDialog(\r\n                context,\r\n                step,\r\n                index,\r\n                parentStep: parentStep,\r\n              ),\r\n            ),\r\n            IconButton(\r\n              icon: Icon(Icons.delete, color: Colors.red),\r\n              onPressed: () {\r\n                setState(() {\r\n                  parentStep.subSteps!.removeAt(index);\r\n                });\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDropdown<T>({\r\n    required String label,\r\n    required T? value,\r\n    required List<T> items,\r\n    required Function(T?) onChanged,\r\n  }) {\r\n    return Row(\r\n      children: [\r\n        Expanded(\r\n          flex: 2,\r\n          child: Text(label,\r\n              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n        ),\r\n        Expanded(\r\n          flex: 3,\r\n          child: DropdownButtonFormField<T>(\r\n            value: value,\r\n            onChanged: onChanged,\r\n            items: items.map((T item) {\r\n              return DropdownMenuItem<T>(\r\n                value: item,\r\n                child: Text(\r\n                  item.toString(),\r\n                  style: TextStyle(color: DarkThemeColors.primaryText),\r\n                ),\r\n              );\r\n            }).toList(),\r\n            dropdownColor: DarkThemeColors.cardBackground,\r\n            decoration: InputDecoration(\r\n              filled: true,\r\n              fillColor: DarkThemeColors.inputFill,\r\n              border: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(8),\r\n                borderSide: BorderSide.none,\r\n              ),\r\n              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildNumberInput({\r\n    required String label,\r\n    required dynamic value,\r\n    required Function(dynamic) onChanged,\r\n  }) {\r\n    return Row(\r\n      children: [\r\n        Expanded(\r\n          flex: 2,\r\n          child: Text(label,\r\n              style: TextStyle(color: DarkThemeColors.secondaryText)),\r\n        ),\r\n        Expanded(\r\n          flex: 3,\r\n          child: TextFormField(\r\n            initialValue: value?.toString() ?? '',\r\n            style: TextStyle(color: DarkThemeColors.primaryText),\r\n            keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n            decoration: InputDecoration(\r\n              filled: true,\r\n              fillColor: DarkThemeColors.inputFill,\r\n              border: OutlineInputBorder(\r\n                borderRadius: BorderRadius.circular(8),\r\n                borderSide: BorderSide.none,\r\n              ),\r\n              contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 8),\r\n            ),\r\n            onChanged: (newValue) {\r\n              onChanged(num.tryParse(newValue));\r\n            },\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _showEditStepDialog(BuildContext context, RecipeStep step, int index,\r\n      {RecipeStep? parentStep}) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text('Edit Step',\r\n              style: TextStyle(color: DarkThemeColors.primaryText)),\r\n          content: SingleChildScrollView(\r\n            child: _buildStepEditor(step),\r\n          ),\r\n          backgroundColor: DarkThemeColors.cardBackground,\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Cancel',\r\n                  style: TextStyle(color: DarkThemeColors.accent)),\r\n              onPressed: () => Navigator.pop(context),\r\n            ),\r\n            TextButton(\r\n              child:\r\n                  Text('Save', style: TextStyle(color: DarkThemeColors.accent)),\r\n              onPressed: () {\r\n                Navigator.pop(context);\r\n                setState(() {});\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showAddStepDialog(BuildContext context, {RecipeStep? parentStep}) {\r\n    showModalBottomSheet(\r\n      context: context,\r\n      backgroundColor: DarkThemeColors.cardBackground,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\r\n      ),\r\n      builder: (BuildContext context) {\r\n        return SafeArea(\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              ListTile(\r\n                title: Text('Add Step',\r\n                    style: TextStyle(\r\n                        color: DarkThemeColors.primaryText,\r\n                        fontWeight: FontWeight.bold)),\r\n              ),\r\n              _buildStepTypeOption(\r\n                context,\r\n                'Loop',\r\n                Icons.loop,\r\n                StepType.loop,\r\n                parentStep,\r\n              ),\r\n              _buildStepTypeOption(\r\n                context,\r\n                'Valve',\r\n                Icons.arrow_forward,\r\n                StepType.valve,\r\n                parentStep,\r\n              ),\r\n              _buildStepTypeOption(\r\n                context,\r\n                'Purge',\r\n                Icons.air,\r\n                StepType.purge,\r\n                parentStep,\r\n              ),\r\n              _buildStepTypeOption(\r\n                context,\r\n                'Set Parameter',\r\n                Icons.settings,\r\n                StepType.setParameter,\r\n                parentStep,\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildStepTypeOption(\r\n    BuildContext context,\r\n    String title,\r\n    IconData icon,\r\n    StepType type,\r\n    RecipeStep? parentStep,\r\n  ) {\r\n    return ListTile(\r\n      leading: Icon(icon, color: DarkThemeColors.accent),\r\n      title: Text(title, style: TextStyle(color: DarkThemeColors.primaryText)),\r\n      onTap: () {\r\n        Navigator.pop(context);\r\n        _addStep(type, parentStep?.subSteps ?? _steps);\r\n      },\r\n    );\r\n  }\r\n\r\n  void _addStep(StepType type, List<RecipeStep> steps) {\r\n    setState(() {\r\n      switch (type) {\r\n        case StepType.loop:\r\n          steps.add(RecipeStep(\r\n            type: StepType.loop,\r\n            parameters: {\r\n              'iterations': 1,\r\n              'temperature': null,\r\n              'pressure': null\r\n            },\r\n            subSteps: [],\r\n          ));\r\n          break;\r\n        case StepType.valve:\r\n          steps.add(RecipeStep(\r\n            type: StepType.valve,\r\n            parameters: {'valveType': ValveType.valveA, 'duration': 5},\r\n          ));\r\n          break;\r\n        case StepType.purge:\r\n          steps.add(RecipeStep(\r\n            type: StepType.purge,\r\n            parameters: {'duration': 10},\r\n          ));\r\n          break;\r\n        case StepType.setParameter:\r\n          final componentState = context.read<ComponentListBloc>().state;\r\n          final availableComponents = componentState.components.values.toList();\r\n\r\n          if (availableComponents.isNotEmpty) {\r\n            final firstComponent = availableComponents.first;\r\n            steps.add(RecipeStep(\r\n              type: StepType.setParameter,\r\n              parameters: {\r\n                'component': firstComponent.name,\r\n                'parameter': null,\r\n                'value': null,\r\n              },\r\n            ));\r\n          } else {\r\n            ScaffoldMessenger.of(context).showSnackBar(\r\n              SnackBar(content: Text('No components available')),\r\n            );\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  String _getStepTitle(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.loop:\r\n        return 'Loop ${step.parameters['iterations']} times';\r\n      case StepType.valve:\r\n        return '${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} '\r\n            'for ${step.parameters['duration']}s';\r\n      case StepType.purge:\r\n        return 'Purge for ${step.parameters['duration']}s';\r\n      case StepType.setParameter:\r\n        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} '\r\n            'to ${step.parameters['value']}';\r\n      default:\r\n        return 'Unknown Step';\r\n    }\r\n  }\r\n\r\n  void _saveRecipe(BuildContext context) {\r\n    final errors = _validateRecipe();\r\n    if (errors.isNotEmpty) {\r\n      _showValidationErrors(errors);\r\n      return;\r\n    }\r\n\r\n    final newRecipe = Recipe(\r\n      id: widget.recipeId ?? DateTime.now().millisecondsSinceEpoch.toString(),\r\n      name: _nameController.text,\r\n      substrate: _substrateController.text,\r\n      steps: _steps,\r\n      chamberTemperatureSetPoint:\r\n          double.tryParse(_chamberTempController.text) ?? 150.0,\r\n      pressureSetPoint: double.tryParse(_pressureController.text) ?? 1.0,\r\n    );\r\n\r\n    if (widget.recipeId == null) {\r\n      context.read<RecipeBloc>().add(AddRecipe(newRecipe));\r\n    } else {\r\n      context.read<RecipeBloc>().add(UpdateRecipe(newRecipe));\r\n    }\r\n  }\r\n\r\n  List<String> _validateRecipe() {\r\n    final errors = <String>[];\r\n\r\n    if (_nameController.text.isEmpty) {\r\n      errors.add('Recipe name is required');\r\n    }\r\n\r\n    if (_substrateController.text.isEmpty) {\r\n      errors.add('Substrate is required');\r\n    }\r\n\r\n    if (_steps.isEmpty) {\r\n      errors.add('At least one step is required');\r\n    }\r\n\r\n    // Validate all steps\r\n    for (var i = 0; i < _steps.length; i++) {\r\n      final stepErrors = _validateStep(_steps[i], i + 1);\r\n      errors.addAll(stepErrors);\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  List<String> _validateStep(RecipeStep step, int stepNumber) {\r\n    final errors = <String>[];\r\n    final prefix = 'Step $stepNumber:';\r\n\r\n    switch (step.type) {\r\n      case StepType.loop:\r\n        if (step.parameters['iterations'] == null ||\r\n            step.parameters['iterations'] <= 0) {\r\n          errors.add('$prefix Loop iterations must be greater than 0');\r\n        }\r\n        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n          errors.add('$prefix Loop must contain at least one step');\r\n        } else {\r\n          for (var i = 0; i < step.subSteps!.length; i++) {\r\n            final subErrors = _validateStep(step.subSteps![i], i + 1);\r\n            errors.addAll(subErrors.map((e) => '$prefix Substep $e'));\r\n          }\r\n        }\r\n        break;\r\n\r\n      case StepType.valve:\r\n        if (step.parameters['duration'] == null ||\r\n            step.parameters['duration'] <= 0) {\r\n          errors.add('$prefix Valve duration must be greater than 0');\r\n        }\r\n        if (step.parameters['valveType'] == null) {\r\n          errors.add('$prefix Valve type must be selected');\r\n        }\r\n        break;\r\n\r\n      case StepType.purge:\r\n        if (step.parameters['duration'] == null ||\r\n            step.parameters['duration'] <= 0) {\r\n          errors.add('$prefix Purge duration must be greater than 0');\r\n        }\r\n        break;\r\n\r\n      case StepType.setParameter:\r\n        if (step.parameters['component'] == null) {\r\n          errors.add('$prefix Component must be selected');\r\n        }\r\n        if (step.parameters['parameter'] == null) {\r\n          errors.add('$prefix Parameter must be selected');\r\n        }\r\n        if (step.parameters['value'] == null) {\r\n          errors.add('$prefix Value must be set');\r\n        }\r\n        break;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  void _showValidationErrors(List<String> errors) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: Text(\r\n          'Validation Errors',\r\n          style: TextStyle(color: DarkThemeColors.primaryText),\r\n        ),\r\n        content: SingleChildScrollView(\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: errors\r\n                .map((error) => Padding(\r\n                      padding: const EdgeInsets.symmetric(vertical: 4),\r\n                      child: Text(\r\n                        'â¢ $error',\r\n                        style: TextStyle(color: DarkThemeColors.primaryText),\r\n                      ),\r\n                    ))\r\n                .toList(),\r\n          ),\r\n        ),\r\n        backgroundColor: DarkThemeColors.cardBackground,\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: Text('OK', style: TextStyle(color: DarkThemeColors.accent)),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}