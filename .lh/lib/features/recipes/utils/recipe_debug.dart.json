{
    "sourceFile": "lib/features/recipes/utils/recipe_debug.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734465926569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734465926569,
            "name": "Commit-0",
            "content": "import 'package:experiment_planner/features/recipes/models/recipe.dart';\r\n\r\nclass RecipeDebug {\r\n  static Map<String, dynamic> validateRecipeData(Recipe recipe) {\r\n    final issues = <String, List<String>>{\r\n      'critical': [],\r\n      'warnings': [],\r\n    };\r\n\r\n    // Check required fields\r\n    if (recipe.id.isEmpty) issues['critical']!.add('Recipe ID is empty');\r\n    if (recipe.name.isEmpty) issues['critical']!.add('Recipe name is empty');\r\n    if (recipe.substrate.isEmpty) issues['critical']!.add('Substrate is empty');\r\n    if (recipe.steps.isEmpty) issues['critical']!.add('No steps defined');\r\n\r\n    // Check parameter ranges\r\n    if (recipe.chamberTemperatureSetPoint < 0 || recipe.chamberTemperatureSetPoint > 1000) {\r\n      issues['warnings']!.add('Chamber temperature may be out of normal range');\r\n    }\r\n    if (recipe.pressureSetPoint <= 0 || recipe.pressureSetPoint > 10) {\r\n      issues['warnings']!.add('Pressure may be out of normal range');\r\n    }\r\n\r\n    // Validate steps\r\n    for (var i = 0; i < recipe.steps.length; i++) {\r\n      final stepIssues = _validateStep(recipe.steps[i], i);\r\n      issues['critical']!.addAll(stepIssues['critical']!);\r\n      issues['warnings']!.addAll(stepIssues['warnings']!);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  static Map<String, List<String>> _validateStep(RecipeStep step, int index) {\r\n    final issues = {\r\n      'critical': <String>[],\r\n      'warnings': <String>[],\r\n    };\r\n\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        if (!step.parameters.containsKey('duration')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing valve duration');\r\n        }\r\n        if (!step.parameters.containsKey('valveType')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing valve type');\r\n        }\r\n        break;\r\n\r\n      case StepType.purge:\r\n        if (!step.parameters.containsKey('duration')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing purge duration');\r\n        }\r\n        final duration = step.parameters['duration'] as num?;\r\n        if (duration != null && duration > 300) { // 5 minutes\r\n          issues['warnings']!.add('Step ${index + 1}: Long purge duration (${duration}s)');\r\n        }\r\n        break;\r\n\r\n      case StepType.loop:\r\n        if (!step.parameters.containsKey('iterations')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing loop iterations');\r\n        }\r\n        if (step.subSteps == null || step.subSteps!.isEmpty) {\r\n          issues['critical']!.add('Step ${index + 1}: Empty loop step');\r\n        } else {\r\n          for (var i = 0; i < step.subSteps!.length; i++) {\r\n            final subIssues = _validateStep(step.subSteps![i], i);\r\n            issues['critical']!.addAll(\r\n              subIssues['critical']!.map((e) => 'Step ${index + 1} (Sub $i): $e')\r\n            );\r\n            issues['warnings']!.addAll(\r\n              subIssues['warnings']!.map((e) => 'Step ${index + 1} (Sub $i): $e')\r\n            );\r\n          }\r\n        }\r\n        break;\r\n\r\n      case StepType.setParameter:\r\n        if (!step.parameters.containsKey('component')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing component');\r\n        }\r\n        if (!step.parameters.containsKey('parameter')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing parameter name');\r\n        }\r\n        if (!step.parameters.containsKey('value')) {\r\n          issues['critical']!.add('Step ${index + 1}: Missing parameter value');\r\n        }\r\n        break;\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  static String prettyPrintRecipe(Recipe recipe) {\r\n    final buffer = StringBuffer();\r\n    buffer.writeln('Recipe: ${recipe.name} (ID: ${recipe.id})');\r\n    buffer.writeln('Substrate: ${recipe.substrate}');\r\n    buffer.writeln('Chamber Temperature: ${recipe.chamberTemperatureSetPoint}Â°C');\r\n    buffer.writeln('Pressure: ${recipe.pressureSetPoint} atm');\r\n    buffer.writeln('Steps:');\r\n\r\n    _printSteps(recipe.steps, buffer, indent: 2);\r\n\r\n    return buffer.toString();\r\n  }\r\n\r\n  static void _printSteps(List<RecipeStep> steps, StringBuffer buffer, {int indent = 0}) {\r\n    final padding = ' ' * indent;\r\n    for (var i = 0; i < steps.length; i++) {\r\n      final step = steps[i];\r\n      buffer.writeln('$padding${i + 1}. ${_stepToString(step)}');\r\n\r\n      if (step.type == StepType.loop && step.subSteps != null) {\r\n        buffer.writeln('$padding   Sub-steps:');\r\n        _printSteps(step.subSteps!, buffer, indent: indent + 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  static String _stepToString(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        return 'Valve (${step.parameters['valveType']}) for ${step.parameters['duration']}s';\r\n      case StepType.purge:\r\n        return 'Purge for ${step.parameters['duration']}s';\r\n      case StepType.loop:\r\n        return 'Loop ${step.parameters['iterations']} times';\r\n      case StepType.setParameter:\r\n        return 'Set ${step.parameters['component']} ${step.parameters['parameter']} to ${step.parameters['value']}';\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}