{
    "sourceFile": "lib/features/components/repository/user_component_state_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1734456869897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734456892567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import '../models/system_component.dart';\r\n import '../../../core/exceptions/bloc_exception.dart';\r\n \r\n class UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n-  static const int HISTORY_LIMIT = 1000;\r\n+  static const String HISTORY_LIMIT = 1000;\r\n \r\n   UserComponentStateRepository() : super('component_states');\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1734456911762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import '../models/system_component.dart';\r\n import '../../../core/exceptions/bloc_exception.dart';\r\n \r\n class UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n-  static const String HISTORY_LIMIT = 1000;\r\n+  static const int HISTORY_LIMIT = 1000;\r\n \r\n   UserComponentStateRepository() : super('component_states');\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1734458639304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import '../models/system_component.dart';\r\n import '../../../core/exceptions/bloc_exception.dart';\r\n \r\n class UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n-  static const int HISTORY_LIMIT = 1000;\r\n+  static const String HISTORY_LIMIT = 1000;\r\n \r\n   UserComponentStateRepository() : super('component_states');\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1734458684474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import '../models/system_component.dart';\r\n import '../../../core/exceptions/bloc_exception.dart';\r\n \r\n class UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n-  static const String HISTORY_LIMIT = 1000;\r\n+  static const int HISTORY_LIMIT = 1000;\r\n \r\n   UserComponentStateRepository() : super('component_states');\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1734460166325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,18 @@\n       throw BlocException('Failed to get active components: ${e.toString()}');\r\n     }\r\n   }\r\n \r\n+  Stream<SystemComponent?> watch(String componentName, {required String userId}) {\r\n+    return getUserCollection(userId)\r\n+        .doc(componentName)\r\n+        .snapshots()\r\n+        .map((snapshot) {\r\n+      if (!snapshot.exists) return null;\r\n+      return fromJson(snapshot.data() as Map<String, dynamic>);\r\n+    });\r\n+  }\r\n+\r\n   void _validateComponent(SystemComponent component) {\r\n     if (component.name.isEmpty) {\r\n       throw BlocException('Component name cannot be empty');\r\n     }\r\n"
                },
                {
                    "date": 1734465322239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import '../../../core/exceptions/bloc_exception.dart';\r\n \r\n class UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n   static const int HISTORY_LIMIT = 1000;\r\n+  final _firestore = FirebaseFirestore.instance;\r\n \r\n   UserComponentStateRepository() : super('component_states');\r\n \r\n   @override\r\n@@ -101,5 +102,45 @@\n         );\r\n       }\r\n     }\r\n   }\r\n+\r\n+  // Watch user-specific component states\r\n+  Stream<List<SystemComponent>> watchUserComponents(String userId) {\r\n+    return _firestore\r\n+        .collection('users/$userId/components')\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.docs\r\n+            .map((doc) => SystemComponent.fromJson(doc.data()))\r\n+            .toList());\r\n+  }\r\n+\r\n+  // Initialize user component from global definition\r\n+  Future<void> initializeUserComponent(\r\n+    String userId,\r\n+    SystemComponent globalComponent\r\n+  ) async {\r\n+    final docRef = _firestore\r\n+        .collection('users/$userId/components')\r\n+        .doc(globalComponent.id);\r\n+\r\n+    final userComponent = globalComponent.copyWith(\r\n+      currentValues: Map.from(globalComponent.currentValues),\r\n+      setValues: Map.from(globalComponent.setValues),\r\n+      isActivated: false,  // Start deactivated\r\n+    );\r\n+\r\n+    await docRef.set(userComponent.toJson());\r\n+  }\r\n+\r\n+  // Update user component state\r\n+  Future<void> updateComponentState(\r\n+    String userId,\r\n+    String componentId,\r\n+    Map<String, dynamic> updates\r\n+  ) async {\r\n+    await _firestore\r\n+        .collection('users/$userId/components')\r\n+        .doc(componentId)\r\n+        .update(updates);\r\n+  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734456869897,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:experiment_planner/shared/base/base_repository.dart';\r\nimport '../models/system_component.dart';\r\nimport '../../../core/exceptions/bloc_exception.dart';\r\n\r\nclass UserComponentStateRepository extends BaseRepository<SystemComponent> {\r\n  static const int HISTORY_LIMIT = 1000;\r\n\r\n  UserComponentStateRepository() : super('component_states');\r\n\r\n  @override\r\n  SystemComponent fromJson(Map<String, dynamic> json) =>\r\n      SystemComponent.fromJson(json);\r\n\r\n  Future<void> saveComponentState(\r\n    SystemComponent component,\r\n    {required String userId}\r\n  ) async {\r\n    try {\r\n      _validateComponent(component);\r\n      await add(component.name, component, userId: userId);\r\n\r\n      // Save historical data\r\n      await getUserCollection(userId)\r\n          .doc(component.name)\r\n          .collection('history')\r\n          .add({\r\n        'timestamp': FieldValue.serverTimestamp(),\r\n        'currentValues': component.currentValues,\r\n        'setValues': component.setValues,\r\n        'isActivated': component.isActivated,\r\n      });\r\n    } catch (e) {\r\n      throw BlocException('Failed to save component state: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Future<void> updateComponentValues(\r\n    String componentName,\r\n    Map<String, double> values,\r\n    {required String userId}\r\n  ) async {\r\n    try {\r\n      final doc = await getUserCollection(userId).doc(componentName).get();\r\n      if (!doc.exists) {\r\n        throw BlocException('Component state not found: $componentName');\r\n      }\r\n\r\n      final component = fromJson(doc.data() as Map<String, dynamic>);\r\n      component.updateCurrentValues(values);\r\n      await saveComponentState(component, userId: userId);\r\n    } catch (e) {\r\n      throw BlocException('Failed to update component values: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Future<List<SystemComponent>> getActiveComponents(String userId) async {\r\n    try {\r\n      final snapshot = await getUserCollection(userId)\r\n          .where('isActivated', isEqualTo: true)\r\n          .get();\r\n\r\n      return snapshot.docs\r\n          .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n          .toList();\r\n    } catch (e) {\r\n      throw BlocException('Failed to get active components: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  void _validateComponent(SystemComponent component) {\r\n    if (component.name.isEmpty) {\r\n      throw BlocException('Component name cannot be empty');\r\n    }\r\n\r\n    for (final entry in component.currentValues.entries) {\r\n      final parameter = entry.key;\r\n      final value = entry.value;\r\n\r\n      if (component.minValues.containsKey(parameter) &&\r\n          value < component.minValues[parameter]!) {\r\n        throw BlocException(\r\n          'Value for $parameter is below minimum: $value < ${component.minValues[parameter]}',\r\n        );\r\n      }\r\n\r\n      if (component.maxValues.containsKey(parameter) &&\r\n          value > component.maxValues[parameter]!) {\r\n        throw BlocException(\r\n          'Value for $parameter is above maximum: $value > ${component.maxValues[parameter]}',\r\n        );\r\n      }\r\n    }\r\n  }\r\n}"
        }
    ]
}