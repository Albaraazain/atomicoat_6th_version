{
    "sourceFile": "lib/features/components/repository/component_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760285,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:experiment_planner/core/exceptions/bloc_exception.dart';\r\nimport '../models/system_component.dart';\r\nimport '../../auth/services/auth_service.dart';\r\nimport '../../../core/utils/data_point_cache.dart';\r\n\r\nclass ComponentRepository {\r\n  final FirebaseFirestore _firestore;\r\n\r\n  ComponentRepository()\r\n      : _firestore = FirebaseFirestore.instance;\r\n\r\n  CollectionReference get componentsCollection =>\r\n      _firestore.collection('system_components');\r\n\r\n  Future<SystemComponent?> getComponent(String name) async {\r\n    try {\r\n      final doc = await componentsCollection.doc(name).get();\r\n      if (!doc.exists) return null;\r\n      return SystemComponent.fromJson({\r\n        ...doc.data() as Map<String, dynamic>,\r\n        'name': doc.id,\r\n      });\r\n    } catch (e) {\r\n      throw BlocException('Failed to get component: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Stream<List<SystemComponent>> watchAllComponents() {\r\n    return componentsCollection.snapshots().map((snapshot) {\r\n      try {\r\n        return snapshot.docs.map((doc) {\r\n          return SystemComponent.fromJson({\r\n            ...doc.data() as Map<String, dynamic>,\r\n            'name': doc.id,\r\n          });\r\n        }).toList();\r\n      } catch (e) {\r\n        throw BlocException('Failed to process components update: ${e.toString()}');\r\n      }\r\n    });\r\n  }\r\n\r\n  Future<List<SystemComponent>> getAllComponents() async {\r\n    try {\r\n      final snapshot = await componentsCollection.get();\r\n      return snapshot.docs.map((doc) {\r\n        return SystemComponent.fromJson({\r\n          ...doc.data() as Map<String, dynamic>,\r\n          'name': doc.id,\r\n        });\r\n      }).toList();\r\n    } catch (e) {\r\n      throw BlocException('Failed to get all components: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Stream<SystemComponent?> watchComponent(String componentName) {\r\n    return componentsCollection\r\n        .doc(componentName)\r\n        .snapshots()\r\n        .map((snapshot) {\r\n          try {\r\n            if (!snapshot.exists) return null;\r\n\r\n            return SystemComponent.fromJson({\r\n              ...snapshot.data() as Map<String, dynamic>,\r\n              'name': snapshot.id,\r\n            });\r\n          } catch (e) {\r\n            throw BlocException('Failed to process component update: ${e.toString()}');\r\n          }\r\n        });\r\n  }\r\n\r\n  Future<void> saveComponentState(SystemComponent component) async {\r\n    try {\r\n      // Validate component before saving\r\n      _validateComponent(component);\r\n\r\n      // Save to Firestore\r\n      await componentsCollection.doc(component.name).set(\r\n        component.toJson(),\r\n        SetOptions(merge: true),\r\n      );\r\n    } catch (e) {\r\n      throw BlocException('Failed to save component state: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Future<void> updateComponentValues(\r\n    String componentName,\r\n    Map<String, double> values,\r\n  ) async {\r\n    try {\r\n      final component = await getComponent(componentName);\r\n      if (component == null) {\r\n        throw BlocException('Component not found: $componentName');\r\n      }\r\n\r\n      component.updateCurrentValues(values);\r\n      await saveComponentState(component);\r\n    } catch (e) {\r\n      throw BlocException('Failed to update component values: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Future<void> updateComponentSetValues(\r\n    String componentName,\r\n    Map<String, double> setValues,\r\n  ) async {\r\n    try {\r\n      final component = await getComponent(componentName);\r\n      if (component == null) {\r\n        throw BlocException('Component not found: $componentName');\r\n      }\r\n\r\n      component.updateSetValues(setValues);\r\n      await saveComponentState(component);\r\n    } catch (e) {\r\n      throw BlocException('Failed to update component set values: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  void _validateComponent(SystemComponent component) {\r\n    if (component.name.isEmpty) {\r\n      throw BlocException('Component name cannot be empty');\r\n    }\r\n\r\n    // Validate current values against min/max\r\n    for (final entry in component.currentValues.entries) {\r\n      final parameter = entry.key;\r\n      final value = entry.value;\r\n\r\n      if (component.minValues.containsKey(parameter) &&\r\n          value < component.minValues[parameter]!) {\r\n        throw BlocException(\r\n          'Value for $parameter is below minimum: $value < ${component.minValues[parameter]}',\r\n        );\r\n      }\r\n\r\n      if (component.maxValues.containsKey(parameter) &&\r\n          value > component.maxValues[parameter]!) {\r\n        throw BlocException(\r\n          'Value for $parameter is above maximum: $value > ${component.maxValues[parameter]}',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> clearComponentErrors(String componentName) async {\r\n    try {\r\n      final component = await getComponent(componentName);\r\n      if (component == null) return;\r\n\r\n      component.clearErrorMessages();\r\n      await saveComponentState(component);\r\n    } catch (e) {\r\n      throw BlocException('Failed to clear component errors: ${e.toString()}');\r\n    }\r\n  }\r\n}"
        }
    ]
}