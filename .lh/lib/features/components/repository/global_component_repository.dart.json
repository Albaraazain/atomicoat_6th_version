{
    "sourceFile": "lib/features/components/repository/global_component_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734456886662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734465323134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,48 +3,34 @@\n import '../models/system_component.dart';\r\n \r\n // For global component definitions/templates\r\n class GlobalComponentRepository {\r\n-  final FirebaseFirestore _firestore;\r\n-  static const String _collection = 'system_components';\r\n+  final _firestore = FirebaseFirestore.instance;\r\n \r\n-  GlobalComponentRepository({FirebaseFirestore? firestore})\r\n-      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n-\r\n-  CollectionReference get componentsCollection =>\r\n-      _firestore.collection(_collection);\r\n-\r\n-  Future<SystemComponent?> getComponent(String name) async {\r\n-    try {\r\n-      final doc = await componentsCollection.doc(name).get();\r\n-      if (!doc.exists) return null;\r\n-      return SystemComponent.fromJson({\r\n-        ...doc.data() as Map<String, dynamic>,\r\n-        'name': doc.id,\r\n-      });\r\n-    } catch (e) {\r\n-      throw BlocException('Failed to get component: ${e.toString()}');\r\n-    }\r\n+  // Get global component definitions\r\n+  Stream<List<SystemComponent>> watchAllComponents() {\r\n+    return _firestore\r\n+        .collection('system_components')\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.docs\r\n+            .map((doc) => SystemComponent.fromJson(doc.data()))\r\n+            .toList());\r\n   }\r\n \r\n-  Stream<List<SystemComponent>> watchAllComponents() {\r\n-    return componentsCollection.snapshots().map((snapshot) {\r\n-      try {\r\n-        return snapshot.docs.map((doc) {\r\n-          return SystemComponent.fromJson({\r\n-            ...doc.data() as Map<String, dynamic>,\r\n-            'name': doc.id,\r\n-          });\r\n-        }).toList();\r\n-      } catch (e) {\r\n-        throw BlocException('Failed to process components update: ${e.toString()}');\r\n-      }\r\n-    });\r\n+  // Get single component definition\r\n+  Future<SystemComponent?> getComponentDefinition(String componentId) {\r\n+    return _firestore\r\n+        .collection('system_components')\r\n+        .doc(componentId)\r\n+        .get()\r\n+        .then((doc) => doc.exists\r\n+            ? SystemComponent.fromJson(doc.data()!)\r\n+            : null);\r\n   }\r\n \r\n   Future<void> saveComponentDefinition(SystemComponent component) async {\r\n     try {\r\n-      await componentsCollection.doc(component.name).set(\r\n+      await _firestore.collection('system_components').doc(component.name).set(\r\n         component.toJson(),\r\n         SetOptions(merge: true),\r\n       );\r\n     } catch (e) {\r\n@@ -53,9 +39,9 @@\n   }\r\n \r\n   Future<List<SystemComponent>> getAllComponentDefinitions() async {\r\n     try {\r\n-      final snapshot = await componentsCollection.get();\r\n+      final snapshot = await _firestore.collection('system_components').get();\r\n       return snapshot.docs.map((doc) {\r\n         return SystemComponent.fromJson({\r\n           ...doc.data() as Map<String, dynamic>,\r\n           'name': doc.id,\r\n"
                }
            ],
            "date": 1734456886662,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:experiment_planner/core/exceptions/bloc_exception.dart';\r\nimport '../models/system_component.dart';\r\n\r\n// For global component definitions/templates\r\nclass GlobalComponentRepository {\r\n  final FirebaseFirestore _firestore;\r\n  static const String _collection = 'system_components';\r\n\r\n  GlobalComponentRepository({FirebaseFirestore? firestore})\r\n      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n\r\n  CollectionReference get componentsCollection =>\r\n      _firestore.collection(_collection);\r\n\r\n  Future<SystemComponent?> getComponent(String name) async {\r\n    try {\r\n      final doc = await componentsCollection.doc(name).get();\r\n      if (!doc.exists) return null;\r\n      return SystemComponent.fromJson({\r\n        ...doc.data() as Map<String, dynamic>,\r\n        'name': doc.id,\r\n      });\r\n    } catch (e) {\r\n      throw BlocException('Failed to get component: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Stream<List<SystemComponent>> watchAllComponents() {\r\n    return componentsCollection.snapshots().map((snapshot) {\r\n      try {\r\n        return snapshot.docs.map((doc) {\r\n          return SystemComponent.fromJson({\r\n            ...doc.data() as Map<String, dynamic>,\r\n            'name': doc.id,\r\n          });\r\n        }).toList();\r\n      } catch (e) {\r\n        throw BlocException('Failed to process components update: ${e.toString()}');\r\n      }\r\n    });\r\n  }\r\n\r\n  Future<void> saveComponentDefinition(SystemComponent component) async {\r\n    try {\r\n      await componentsCollection.doc(component.name).set(\r\n        component.toJson(),\r\n        SetOptions(merge: true),\r\n      );\r\n    } catch (e) {\r\n      throw BlocException('Failed to save component definition: ${e.toString()}');\r\n    }\r\n  }\r\n\r\n  Future<List<SystemComponent>> getAllComponentDefinitions() async {\r\n    try {\r\n      final snapshot = await componentsCollection.get();\r\n      return snapshot.docs.map((doc) {\r\n        return SystemComponent.fromJson({\r\n          ...doc.data() as Map<String, dynamic>,\r\n          'name': doc.id,\r\n        });\r\n      }).toList();\r\n    } catch (e) {\r\n      throw BlocException('Failed to get component definitions: ${e.toString()}');\r\n    }\r\n  }\r\n}"
        }
    ]
}