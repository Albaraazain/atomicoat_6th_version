{
    "sourceFile": "lib/features/components/widgets/component_control_dialog.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734433699382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,8 @@\n \r\n \r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_event.dart';\r\n-import '../../../blocs/component/bloc/component_state.dart';\r\n import '../models/system_component.dart';\r\n import '../../recipes/models/recipe.dart';\r\n \r\n class ComponentControlDialog extends StatefulWidget {\r\n"
                },
                {
                    "date": 1734433706912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+\r\n+\r\n+import 'package:experiment_planner/features/components/bloc/component_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../models/system_component.dart';\r\n+import '../../recipes/models/recipe.dart';\r\n+\r\n+class ComponentControlDialog extends StatefulWidget {\r\n+  final SystemComponent component;\r\n+  final bool isActiveInCurrentStep;\r\n+  final RecipeStep? currentRecipeStep;\r\n+\r\n+  ComponentControlDialog({\r\n+    required this.component,\r\n+    required this.isActiveInCurrentStep,\r\n+    this.currentRecipeStep,\r\n+  });\r\n+\r\n+  @override\r\n+  _ComponentControlDialogState createState() => _ComponentControlDialogState();\r\n+}\r\n+\r\n+class _ComponentControlDialogState extends State<ComponentControlDialog> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n+  late Map<String, TextEditingController> _controllers;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _controllers = {\r\n+      for (var entry in widget.component.setValues.entries)\r\n+        entry.key: TextEditingController(text: entry.value.toString())\r\n+    };\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _controllers.forEach((key, controller) => controller.dispose());\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _updateSetValues(BuildContext context) {\r\n+    if (_formKey.currentState!.validate()) {\r\n+      final componentBloc = context.read<ComponentBloc>();\r\n+      _controllers.forEach((parameter, controller) {\r\n+        double? newValue = double.tryParse(controller.text);\r\n+        if (newValue != null) {\r\n+          componentBloc.add(ComponentSetValueUpdated(\r\n+            widget.component.name,\r\n+            parameter,\r\n+            newValue,\r\n+          ));\r\n+        }\r\n+      });\r\n+      Navigator.of(context).pop();\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocBuilder<ComponentBloc, ComponentState>(\r\n+      builder: (context, state) {\r\n+        return AlertDialog(\r\n+          title: Text(widget.component.name),\r\n+          content: SingleChildScrollView(\r\n+            child: Form(\r\n+              key: _formKey,\r\n+              child: Column(\r\n+                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                mainAxisSize: MainAxisSize.min,\r\n+                children: [\r\n+                  Text('Status: ${widget.component.isActivated ? \"Active\" : \"Inactive\"}'),\r\n+                  SizedBox(height: 10),\r\n+                  Text('Current Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+                  ...widget.component.currentValues.entries.map((entry) =>\r\n+                      Text('  ${entry.key}: ${entry.value.toStringAsFixed(2)}')),\r\n+                  SizedBox(height: 10),\r\n+                  Text('Set Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+                  ...widget.component.setValues.entries.map((entry) => Padding(\r\n+                    padding: const EdgeInsets.symmetric(vertical: 4.0),\r\n+                    child: TextFormField(\r\n+                      controller: _controllers[entry.key],\r\n+                      decoration: InputDecoration(\r\n+                        labelText: entry.key,\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+                      validator: (value) {\r\n+                        if (value == null || value.isEmpty) {\r\n+                          return 'Please enter a value';\r\n+                        }\r\n+                        if (double.tryParse(value) == null) {\r\n+                          return 'Invalid number';\r\n+                        }\r\n+                        return null;\r\n+                      },\r\n+                    ),\r\n+                  )),\r\n+                  SizedBox(height: 10),\r\n+                  Text('Active in Current Step: ${widget.isActiveInCurrentStep ? \"Yes\" : \"No\"}'),\r\n+                  if (widget.currentRecipeStep != null) ...[\r\n+                    SizedBox(height: 10),\r\n+                    Text('Current Recipe Step:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+                    Text('  Type: ${widget.currentRecipeStep!.type}'),\r\n+                    ...widget.currentRecipeStep!.parameters.entries\r\n+                        .map((entry) => Text('  ${entry.key}: ${entry.value}')),\r\n+                  ],\r\n+                ],\r\n+              ),\r\n+            ),\r\n+          ),\r\n+          actions: [\r\n+            TextButton(\r\n+              onPressed: () => Navigator.of(context).pop(),\r\n+              child: Text('Close'),\r\n+            ),\r\n+            TextButton(\r\n+              onPressed: () => _updateSetValues(context),\r\n+              child: Text('Update'),\r\n+            ),\r\n+            TextButton(\r\n+              onPressed: () => _toggleComponentActivation(context),\r\n+              child: Text(widget.component.isActivated ? 'Deactivate' : 'Activate'),\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _toggleComponentActivation(BuildContext context) {\r\n+    final componentBloc = context.read<ComponentBloc>();\r\n+    componentBloc.add(ComponentActivationToggled(\r\n+      widget.component.name,\r\n+      !widget.component.isActivated,\r\n+    ));\r\n+    Navigator.of(context).pop();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_event.dart';\r\nimport '../../../blocs/component/bloc/component_state.dart';\r\nimport '../models/system_component.dart';\r\nimport '../../recipes/models/recipe.dart';\r\n\r\nclass ComponentControlDialog extends StatefulWidget {\r\n  final SystemComponent component;\r\n  final bool isActiveInCurrentStep;\r\n  final RecipeStep? currentRecipeStep;\r\n\r\n  ComponentControlDialog({\r\n    required this.component,\r\n    required this.isActiveInCurrentStep,\r\n    this.currentRecipeStep,\r\n  });\r\n\r\n  @override\r\n  _ComponentControlDialogState createState() => _ComponentControlDialogState();\r\n}\r\n\r\nclass _ComponentControlDialogState extends State<ComponentControlDialog> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  late Map<String, TextEditingController> _controllers;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _controllers = {\r\n      for (var entry in widget.component.setValues.entries)\r\n        entry.key: TextEditingController(text: entry.value.toString())\r\n    };\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _controllers.forEach((key, controller) => controller.dispose());\r\n    super.dispose();\r\n  }\r\n\r\n  void _updateSetValues(BuildContext context) {\r\n    if (_formKey.currentState!.validate()) {\r\n      final componentBloc = context.read<ComponentBloc>();\r\n      _controllers.forEach((parameter, controller) {\r\n        double? newValue = double.tryParse(controller.text);\r\n        if (newValue != null) {\r\n          componentBloc.add(ComponentSetValueUpdated(\r\n            widget.component.name,\r\n            parameter,\r\n            newValue,\r\n          ));\r\n        }\r\n      });\r\n      Navigator.of(context).pop();\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<ComponentBloc, ComponentState>(\r\n      builder: (context, state) {\r\n        return AlertDialog(\r\n          title: Text(widget.component.name),\r\n          content: SingleChildScrollView(\r\n            child: Form(\r\n              key: _formKey,\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  Text('Status: ${widget.component.isActivated ? \"Active\" : \"Inactive\"}'),\r\n                  SizedBox(height: 10),\r\n                  Text('Current Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n                  ...widget.component.currentValues.entries.map((entry) =>\r\n                      Text('  ${entry.key}: ${entry.value.toStringAsFixed(2)}')),\r\n                  SizedBox(height: 10),\r\n                  Text('Set Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n                  ...widget.component.setValues.entries.map((entry) => Padding(\r\n                    padding: const EdgeInsets.symmetric(vertical: 4.0),\r\n                    child: TextFormField(\r\n                      controller: _controllers[entry.key],\r\n                      decoration: InputDecoration(\r\n                        labelText: entry.key,\r\n                        border: OutlineInputBorder(),\r\n                      ),\r\n                      keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n                      validator: (value) {\r\n                        if (value == null || value.isEmpty) {\r\n                          return 'Please enter a value';\r\n                        }\r\n                        if (double.tryParse(value) == null) {\r\n                          return 'Invalid number';\r\n                        }\r\n                        return null;\r\n                      },\r\n                    ),\r\n                  )),\r\n                  SizedBox(height: 10),\r\n                  Text('Active in Current Step: ${widget.isActiveInCurrentStep ? \"Yes\" : \"No\"}'),\r\n                  if (widget.currentRecipeStep != null) ...[\r\n                    SizedBox(height: 10),\r\n                    Text('Current Recipe Step:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n                    Text('  Type: ${widget.currentRecipeStep!.type}'),\r\n                    ...widget.currentRecipeStep!.parameters.entries\r\n                        .map((entry) => Text('  ${entry.key}: ${entry.value}')),\r\n                  ],\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              onPressed: () => Navigator.of(context).pop(),\r\n              child: Text('Close'),\r\n            ),\r\n            TextButton(\r\n              onPressed: () => _updateSetValues(context),\r\n              child: Text('Update'),\r\n            ),\r\n            TextButton(\r\n              onPressed: () => _toggleComponentActivation(context),\r\n              child: Text(widget.component.isActivated ? 'Deactivate' : 'Activate'),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _toggleComponentActivation(BuildContext context) {\r\n    final componentBloc = context.read<ComponentBloc>();\r\n    componentBloc.add(ComponentActivationToggled(\r\n      widget.component.name,\r\n      !widget.component.isActivated,\r\n    ));\r\n    Navigator.of(context).pop();\r\n  }\r\n}"
        }
    ]
}