{
    "sourceFile": "lib/features/components/widgets/component_dashboard.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734433826861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,6 @@\n-\r\n-\r\n-import 'package:experiment_planner/blocs/component/bloc/component_list_state.dart';\r\n-import 'package:experiment_planner/blocs/component/repository/component_repository.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_list_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_event.dart';\r\n-import '../../../blocs/component/bloc/component_state.dart';\r\n import '../models/system_component.dart';\r\n \r\n class ComponentDashboard extends StatelessWidget {\r\n   const ComponentDashboard({Key? key}) : super(key: key);\r\n"
                },
                {
                    "date": 1734433832355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import '../models/system_component.dart';\r\n+\r\n+class ComponentDashboard extends StatelessWidget {\r\n+  const ComponentDashboard({Key? key}) : super(key: key);\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+      builder: (context, listState) {\r\n+        if (listState.isLoading) {\r\n+          return const Center(child: CircularProgressIndicator());\r\n+        }\r\n+\r\n+        if (listState.error != null) {\r\n+          return Center(child: Text('Error: ${listState.error}'));\r\n+        }\r\n+\r\n+        final components = listState.components.values.toList();\r\n+\r\n+        return ListView.builder(\r\n+          itemCount: components.length,\r\n+          itemBuilder: (context, index) {\r\n+            final component = components[index];\r\n+            return ComponentCard(component: component);\r\n+          },\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class ComponentCard extends StatelessWidget {\r\n+  final SystemComponent component;\r\n+\r\n+  const ComponentCard({\r\n+    Key? key,\r\n+    required this.component,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return BlocProvider(\r\n+      create: (context) => ComponentBloc(\r\n+        context.read<ComponentRepository>(),\r\n+      )..add(ComponentInitialized(component.name)),\r\n+      child: BlocBuilder<ComponentBloc, ComponentState>(\r\n+        builder: (context, state) {\r\n+          if (state.isLoading) {\r\n+            return const Card(\r\n+              child: Center(child: CircularProgressIndicator()),\r\n+            );\r\n+          }\r\n+\r\n+          final component = state.component;\r\n+          if (component == null) return const SizedBox();\r\n+\r\n+          return Card(\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.all(16.0),\r\n+              child: Column(\r\n+                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                children: [\r\n+                  Row(\r\n+                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                    children: [\r\n+                      Text(\r\n+                        component.name,\r\n+                        style: Theme.of(context).textTheme.titleLarge,\r\n+                      ),\r\n+                      Switch(\r\n+                        value: component.isActivated,\r\n+                        onChanged: (value) {\r\n+                          context.read<ComponentBloc>().add(\r\n+                            ComponentActivationToggled(\r\n+                              component.name,\r\n+                              value,\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                      ),\r\n+                    ],\r\n+                  ),\r\n+                  const SizedBox(height: 8),\r\n+                  Text(component.description),\r\n+                  const SizedBox(height: 16),\r\n+                  ...component.currentValues.entries.map(\r\n+                    (entry) => Padding(\r\n+                      padding: const EdgeInsets.only(bottom: 8.0),\r\n+                      child: Row(\r\n+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                        children: [\r\n+                          Text(entry.key),\r\n+                          Text(\r\n+                            entry.value.toStringAsFixed(2),\r\n+                            style: Theme.of(context).textTheme.bodyLarge,\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                  if (component.errorMessages.isNotEmpty) ...[\r\n+                    const SizedBox(height: 16),\r\n+                    const Text(\r\n+                      'Errors:',\r\n+                      style: TextStyle(color: Colors.red),\r\n+                    ),\r\n+                    ...component.errorMessages.map(\r\n+                      (error) => Text(\r\n+                        'â€¢ $error',\r\n+                        style: const TextStyle(color: Colors.red),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ],\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734433845280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,10 @@\n+import 'package:experiment_planner/features/components/bloc/component_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_state.dart';\r\n+import 'package:experiment_planner/features/components/repository/component_repository.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../models/system_component.dart';\r\n \r\n@@ -122,129 +126,5 @@\n         },\r\n       ),\r\n     );\r\n   }\r\n-}\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../models/system_component.dart';\r\n-\r\n-class ComponentDashboard extends StatelessWidget {\r\n-  const ComponentDashboard({Key? key}) : super(key: key);\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n-      builder: (context, listState) {\r\n-        if (listState.isLoading) {\r\n-          return const Center(child: CircularProgressIndicator());\r\n-        }\r\n-\r\n-        if (listState.error != null) {\r\n-          return Center(child: Text('Error: ${listState.error}'));\r\n-        }\r\n-\r\n-        final components = listState.components.values.toList();\r\n-\r\n-        return ListView.builder(\r\n-          itemCount: components.length,\r\n-          itemBuilder: (context, index) {\r\n-            final component = components[index];\r\n-            return ComponentCard(component: component);\r\n-          },\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class ComponentCard extends StatelessWidget {\r\n-  final SystemComponent component;\r\n-\r\n-  const ComponentCard({\r\n-    Key? key,\r\n-    required this.component,\r\n-  }) : super(key: key);\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return BlocProvider(\r\n-      create: (context) => ComponentBloc(\r\n-        context.read<ComponentRepository>(),\r\n-      )..add(ComponentInitialized(component.name)),\r\n-      child: BlocBuilder<ComponentBloc, ComponentState>(\r\n-        builder: (context, state) {\r\n-          if (state.isLoading) {\r\n-            return const Card(\r\n-              child: Center(child: CircularProgressIndicator()),\r\n-            );\r\n-          }\r\n-\r\n-          final component = state.component;\r\n-          if (component == null) return const SizedBox();\r\n-\r\n-          return Card(\r\n-            child: Padding(\r\n-              padding: const EdgeInsets.all(16.0),\r\n-              child: Column(\r\n-                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                children: [\r\n-                  Row(\r\n-                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                    children: [\r\n-                      Text(\r\n-                        component.name,\r\n-                        style: Theme.of(context).textTheme.titleLarge,\r\n-                      ),\r\n-                      Switch(\r\n-                        value: component.isActivated,\r\n-                        onChanged: (value) {\r\n-                          context.read<ComponentBloc>().add(\r\n-                            ComponentActivationToggled(\r\n-                              component.name,\r\n-                              value,\r\n-                            ),\r\n-                          );\r\n-                        },\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                  const SizedBox(height: 8),\r\n-                  Text(component.description),\r\n-                  const SizedBox(height: 16),\r\n-                  ...component.currentValues.entries.map(\r\n-                    (entry) => Padding(\r\n-                      padding: const EdgeInsets.only(bottom: 8.0),\r\n-                      child: Row(\r\n-                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                        children: [\r\n-                          Text(entry.key),\r\n-                          Text(\r\n-                            entry.value.toStringAsFixed(2),\r\n-                            style: Theme.of(context).textTheme.bodyLarge,\r\n-                          ),\r\n-                        ],\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                  if (component.errorMessages.isNotEmpty) ...[\r\n-                    const SizedBox(height: 16),\r\n-                    const Text(\r\n-                      'Errors:',\r\n-                      style: TextStyle(color: Colors.red),\r\n-                    ),\r\n-                    ...component.errorMessages.map(\r\n-                      (error) => Text(\r\n-                        'â€¢ $error',\r\n-                        style: const TextStyle(color: Colors.red),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ],\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734456952604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import 'package:experiment_planner/features/components/bloc/component_event.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n import 'package:experiment_planner/features/components/bloc/component_state.dart';\r\n-import 'package:experiment_planner/features/components/repository/component_repository.dart';\r\n+import 'package:experiment_planner/features/components/repository/user_component_state_repository.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../models/system_component.dart';\r\n \r\n"
                },
                {
                    "date": 1734460166335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n import 'package:experiment_planner/features/components/repository/user_component_state_repository.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../models/system_component.dart';\r\n+import '../repository/user_component_state_repository.dart';\r\n+import '../repository/global_component_repository.dart';\r\n \r\n class ComponentDashboard extends StatelessWidget {\r\n   const ComponentDashboard({Key? key}) : super(key: key);\r\n \r\n@@ -28,9 +30,9 @@\n         return ListView.builder(\r\n           itemCount: components.length,\r\n           itemBuilder: (context, index) {\r\n             final component = components[index];\r\n-            return ComponentCard(component: component);\r\n+            return ComponentCard(component: component, userId: 'userId'); // Provide the userId here\r\n           },\r\n         );\r\n       },\r\n     );\r\n@@ -38,19 +40,22 @@\n }\r\n \r\n class ComponentCard extends StatelessWidget {\r\n   final SystemComponent component;\r\n+  final String userId;\r\n \r\n   const ComponentCard({\r\n     Key? key,\r\n     required this.component,\r\n+    required this.userId,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return BlocProvider(\r\n       create: (context) => ComponentBloc(\r\n-        context.read<ComponentRepository>(),\r\n+        context.read<UserComponentStateRepository>(),\r\n+        userId: userId,\r\n       )..add(ComponentInitialized(component.name)),\r\n       child: BlocBuilder<ComponentBloc, ComponentState>(\r\n         builder: (context, state) {\r\n           if (state.isLoading) {\r\n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:experiment_planner/blocs/component/bloc/component_list_state.dart';\r\nimport 'package:experiment_planner/blocs/component/repository/component_repository.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_list_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_event.dart';\r\nimport '../../../blocs/component/bloc/component_state.dart';\r\nimport '../models/system_component.dart';\r\n\r\nclass ComponentDashboard extends StatelessWidget {\r\n  const ComponentDashboard({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n      builder: (context, listState) {\r\n        if (listState.isLoading) {\r\n          return const Center(child: CircularProgressIndicator());\r\n        }\r\n\r\n        if (listState.error != null) {\r\n          return Center(child: Text('Error: ${listState.error}'));\r\n        }\r\n\r\n        final components = listState.components.values.toList();\r\n\r\n        return ListView.builder(\r\n          itemCount: components.length,\r\n          itemBuilder: (context, index) {\r\n            final component = components[index];\r\n            return ComponentCard(component: component);\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass ComponentCard extends StatelessWidget {\r\n  final SystemComponent component;\r\n\r\n  const ComponentCard({\r\n    Key? key,\r\n    required this.component,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocProvider(\r\n      create: (context) => ComponentBloc(\r\n        context.read<ComponentRepository>(),\r\n      )..add(ComponentInitialized(component.name)),\r\n      child: BlocBuilder<ComponentBloc, ComponentState>(\r\n        builder: (context, state) {\r\n          if (state.isLoading) {\r\n            return const Card(\r\n              child: Center(child: CircularProgressIndicator()),\r\n            );\r\n          }\r\n\r\n          final component = state.component;\r\n          if (component == null) return const SizedBox();\r\n\r\n          return Card(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16.0),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Row(\r\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                    children: [\r\n                      Text(\r\n                        component.name,\r\n                        style: Theme.of(context).textTheme.titleLarge,\r\n                      ),\r\n                      Switch(\r\n                        value: component.isActivated,\r\n                        onChanged: (value) {\r\n                          context.read<ComponentBloc>().add(\r\n                            ComponentActivationToggled(\r\n                              component.name,\r\n                              value,\r\n                            ),\r\n                          );\r\n                        },\r\n                      ),\r\n                    ],\r\n                  ),\r\n                  const SizedBox(height: 8),\r\n                  Text(component.description),\r\n                  const SizedBox(height: 16),\r\n                  ...component.currentValues.entries.map(\r\n                    (entry) => Padding(\r\n                      padding: const EdgeInsets.only(bottom: 8.0),\r\n                      child: Row(\r\n                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                        children: [\r\n                          Text(entry.key),\r\n                          Text(\r\n                            entry.value.toStringAsFixed(2),\r\n                            style: Theme.of(context).textTheme.bodyLarge,\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                  if (component.errorMessages.isNotEmpty) ...[\r\n                    const SizedBox(height: 16),\r\n                    const Text(\r\n                      'Errors:',\r\n                      style: TextStyle(color: Colors.red),\r\n                    ),\r\n                    ...component.errorMessages.map(\r\n                      (error) => Text(\r\n                        'â€¢ $error',\r\n                        style: const TextStyle(color: Colors.red),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ],\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}