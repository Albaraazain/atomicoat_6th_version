{
    "sourceFile": "lib/features/components/widgets/component_control_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734433769470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,8 @@\n import 'dart:math';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n-import '../../../blocs/component/bloc/component_list_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_list_state.dart';\r\n-import '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\n-import '../../../blocs/recipe/bloc/recipe_state.dart';\r\n import '../../recipes/models/recipe.dart';\r\n import '../models/system_component.dart';\r\n import 'component_control_dialog.dart';\r\n \r\n"
                },
                {
                    "date": 1734433791923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n \r\n \r\n import 'dart:convert';\r\n import 'dart:math';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_bloc.dart';\r\n+import 'package:experiment_planner/features/recipes/bloc/recipe_state.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import '../../recipes/models/recipe.dart';\r\n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'dart:convert';\r\nimport 'dart:math';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../../../blocs/component/bloc/component_list_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_list_state.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_state.dart';\r\nimport '../../recipes/models/recipe.dart';\r\nimport '../models/system_component.dart';\r\nimport 'component_control_dialog.dart';\r\n\r\nclass ComponentControlOverlay extends StatefulWidget {\r\n  final String overlayId;\r\n\r\n  ComponentControlOverlay({required this.overlayId});\r\n\r\n  @override\r\n  _ComponentControlOverlayState createState() => _ComponentControlOverlayState();\r\n}\r\n\r\nclass _ComponentControlOverlayState extends State<ComponentControlOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size? _overlaySize;\r\n  final GlobalKey _overlayKey = GlobalKey();\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _updateOverlaySize();\r\n    });\r\n  }\r\n\r\n  void _updateOverlaySize() {\r\n    final RenderBox? renderBox = _overlayKey.currentContext?.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _overlaySize = renderBox.size;\r\n      });\r\n      if (_componentPositions.isEmpty) {\r\n        _resetPositions();\r\n      }\r\n    }\r\n  }\r\n\r\n  void _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = prefs.getString('component_positions_${widget.overlayId}');\r\n    if (positionsJson != null) {\r\n      setState(() {\r\n        _componentPositions = Map.fromEntries(\r\n          (json.decode(positionsJson) as Map<String, dynamic>).entries.map(\r\n                (entry) => MapEntry(\r\n              entry.key,\r\n              Offset(entry.value['dx'], entry.value['dy']),\r\n            ),\r\n          ),\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  void _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = json.encode(\r\n      _componentPositions.map(\r\n        (key, value) => MapEntry(key, {'dx': value.dx, 'dy': value.dy}),\r\n      ),\r\n    );\r\n    await prefs.setString('component_positions_${widget.overlayId}', positionsJson);\r\n  }\r\n\r\n  void _resetPositions() {\r\n    if (_overlaySize == null) return;\r\n    setState(() {\r\n      _componentPositions = {\r\n        'Nitrogen Generator': Offset(_overlaySize!.width * 0.2, _overlaySize!.height * 0.5),\r\n        'MFC': Offset(_overlaySize!.width * 0.35, _overlaySize!.height * 0.5),\r\n        'Valve 1': Offset(_overlaySize!.width * 0.5, _overlaySize!.height * 0.3),\r\n        'Valve 2': Offset(_overlaySize!.width * 0.5, _overlaySize!.height * 0.7),\r\n        'Reaction Chamber': Offset(_overlaySize!.width * 0.65, _overlaySize!.height * 0.5),\r\n        'Pressure Control System': Offset(_overlaySize!.width * 0.8, _overlaySize!.height * 0.3),\r\n        'Vacuum Pump': Offset(_overlaySize!.width * 0.8, _overlaySize!.height * 0.7),\r\n        'Precursor Heater 1': Offset(_overlaySize!.width * 0.25, _overlaySize!.height * 0.3),\r\n        'Precursor Heater 2': Offset(_overlaySize!.width * 0.25, _overlaySize!.height * 0.7),\r\n        'Frontline Heater': Offset(_overlaySize!.width * 0.75, _overlaySize!.height * 0.3),\r\n        'Backline Heater': Offset(_overlaySize!.width * 0.75, _overlaySize!.height * 0.7),\r\n      };\r\n    });\r\n    _saveComponentPositions();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<ComponentListBloc, ComponentListState>(\r\n      builder: (context, componentListState) {\r\n        return BlocBuilder<RecipeBloc, RecipeState>(\r\n          builder: (context, recipeState) {\r\n            return Container(\r\n              key: _overlayKey,\r\n              child: Stack(\r\n                children: [\r\n                  ...componentListState.components.entries.map((entry) {\r\n                    final componentName = entry.key;\r\n                    final component = entry.value;\r\n                    return _buildDraggableComponent(\r\n                      componentName,\r\n                      component,\r\n                      recipeState,\r\n                    );\r\n                  }).toList(),\r\n                  Positioned(\r\n                    right: 16,\r\n                    bottom: 16,\r\n                    child: FloatingActionButton(\r\n                      mini: true,\r\n                      child: Icon(Icons.refresh, size: 20),\r\n                      onPressed: _resetPositions,\r\n                      tooltip: 'Reset component positions',\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildDraggableComponent(\r\n    String componentName,\r\n    SystemComponent component,\r\n    RecipeState recipeState,\r\n  ) {\r\n    final position = _componentPositions[componentName] ?? Offset.zero;\r\n    return Positioned(\r\n      left: position.dx,\r\n      top: position.dy,\r\n      child: Draggable(\r\n        feedback: _buildComponentIndicator(component, recipeState),\r\n        childWhenDragging: Container(),\r\n        onDragEnd: (details) {\r\n          final RenderBox? renderBox = _overlayKey.currentContext?.findRenderObject() as RenderBox?;\r\n          if (renderBox != null) {\r\n            final localPosition = renderBox.globalToLocal(details.offset);\r\n            setState(() {\r\n              _componentPositions[componentName] = localPosition;\r\n            });\r\n            _saveComponentPositions();\r\n          }\r\n        },\r\n        child: GestureDetector(\r\n          onTap: () => _showComponentControlDialog(context, component, recipeState),\r\n          child: _buildComponentIndicator(component, recipeState),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildComponentIndicator(\r\n    SystemComponent component,\r\n    RecipeState recipeState,\r\n  ) {\r\n    final isActiveInCurrentStep = _isComponentActiveInCurrentStep(component, recipeState);\r\n    final color = component.isActivated\r\n        ? (isActiveInCurrentStep ? Colors.green : Colors.blue)\r\n        : Colors.red;\r\n\r\n    double indicatorSize = _overlaySize != null ? _overlaySize!.width * 0.06 : 30.0;\r\n    indicatorSize = indicatorSize.clamp(20.0, 40.0);\r\n\r\n    return Container(\r\n      width: indicatorSize,\r\n      height: indicatorSize,\r\n      decoration: BoxDecoration(\r\n        shape: BoxShape.circle,\r\n        color: color.withOpacity(0.2),\r\n        border: Border.all(color: color, width: 1),\r\n      ),\r\n      child: Center(\r\n        child: Text(\r\n          _getComponentAbbreviation(component.name),\r\n          textAlign: TextAlign.center,\r\n          style: TextStyle(\r\n            color: Colors.white,\r\n            fontSize: indicatorSize * 0.3,\r\n            fontWeight: FontWeight.bold,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  String _getComponentAbbreviation(String componentName) {\r\n    final words = componentName.split(' ');\r\n    if (words.length > 1) {\r\n      return words.map((word) => word[0]).join('').toUpperCase();\r\n    } else {\r\n      return componentName.substring(0, min(2, componentName.length)).toUpperCase();\r\n    }\r\n  }\r\n\r\n  bool _isComponentActiveInCurrentStep(\r\n    SystemComponent component,\r\n    RecipeState recipeState,\r\n  ) {\r\n    if (recipeState.activeRecipe == null ||\r\n        recipeState.currentStepIndex >= recipeState.activeRecipe!.steps.length) {\r\n      return false;\r\n    }\r\n\r\n    final currentStep = recipeState.activeRecipe!.steps[recipeState.currentStepIndex];\r\n    switch (currentStep.type) {\r\n      case StepType.valve:\r\n        final valveType = currentStep.parameters['valveType'] as ValveType;\r\n        return (valveType == ValveType.valveA && component.name == 'Valve 1') ||\r\n            (valveType == ValveType.valveB && component.name == 'Valve 2');\r\n      case StepType.purge:\r\n        return component.name == 'MFC' || component.name == 'Nitrogen Generator';\r\n      case StepType.setParameter:\r\n        return component.name == currentStep.parameters['component'];\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  void _showComponentControlDialog(\r\n    BuildContext context,\r\n    SystemComponent component,\r\n    RecipeState recipeState,\r\n  ) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => ComponentControlDialog(\r\n        component: component,\r\n        isActiveInCurrentStep: _isComponentActiveInCurrentStep(component, recipeState),\r\n        currentRecipeStep: recipeState.activeRecipe?.steps[recipeState.currentStepIndex],\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}