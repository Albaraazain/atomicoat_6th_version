{
    "sourceFile": "lib/features/components/bloc/component_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734457070691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import '../models/system_component.dart';\r\n-import '../repository/component_repository.dart';\r\n+import '../repository/user_component_state_repository.dart';\r\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n class ComponentBloc extends Bloc<ComponentEvent, ComponentState> {\r\n"
                },
                {
                    "date": 1734458908006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-\r\n-\r\n import 'dart:async';\r\n import 'package:bloc/bloc.dart';\r\n import '../models/system_component.dart';\r\n import '../repository/user_component_state_repository.dart';\r\n@@ -8,11 +6,12 @@\n import 'component_state.dart';\r\n \r\n class ComponentBloc extends Bloc<ComponentEvent, ComponentState> {\r\n   final ComponentRepository _repository;\r\n+  final String userId;\r\n   StreamSubscription<SystemComponent?>? _componentSubscription;\r\n \r\n-  ComponentBloc(this._repository) : super(ComponentState.initial()) {\r\n+  ComponentBloc(this._repository, {required this.userId}) : super(ComponentState.initial()) {\r\n     on<ComponentInitialized>(_onComponentInitialized);\r\n     on<ComponentValueUpdated>(_onComponentValueUpdated);\r\n     on<ComponentSetValueUpdated>(_onComponentSetValueUpdated);\r\n     on<ComponentActivationToggled>(_onComponentActivationToggled);\r\n@@ -65,9 +64,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.updateCurrentValues(event.currentValues);\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -81,9 +83,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.updateSetValues(event.setValues);\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -97,9 +102,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.isActivated = event.isActivated;\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -113,9 +121,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.addErrorMessage(event.errorMessage);\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -129,9 +140,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.clearErrorMessages();\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -145,9 +159,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.status = event.status;\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -161,9 +178,12 @@\n \r\n     try {\r\n       final updatedComponent = state.component!;\r\n       updatedComponent.updateLastCheckDate(event.checkDate);\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n@@ -182,9 +202,12 @@\n       }\r\n       if (event.maxValues != null) {\r\n         updatedComponent.updateMaxValues(event.maxValues!);\r\n       }\r\n-      await _repository.saveComponentState(updatedComponent);\r\n+      await _repository.saveComponentState(\r\n+        updatedComponent,\r\n+        userId: userId,\r\n+      );\r\n       emit(ComponentState.loaded(updatedComponent));\r\n     } catch (e) {\r\n       emit(state.copyWith(error: e.toString()));\r\n     }\r\n"
                },
                {
                    "date": 1734459179088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import 'component_event.dart';\r\n import 'component_state.dart';\r\n \r\n class ComponentBloc extends Bloc<ComponentEvent, ComponentState> {\r\n-  final ComponentRepository _repository;\r\n+  final UserComponentStateRepository _repository;\r\n   final String userId;\r\n   StreamSubscription<SystemComponent?>? _componentSubscription;\r\n \r\n   ComponentBloc(this._repository, {required this.userId}) : super(ComponentState.initial()) {\r\n@@ -28,16 +28,16 @@\n   ) async {\r\n     emit(ComponentState.loading());\r\n \r\n     try {\r\n-      final component = await _repository.getComponent(event.componentName);\r\n+      final component = await _repository.get(event.componentName, userId: userId);\r\n       if (component != null) {\r\n         emit(ComponentState.loaded(component));\r\n \r\n         // Start watching for changes\r\n         await _componentSubscription?.cancel();\r\n         _componentSubscription = _repository\r\n-            .watchComponent(event.componentName)\r\n+            .watch(event.componentName, userId: userId)\r\n             .listen(\r\n               (component) {\r\n                 if (!emit.isDone) {\r\n                   if (component != null) {\r\n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../models/system_component.dart';\r\nimport '../repository/component_repository.dart';\r\nimport 'component_event.dart';\r\nimport 'component_state.dart';\r\n\r\nclass ComponentBloc extends Bloc<ComponentEvent, ComponentState> {\r\n  final ComponentRepository _repository;\r\n  StreamSubscription<SystemComponent?>? _componentSubscription;\r\n\r\n  ComponentBloc(this._repository) : super(ComponentState.initial()) {\r\n    on<ComponentInitialized>(_onComponentInitialized);\r\n    on<ComponentValueUpdated>(_onComponentValueUpdated);\r\n    on<ComponentSetValueUpdated>(_onComponentSetValueUpdated);\r\n    on<ComponentActivationToggled>(_onComponentActivationToggled);\r\n    on<ComponentErrorAdded>(_onComponentErrorAdded);\r\n    on<ComponentErrorsCleared>(_onComponentErrorsCleared);\r\n    on<ComponentStatusUpdated>(_onComponentStatusUpdated);\r\n    on<ComponentCheckDateUpdated>(_onComponentCheckDateUpdated);\r\n    on<ComponentLimitsUpdated>(_onComponentLimitsUpdated);\r\n  }\r\n\r\n  Future<void> _onComponentInitialized(\r\n    ComponentInitialized event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    emit(ComponentState.loading());\r\n\r\n    try {\r\n      final component = await _repository.getComponent(event.componentName);\r\n      if (component != null) {\r\n        emit(ComponentState.loaded(component));\r\n\r\n        // Start watching for changes\r\n        await _componentSubscription?.cancel();\r\n        _componentSubscription = _repository\r\n            .watchComponent(event.componentName)\r\n            .listen(\r\n              (component) {\r\n                if (!emit.isDone) {\r\n                  if (component != null) {\r\n                    emit(ComponentState.loaded(component));\r\n                  } else {\r\n                    emit(ComponentState.error('Component not found'));\r\n                  }\r\n                }\r\n              },\r\n            );\r\n      } else {\r\n        emit(ComponentState.error('Component not found'));\r\n      }\r\n    } catch (e) {\r\n      emit(ComponentState.error(e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentValueUpdated(\r\n    ComponentValueUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateCurrentValues(event.currentValues);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentSetValueUpdated(\r\n    ComponentSetValueUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateSetValues(event.setValues);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentActivationToggled(\r\n    ComponentActivationToggled event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.isActivated = event.isActivated;\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentErrorAdded(\r\n    ComponentErrorAdded event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.addErrorMessage(event.errorMessage);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentErrorsCleared(\r\n    ComponentErrorsCleared event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.clearErrorMessages();\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentStatusUpdated(\r\n    ComponentStatusUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.status = event.status;\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentCheckDateUpdated(\r\n    ComponentCheckDateUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      updatedComponent.updateLastCheckDate(event.checkDate);\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onComponentLimitsUpdated(\r\n    ComponentLimitsUpdated event,\r\n    Emitter<ComponentState> emit,\r\n  ) async {\r\n    if (state.component == null) return;\r\n\r\n    try {\r\n      final updatedComponent = state.component!;\r\n      if (event.minValues != null) {\r\n        updatedComponent.updateMinValues(event.minValues!);\r\n      }\r\n      if (event.maxValues != null) {\r\n        updatedComponent.updateMaxValues(event.maxValues!);\r\n      }\r\n      await _repository.saveComponentState(updatedComponent);\r\n      emit(ComponentState.loaded(updatedComponent));\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _componentSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n}"
        }
    ]
}