{
    "sourceFile": "lib/features/components/bloc/component_list_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'dart:async';\r\nimport 'package:bloc/bloc.dart';\r\nimport '../models/system_component.dart';\r\nimport '../repository/component_repository.dart';\r\nimport 'component_list_event.dart';\r\nimport 'component_list_state.dart';\r\n\r\nclass ComponentListBloc extends Bloc<ComponentListEvent, ComponentListState> {\r\n  final ComponentRepository _repository;\r\n  StreamSubscription? _componentsSubscription;\r\n\r\n  ComponentListBloc(this._repository) : super(const ComponentListState()) {\r\n    on<LoadComponents>(_onLoadComponents);\r\n    on<UpdateComponent>(_onUpdateComponent);\r\n    on<AddComponent>(_onAddComponent);\r\n    on<UpdateAllComponents>(_onUpdateAllComponents);\r\n    on<ComponentError>(_onComponentError);\r\n  }\r\n\r\n  Future<void> _setupComponentsSubscription() async {\r\n    await _componentsSubscription?.cancel();\r\n    _componentsSubscription = _repository.watchAllComponents().listen(\r\n      (components) {\r\n        final componentsMap = {\r\n          for (var component in components) component.name: component\r\n        };\r\n        add(UpdateAllComponents(componentsMap));\r\n      },\r\n      onError: (error) {\r\n        add(ComponentError(error.toString()));\r\n      },\r\n    );\r\n  }\r\n\r\n  Future<void> _onLoadComponents(\r\n    LoadComponents event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      print(\"ComponentListBloc: Processing event $event\");\r\n\r\n      emit(state.copyWith(isLoading: true));\r\n\r\n      // Load initial components\r\n      final components = await _repository.getAllComponents();\r\n      final componentsMap = {\r\n        for (var component in components) component.name: component\r\n      };\r\n\r\n      emit(state.copyWith(\r\n        components: componentsMap,\r\n        isLoading: false,\r\n      ));\r\n\r\n      // Setup real-time updates\r\n      await _setupComponentsSubscription();\r\n    } catch (e) {\r\n      emit(state.copyWith(\r\n        error: e.toString(),\r\n        isLoading: false,\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onUpdateComponent(\r\n    UpdateComponent event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      print(\"ComponentListBloc: Processing event $event\");\r\n\r\n      // Update local state\r\n      final updatedComponents =\r\n          Map<String, SystemComponent>.from(state.components);\r\n      updatedComponents[event.component.name] = event.component;\r\n\r\n      emit(state.copyWith(components: updatedComponents));\r\n\r\n      // Persist to repository\r\n      await _repository.saveComponentState(event.component);\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  Future<void> _onAddComponent(\r\n    AddComponent event,\r\n    Emitter<ComponentListState> emit,\r\n  ) async {\r\n    try {\r\n      print(\"ComponentListBloc: Processing event $event\");\r\n\r\n      // Update local state\r\n      final updatedComponents =\r\n          Map<String, SystemComponent>.from(state.components);\r\n      updatedComponents[event.component.name] = event.component;\r\n\r\n      emit(state.copyWith(components: updatedComponents));\r\n\r\n      // Persist to repository\r\n      await _repository.saveComponentState(event.component);\r\n    } catch (e) {\r\n      emit(state.copyWith(error: e.toString()));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> close() {\r\n    _componentsSubscription?.cancel();\r\n    return super.close();\r\n  }\r\n\r\n  void _onUpdateAllComponents(\r\n    UpdateAllComponents event,\r\n    Emitter<ComponentListState> emit,\r\n  ) {\r\n    emit(state.copyWith(components: event.components));\r\n  }\r\n\r\n  void _onComponentError(\r\n    ComponentError event,\r\n    Emitter<ComponentListState> emit,\r\n  ) {\r\n    emit(state.copyWith(error: event.error));\r\n  }\r\n\r\n  // Helper methods\r\n  SystemComponent? getComponent(String name) => state.components[name];\r\n\r\n  List<SystemComponent> getAllComponents() => state.components.values.toList();\r\n\r\n  List<SystemComponent> getActiveComponents() =>\r\n      state.components.values.where((c) => c.isActivated).toList();\r\n}\r\n"
        }
    ]
}