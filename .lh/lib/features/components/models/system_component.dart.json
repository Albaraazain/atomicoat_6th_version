{
    "sourceFile": "lib/features/components/models/system_component.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760287,
            "name": "Commit-0",
            "content": "\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'data_point.dart';\r\n\r\nenum ComponentStatus { normal, warning, error, ok }\r\n\r\nclass SystemComponent {\r\n  final String name;\r\n  final String description;\r\n  ComponentStatus status;\r\n  final Map<String, double> currentValues;\r\n  final Map<String, double> setValues;\r\n  final List<String> errorMessages;\r\n  final Map<String, CircularBuffer<DataPoint>> parameterHistory;\r\n  bool isActivated;\r\n  DateTime? lastCheckDate;\r\n  final Map<String, double> minValues;\r\n  final Map<String, double> maxValues;\r\n\r\n  static const int MAX_HISTORY_SIZE = 100;\r\n\r\n  SystemComponent({\r\n    required this.name,\r\n    required this.description,\r\n    this.status = ComponentStatus.normal,\r\n    required Map<String, double> currentValues,\r\n    required Map<String, double> setValues,\r\n    List<String>? errorMessages,\r\n    this.isActivated = false,\r\n    this.lastCheckDate,\r\n    Map<String, double>? minValues,\r\n    Map<String, double>? maxValues,\r\n  })  : currentValues = Map.from(currentValues),\r\n        setValues = Map.from(setValues),\r\n        errorMessages = errorMessages ?? [],\r\n        minValues = minValues ?? {},\r\n        maxValues = maxValues ?? {},\r\n        parameterHistory = Map.fromEntries(\r\n          currentValues.keys.map(\r\n                (key) => MapEntry(key, CircularBuffer<DataPoint>(MAX_HISTORY_SIZE)),\r\n          ),\r\n        );\r\n\r\n  void updateCurrentValues(Map<String, double> values) {\r\n    currentValues.addAll(values);\r\n    values.forEach((parameter, value) {\r\n      parameterHistory[parameter]?.add(\r\n        DataPoint.reducedPrecision(\r\n          timestamp: DateTime.now(),\r\n          value: value,\r\n        ),\r\n      );\r\n    });\r\n  }\r\n\r\n  void updateSetValues(Map<String, double> values) {\r\n    setValues.addAll(values);\r\n  }\r\n\r\n  void addErrorMessage(String message) {\r\n    errorMessages.add(message);\r\n  }\r\n\r\n  void clearErrorMessages() {\r\n    errorMessages.clear();\r\n  }\r\n\r\n  void updateLastCheckDate(DateTime date) {\r\n    lastCheckDate = date;\r\n  }\r\n\r\n  void updateMinValues(Map<String, double> newMinValues) {\r\n    minValues.addAll(newMinValues);\r\n  }\r\n\r\n  void updateMaxValues(Map<String, double> newMaxValues) {\r\n    maxValues.addAll(newMaxValues);\r\n  }\r\n\r\n  factory SystemComponent.fromJson(Map<String, dynamic> json) {\r\n    final component = SystemComponent(\r\n      name: json['name'] as String,\r\n      description: json['description'] as String,\r\n      status: ComponentStatus.values.firstWhere(\r\n            (e) => e.toString() == 'ComponentStatus.${json['status']}',\r\n      ),\r\n      currentValues: Map<String, double>.from(json['currentValues']),\r\n      setValues: Map<String, double>.from(json['setValues']),\r\n      errorMessages: List<String>.from(json['errorMessages']),\r\n      isActivated: json['isActivated'] as bool,\r\n      lastCheckDate: json['lastCheckDate'] != null\r\n          ? (json['lastCheckDate'] as Timestamp).toDate()\r\n          : null,\r\n      minValues: json['minValues'] != null\r\n          ? Map<String, double>.from(json['minValues'])\r\n          : null,\r\n      maxValues: json['maxValues'] != null\r\n          ? Map<String, double>.from(json['maxValues'])\r\n          : null,\r\n    );\r\n\r\n    if (json['parameterHistory'] != null) {\r\n      (json['parameterHistory'] as Map<String, dynamic>).forEach((key, value) {\r\n        final buffer = component.parameterHistory[key];\r\n        if (buffer != null) {\r\n          final dataPoints = (value as List)\r\n              .map((dp) => DataPoint.fromJson(dp as Map<String, dynamic>))\r\n              .take(MAX_HISTORY_SIZE)\r\n              .toList();\r\n          buffer.addAll(dataPoints);\r\n        }\r\n      });\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  void _loadParameterHistory(Map<String, dynamic>? historyJson) {\r\n    if (historyJson == null) return;\r\n    historyJson.forEach((key, value) {\r\n      final buffer = parameterHistory[key];\r\n      if (buffer != null) {\r\n        final dataPoints = (value as List)\r\n            .map((dp) => DataPoint.fromJson(dp))\r\n            .take(MAX_HISTORY_SIZE)\r\n            .toList();\r\n        buffer.addAll(dataPoints);\r\n      }\r\n    });\r\n  }\r\n\r\n  Map<String, dynamic> toJson() => {\r\n    'name': name,\r\n    'description': description,\r\n    'status': status.toString().split('.').last,\r\n    'currentValues': currentValues,\r\n    'setValues': setValues,\r\n    'errorMessages': errorMessages,\r\n    'isActivated': isActivated,\r\n    'lastCheckDate':\r\n    lastCheckDate != null ? Timestamp.fromDate(lastCheckDate!) : null,\r\n    'minValues': minValues,\r\n    'maxValues': maxValues,\r\n    'parameterHistory': parameterHistory.map(\r\n          (key, value) => MapEntry(\r\n        key,\r\n        value.toList().map((dp) => dp.toJson()).toList(),\r\n      ),\r\n    ),\r\n  };\r\n\r\n  String get type => name;\r\n  DateTime get lastMaintenanceDate => lastCheckDate!;\r\n  String get id => name;\r\n\r\n  SystemComponent copyWith({\r\n    String? name,\r\n    String? description,\r\n    ComponentStatus? status,\r\n    Map<String, double>? currentValues,\r\n    Map<String, double>? setValues,\r\n    List<String>? errorMessages,\r\n    bool? isActivated,\r\n    DateTime? lastCheckDate,\r\n    Map<String, double>? minValues,\r\n    Map<String, double>? maxValues,\r\n  }) {\r\n    return SystemComponent(\r\n      name: name ?? this.name,\r\n      description: description ?? this.description,\r\n      status: status ?? this.status,\r\n      currentValues: currentValues ?? this.currentValues,\r\n      setValues: setValues ?? this.setValues,\r\n      errorMessages: errorMessages ?? this.errorMessages,\r\n      isActivated: isActivated ?? this.isActivated,\r\n      lastCheckDate: lastCheckDate ?? this.lastCheckDate,\r\n      minValues: minValues ?? this.minValues,\r\n      maxValues: maxValues ?? this.maxValues,\r\n    );\r\n  }\r\n}\r\n\r\nclass CircularBuffer<T> {\r\n  final int capacity;\r\n  final List<T?> _buffer;\r\n  int _start = 0;\r\n  int _length = 0;\r\n\r\n  CircularBuffer(this.capacity) : _buffer = List<T?>.filled(capacity, null);\r\n\r\n  void add(T item) {\r\n    if (_length < capacity) {\r\n      _buffer[_length++] = item;\r\n    } else {\r\n      _buffer[_start] = item;\r\n      _start = (_start + 1) % capacity;\r\n    }\r\n  }\r\n\r\n  void addAll(Iterable<T> items) {\r\n    for (var item in items) {\r\n      add(item);\r\n    }\r\n  }\r\n\r\n  List<T> toList() {\r\n    if (_length < capacity) {\r\n      return _buffer.sublist(0, _length).cast<T>();\r\n    } else {\r\n      return [\r\n        ..._buffer.sublist(_start).cast<T>(),\r\n        ..._buffer.sublist(0, _start).cast<T>(),\r\n      ];\r\n    }\r\n  }\r\n\r\n  // Add these new methods and properties\r\n  bool get isEmpty => _length == 0;\r\n  bool get isNotEmpty => _length > 0;\r\n  int get length => _length;\r\n\r\n  T? operator [](int index) {\r\n    if (index < 0 || index >= _length) return null;\r\n    return _buffer[(_start + index) % capacity];\r\n  }\r\n\r\n  void removeAt(int index) {\r\n    if (index < 0 || index >= _length) return;\r\n    final actualIndex = (_start + index) % capacity;\r\n    for (int i = actualIndex; i < _length - 1; i++) {\r\n      _buffer[i % capacity] = _buffer[(i + 1) % capacity];\r\n    }\r\n    _length--;\r\n  }\r\n\r\n  T? get first => isEmpty ? null : _buffer[_start];\r\n  T? get last => isEmpty ? null : _buffer[(_start + _length - 1) % capacity];\r\n\r\n  Map<int, T> asMap() {\r\n    return Map.fromEntries(\r\n      Iterable.generate(_length, (index) => MapEntry(index, this[index]!)),\r\n    );\r\n  }\r\n\r\n  Iterable<R> map<R>(R Function(T) toElement) {\r\n    return Iterable.generate(_length, (index) => toElement(this[index]!));\r\n  }\r\n}"
        }
    ]
}