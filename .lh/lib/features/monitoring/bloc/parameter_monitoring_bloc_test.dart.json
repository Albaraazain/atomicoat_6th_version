{
    "sourceFile": "lib/features/monitoring/bloc/parameter_monitoring_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434345249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n \r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n-import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n import 'package:experiment_planner/features/safety/models/safety_error.dart';\r\n import 'parameter_monitoring_bloc.dart';\r\n import 'parameter_monitoring_event.dart';\r\n import 'parameter_monitoring_state.dart';\r\n"
                },
                {
                    "date": 1734434461356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:experiment_planner/features/safety/bloc/safety_bloc.dart';\r\n+import 'package:experiment_planner/features/safety/bloc/safety_event.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n import 'package:experiment_planner/features/safety/models/safety_error.dart';\r\n import 'parameter_monitoring_bloc.dart';\r\n"
                }
            ],
            "date": 1734376760333,
            "name": "Commit-0",
            "content": "\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\nimport 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\nimport 'package:experiment_planner/features/safety/models/safety_error.dart';\r\nimport 'parameter_monitoring_bloc.dart';\r\nimport 'parameter_monitoring_event.dart';\r\nimport 'parameter_monitoring_state.dart';\r\n\r\nclass MockSafetyBloc extends Mock implements SafetyBloc {}\r\n\r\nvoid main() {\r\n  late ParameterMonitoringBloc monitoringBloc;\r\n  late MockSafetyBloc safetyBloc;\r\n\r\n  setUpAll(() {\r\n    registerFallbackValue(SafetyError(\r\n      id: 'dummy',\r\n      description: 'dummy',\r\n      severity: SafetyErrorSeverity.warning,\r\n    ));\r\n    registerFallbackValue(SafetyErrorDetected(\r\n      SafetyError(\r\n        id: 'dummy',\r\n        description: 'dummy',\r\n        severity: SafetyErrorSeverity.warning,\r\n      ),\r\n    ));\r\n  });\r\n\r\n  setUp(() {\r\n    safetyBloc = MockSafetyBloc();\r\n    when(() => safetyBloc.add(any())).thenAnswer((_) async {});\r\n    monitoringBloc = ParameterMonitoringBloc(safetyBloc: safetyBloc);\r\n  });\r\n\r\n  tearDown(() {\r\n    monitoringBloc.close();\r\n  });\r\n\r\n  group('ParameterMonitoringBloc', () {\r\n    final testThresholds = {\r\n      'temperature': {'min': 20.0, 'max': 30.0},\r\n      'pressure': {'min': 1.0, 'max': 2.0},\r\n    };\r\n\r\n    test('initial state is correct', () {\r\n      final state = monitoringBloc.state;\r\n      expect(state.isLoading, false);\r\n      expect(state.error, null);\r\n      expect(state.monitoringStatus, isEmpty);\r\n      expect(state.currentValues, isEmpty);\r\n      expect(state.thresholds, isEmpty);\r\n      expect(state.violations, isEmpty);\r\n    });\r\n\r\n    blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n      'starts monitoring with thresholds',\r\n      build: () => monitoringBloc,\r\n      act: (bloc) => bloc.add(StartParameterMonitoring(\r\n        componentId: 'test-component',\r\n        thresholds: testThresholds,\r\n      )),\r\n      expect: () => [\r\n        isA<ParameterMonitoringState>()\r\n          .having((s) => s.monitoringStatus['test-component'], 'monitoring active', true)\r\n          .having((s) => s.thresholds['test-component'], 'thresholds set', testThresholds),\r\n      ],\r\n    );\r\n\r\n    blocTest<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n      'detects threshold violations',\r\n      build: () => monitoringBloc,\r\n      seed: () => ParameterMonitoringState(\r\n        isLoading: false,\r\n        error: null,\r\n        lastUpdated: DateTime.now(),\r\n        monitoringStatus: {'test-component': true},\r\n        currentValues: const {},\r\n        thresholds: {'test-component': testThresholds},\r\n        violations: const {},\r\n      ),\r\n      wait: const Duration(milliseconds: 100),\r\n      act: (bloc) => bloc.add(ParameterValueUpdated(\r\n        componentId: 'test-component',\r\n        parameterName: 'temperature',\r\n        value: 35.0, // Above max threshold\r\n      )),\r\n      expect: () => [\r\n        isA<ParameterMonitoringState>()\r\n          .having(\r\n            (s) => s.violations['test-component']?['temperature'],\r\n            'temperature violation',\r\n            true,\r\n          )\r\n          .having(\r\n            (s) => s.currentValues['test-component']?['temperature'],\r\n            'temperature value',\r\n            35.0,\r\n          ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => safetyBloc.add(any())).called(1);\r\n      },\r\n    );\r\n  });\r\n}"
        }
    ]
}