{
    "sourceFile": "lib/features/monitoring/widgets/data_visualization.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760350,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:experiment_planner/blocs/component/bloc/component_event.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport '../../components/models/system_component.dart';\r\nimport '../../../blocs/component/bloc/component_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_list_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_state.dart';\r\nimport '../../../blocs/component/bloc/component_list_state.dart';\r\n\r\nclass DataVisualization extends StatefulWidget {\r\n  @override\r\n  _DataVisualizationState createState() => _DataVisualizationState();\r\n}\r\n\r\nclass _DataVisualizationState extends State<DataVisualization> {\r\n  String _selectedParameter = 'Chamber Pressure';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        Padding(\r\n          padding: const EdgeInsets.all(16.0),\r\n          child: DropdownButton<String>(\r\n            value: _selectedParameter,\r\n            items: [\r\n              'Chamber Pressure',\r\n              'Chamber Temperature',\r\n              'MFC Flow Rate',\r\n              'Precursor Heater 1 Temperature',\r\n              'Precursor Heater 2 Temperature',\r\n            ].map((String value) {\r\n              return DropdownMenuItem<String>(\r\n                value: value,\r\n                child: Text(value),\r\n              );\r\n            }).toList(),\r\n            onChanged: (String? newValue) {\r\n              if (newValue != null) {\r\n                setState(() {\r\n                  _selectedParameter = newValue;\r\n                });\r\n                _initializeComponent(newValue);\r\n              }\r\n            },\r\n          ),\r\n        ),\r\n        Expanded(\r\n          child: Padding(\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: BlocBuilder<ComponentBloc, ComponentState>(\r\n              builder: (context, state) {\r\n                if (state.isLoading) {\r\n                  return const Center(child: CircularProgressIndicator());\r\n                }\r\n                if (state.error != null) {\r\n                  return Center(child: Text('Error: ${state.error}'));\r\n                }\r\n                if (state.component == null) {\r\n                  return const Center(child: Text('No data available'));\r\n                }\r\n                return _buildChart(state.component!);\r\n              },\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _initializeComponent(String parameter) {\r\n    final componentName = _getComponentName(parameter);\r\n    context.read<ComponentBloc>().add(ComponentInitialized(componentName));\r\n  }\r\n\r\n  Widget _buildChart(SystemComponent component) {\r\n    final parameterData = _getParameterData(component);\r\n    if (parameterData.isEmpty) {\r\n      return const Center(child: Text('No data available'));\r\n    }\r\n\r\n    return LineChart(\r\n      LineChartData(\r\n        gridData: FlGridData(show: true),\r\n        titlesData: FlTitlesData(\r\n          leftTitles: AxisTitles(\r\n            sideTitles: SideTitles(showTitles: true, reservedSize: 40),\r\n          ),\r\n          bottomTitles: AxisTitles(\r\n            sideTitles: SideTitles(showTitles: true, reservedSize: 22),\r\n          ),\r\n          rightTitles: AxisTitles(\r\n            sideTitles: SideTitles(showTitles: false),\r\n          ),\r\n          topTitles: AxisTitles(\r\n            sideTitles: SideTitles(showTitles: false),\r\n          ),\r\n        ),\r\n        borderData: FlBorderData(show: true),\r\n        lineBarsData: [\r\n          LineChartBarData(\r\n            spots: parameterData,\r\n            isCurved: true,\r\n            color: Colors.blue,\r\n            dotData: FlDotData(show: false),\r\n            belowBarData: BarAreaData(show: false),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  String _getComponentName(String parameter) {\r\n    switch (parameter) {\r\n      case 'Chamber Pressure':\r\n      case 'Chamber Temperature':\r\n        return 'Reaction Chamber';\r\n      case 'MFC Flow Rate':\r\n        return 'MFC';\r\n      case 'Precursor Heater 1 Temperature':\r\n        return 'Precursor Heater 1';\r\n      case 'Precursor Heater 2 Temperature':\r\n        return 'Precursor Heater 2';\r\n      default:\r\n        throw Exception('Unknown parameter: $parameter');\r\n    }\r\n  }\r\n\r\n  List<FlSpot> _getParameterData(SystemComponent component) {\r\n    final parameterKey = _getParameterKey();\r\n    final history = component.parameterHistory[parameterKey];\r\n    if (history == null || history.isEmpty) {\r\n      return [];\r\n    }\r\n\r\n    return history.asMap().entries.map((entry) {\r\n      return FlSpot(entry.key.toDouble(), entry.value.value);\r\n    }).toList();\r\n  }\r\n\r\n  String _getParameterKey() {\r\n    switch (_selectedParameter) {\r\n      case 'Chamber Pressure':\r\n        return 'pressure';\r\n      case 'Chamber Temperature':\r\n      case 'Precursor Heater 1 Temperature':\r\n      case 'Precursor Heater 2 Temperature':\r\n        return 'temperature';\r\n      case 'MFC Flow Rate':\r\n        return 'flow_rate';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _initializeComponent(_selectedParameter);\r\n  }\r\n}"
        }
    ]
}