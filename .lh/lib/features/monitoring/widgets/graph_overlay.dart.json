{
    "sourceFile": "lib/features/monitoring/widgets/graph_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376761143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434560387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,8 @@\n import 'package:fl_chart/fl_chart.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n-import '../../../blocs/component/bloc/component_list_bloc.dart';\r\n-import '../../../blocs/component/bloc/component_list_state.dart';\r\n import '../../components/models/system_component.dart';\r\n import '../../components/models/data_point.dart';\r\n \r\n class GraphOverlay extends StatefulWidget {\r\n"
                },
                {
                    "date": 1734434573775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,534 @@\n+\r\n+\r\n+import 'dart:convert';\r\n+import 'dart:math';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_bloc.dart';\r\n+import 'package:experiment_planner/features/components/bloc/component_list_state.dart';\r\n+import 'package:fl_chart/fl_chart.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_bloc/flutter_bloc.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import '../../components/models/system_component.dart';\r\n+import '../../components/models/data_point.dart';\r\n+\r\n+class GraphOverlay extends StatefulWidget {\r\n+  final String overlayId;\r\n+\r\n+  GraphOverlay({required this.overlayId});\r\n+\r\n+  @override\r\n+  _GraphOverlayState createState() => _GraphOverlayState();\r\n+}\r\n+\r\n+class _GraphOverlayState extends State<GraphOverlay> {\r\n+  Map<String, Offset> _componentPositions = {};\r\n+  Size _diagramSize = Size.zero;\r\n+  bool _isEditMode = false; // Tracks edit mode\r\n+\r\n+  // Define a color palette for components\r\n+  final Map<String, Color> componentColors = {\r\n+    'Nitrogen Generator': Colors.blueAccent,\r\n+    'MFC': Colors.green,\r\n+    'Backline Heater': Colors.orange,\r\n+    'Frontline Heater': Colors.purple,\r\n+    'Precursor Heater 1': Colors.teal,\r\n+    'Precursor Heater 2': Colors.indigo,\r\n+    'Reaction Chamber': Colors.redAccent,\r\n+    'Pressure Control System': Colors.cyan,\r\n+    'Vacuum Pump': Colors.amber,\r\n+    'Valve 1': Colors.brown,\r\n+    'Valve 2': Colors.pink,\r\n+  };\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    print(\"GraphOverlay: initState called for ${widget.overlayId}\");\r\n+    _loadComponentPositions();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      print(\"GraphOverlay: Post frame callback triggered\");\r\n+      _updateDiagramSize();\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  void didChangeDependencies() {\r\n+    super.didChangeDependencies();\r\n+    print(\"GraphOverlay: didChangeDependencies called\");\r\n+    if (_diagramSize == Size.zero) {\r\n+      final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n+      if (renderBox != null) {\r\n+        _diagramSize = renderBox.size;\r\n+        if (_componentPositions.isEmpty) {\r\n+          _initializeDefaultPositions();\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  void _updateDiagramSize() {\r\n+    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n+    if (renderBox != null) {\r\n+      setState(() {\r\n+        _diagramSize = renderBox.size;\r\n+      });\r\n+      print(\"GraphOverlay: Diagram size updated to $_diagramSize\");\r\n+      if (_componentPositions.isEmpty) {\r\n+        print(\"GraphOverlay: Initializing default positions\");\r\n+        _initializeDefaultPositions();\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _resetComponentPositions() async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    await prefs.remove('component_positions_graph_overlay_${widget.overlayId}');\r\n+    _initializeDefaultPositions();\r\n+    setState(() {}); // Refresh the UI\r\n+    print(\"Component positions have been reset.\");\r\n+  }\r\n+\r\n+  void _initializeDefaultPositions() {\r\n+    if (_diagramSize == Size.zero) return; // Diagram size not yet available\r\n+\r\n+    setState(() {\r\n+      _componentPositions = {\r\n+        'Nitrogen Generator': Offset(_diagramSize.width * 0.05, _diagramSize.height * 0.80),\r\n+        'MFC': Offset(_diagramSize.width * 0.20, _diagramSize.height * 0.70),\r\n+        'Backline Heater': Offset(_diagramSize.width * 0.35, _diagramSize.height * 0.60),\r\n+        'Frontline Heater': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.50),\r\n+        'Precursor Heater 1': Offset(_diagramSize.width * 0.65, _diagramSize.height * 0.40),\r\n+        'Precursor Heater 2': Offset(_diagramSize.width * 0.80, _diagramSize.height * 0.30),\r\n+        'Reaction Chamber': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.20),\r\n+        'Pressure Control System': Offset(_diagramSize.width * 0.75, _diagramSize.height * 0.75),\r\n+        'Vacuum Pump': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.85),\r\n+        'Valve 1': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.60),\r\n+        'Valve 2': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.40),\r\n+      };\r\n+    });\r\n+    print(\"Default component positions initialized.\");\r\n+    _saveComponentPositions();\r\n+  }\r\n+\r\n+  Future<void> _loadComponentPositions() async {\r\n+    try {\r\n+      final prefs = await SharedPreferences.getInstance();\r\n+      final positionsJson = prefs.getString('component_positions_graph_overlay_${widget.overlayId}');\r\n+\r\n+      if (positionsJson != null) {\r\n+        final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n+        setState(() {\r\n+          _componentPositions = positionsMap.map((key, value) {\r\n+            final offsetList = (value as List<dynamic>).cast<double>();\r\n+            return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n+          });\r\n+        });\r\n+        print(\"Loaded component positions from SharedPreferences.\");\r\n+      } else {\r\n+        // Initialize default positions if no saved positions are found\r\n+        _initializeDefaultPositions();\r\n+        print(\"No saved component positions found. Initialized defaults.\");\r\n+      }\r\n+    } catch (e) {\r\n+      print(\"Error loading component positions: $e\");\r\n+      // Handle error or initialize default positions\r\n+      _initializeDefaultPositions();\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _saveComponentPositions() async {\r\n+    print(\"GraphOverlay: Saving component positions\");\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    final positionsMap = _componentPositions.map((key, value) {\r\n+      return MapEntry(key, [value.dx, value.dy]);\r\n+    });\r\n+    await prefs.setString('component_positions_graph_overlay_${widget.overlayId}', jsonEncode(positionsMap));\r\n+    print(\"Component positions saved to SharedPreferences.\");\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    print(\"GraphOverlay: build called for ${widget.overlayId}\");\r\n+\r\n+    // Define graph sizes based on overlayId\r\n+    double graphWidth;\r\n+    double graphHeight;\r\n+    double fontSize;\r\n+\r\n+    if (widget.overlayId == 'main_dashboard') {\r\n+      // Smaller graphs for the small diagram view\r\n+      graphWidth = 60; // Reduced from 80 to 60\r\n+      graphHeight = 50; // Reduced from 60 to 50\r\n+      fontSize = 7; // Reduced from 8 to 7\r\n+    } else {\r\n+      // Default sizes for the full diagram view\r\n+      graphWidth = 120; // Reduced from 150 to 120\r\n+      graphHeight = 100; // Reduced from 100 to 80\r\n+      fontSize = 9; // Reduced from 10 to 9\r\n+    }\r\n+\r\n+    // Offsets to center the graphs at the component positions\r\n+    double horizontalOffset = graphWidth / 2;\r\n+    double verticalOffset = graphHeight / 2;\r\n+\r\n+    return Container(\r\n+      decoration: BoxDecoration(\r\n+        color: Colors.blue.withOpacity(0.1),\r\n+        border: Border.all(color: Colors.blue.withOpacity(0.3)),\r\n+      ),\r\n+      child: Stack(\r\n+        children: [\r\n+          // Debug grid\r\n+          GridPaper(\r\n+            color: Colors.blue.withOpacity(0.1),\r\n+            divisions: 1,\r\n+            subdivisions: 8,\r\n+            interval: 100,\r\n+          ),\r\n+          BlocBuilder<ComponentListBloc, ComponentListState>(\r\n+            builder: (context, state) {\r\n+              print(\"GraphOverlay: BlocBuilder update - Components: ${state.components.length}\");\r\n+              return LayoutBuilder(\r\n+                builder: (context, constraints) {\r\n+                  print(\"GraphOverlay: LayoutBuilder constraints - w:${constraints.maxWidth}, h:${constraints.maxHeight}\");\r\n+                  // Remove initialization from here and use didChangeDependencies instead\r\n+                  return Stack(\r\n+                    children: [\r\n+                      // Debug size indicator\r\n+                      Positioned(\r\n+                        left: 10,\r\n+                        bottom: 10,\r\n+                        child: Container(\r\n+                          padding: EdgeInsets.all(4),\r\n+                          color: Colors.black54,\r\n+                          child: Text(\r\n+                            'Size: ${_diagramSize.width.toInt()}x${_diagramSize.height.toInt()}',\r\n+                            style: TextStyle(color: Colors.white, fontSize: 10),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                      ...state.components.entries.map((entry) {\r\n+                        final componentName = entry.key;\r\n+                        final component = entry.value;\r\n+                        final position = _componentPositions[componentName];\r\n+\r\n+                        if (position == null) return SizedBox.shrink();\r\n+\r\n+                        final parameterToPlot = _getParameterToPlot(component);\r\n+                        if (parameterToPlot == null) {\r\n+                          return SizedBox.shrink();\r\n+                        }\r\n+\r\n+                        final left = position.dx - horizontalOffset;\r\n+                        final top = position.dy - verticalOffset;\r\n+\r\n+                        return Positioned(\r\n+                          left: left,\r\n+                          top: top,\r\n+                          child: GestureDetector(\r\n+                            behavior: HitTestBehavior.opaque,\r\n+                            onPanUpdate: _isEditMode\r\n+                                ? (details) {\r\n+                                    setState(() {\r\n+                                      _componentPositions[componentName] = Offset(\r\n+                                        position.dx + details.delta.dx,\r\n+                                        position.dy + details.delta.dy,\r\n+                                      );\r\n+                                    });\r\n+                                  }\r\n+                                : null,\r\n+                            onPanEnd: _isEditMode\r\n+                                ? (_) => _saveComponentPositions()\r\n+                                : null,\r\n+                            child: Container(\r\n+                              width: graphWidth,\r\n+                              height: graphHeight,\r\n+                              decoration: BoxDecoration(\r\n+                                color: Colors.black54,\r\n+                                borderRadius: BorderRadius.circular(8),\r\n+                              ),\r\n+                              padding: EdgeInsets.all(4),\r\n+                              child: Column(\r\n+                                children: [\r\n+                                  Text(\r\n+                                    '$componentName\\n($parameterToPlot)',\r\n+                                    style: TextStyle(color: Colors.white, fontSize: fontSize),\r\n+                                    textAlign: TextAlign.center,\r\n+                                  ),\r\n+                                  SizedBox(height: 4),\r\n+                                  Expanded(\r\n+                                    child: _buildMinimalGraph(component, parameterToPlot),\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n+                        );\r\n+                      }).toList(),\r\n+                      // Reset button\r\n+                      Positioned(\r\n+                        top: 40,\r\n+                        right: widget.overlayId == 'main_dashboard' ? 8 : null,\r\n+                        left: widget.overlayId != 'main_dashboard' ? 8 : null,\r\n+                        child: GestureDetector(\r\n+                          onTap: _resetToCenter,\r\n+                          child: Container(\r\n+                            decoration: BoxDecoration(\r\n+                              color: Colors.redAccent,\r\n+                              shape: BoxShape.circle,\r\n+                            ),\r\n+                            padding: EdgeInsets.all(8),\r\n+                            child: Icon(Icons.restore, color: Colors.white, size: 20),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ],\r\n+                  );\r\n+                },\r\n+              );\r\n+            },\r\n+          ),\r\n+          // Toggle Edit Mode Button\r\n+          Positioned(\r\n+            top: 8,\r\n+            right: widget.overlayId == 'main_dashboard' ? 8 : null,\r\n+            left: widget.overlayId != 'main_dashboard' ? 8 : null,\r\n+            child: _buildEditModeToggle(),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildEditModeToggle() {\r\n+    return GestureDetector(\r\n+      onTap: () {\r\n+        setState(() {\r\n+          _isEditMode = !_isEditMode;\r\n+        });\r\n+        print(\"Edit mode toggled: $_isEditMode\");\r\n+      },\r\n+      child: Container(\r\n+        decoration: BoxDecoration(\r\n+          color: _isEditMode ? Colors.blueAccent : Colors.grey,\r\n+          shape: BoxShape.circle,\r\n+        ),\r\n+        padding: EdgeInsets.all(8),\r\n+        child: Icon(\r\n+          _isEditMode ? Icons.lock_open : Icons.lock,\r\n+          color: Colors.white,\r\n+          size: 20,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _resetToCenter() {\r\n+    print(\"GraphOverlay: Resetting components to center\");\r\n+    final centerX = _diagramSize.width / 2;\r\n+    final centerY = _diagramSize.height / 2;\r\n+\r\n+    setState(() {\r\n+      _componentPositions = _componentPositions.map((key, value) {\r\n+        // Position each component relative to the center\r\n+        double newX;\r\n+        double newY;\r\n+\r\n+        switch (key) {\r\n+          case 'Nitrogen Generator':\r\n+            newX = centerX * 0.2;\r\n+            newY = centerY * 1.6;\r\n+            break;\r\n+          case 'MFC':\r\n+            newX = centerX * 0.4;\r\n+            newY = centerY * 1.4;\r\n+            break;\r\n+          case 'Backline Heater':\r\n+            newX = centerX * 0.7;\r\n+            newY = centerY * 1.2;\r\n+            break;\r\n+          case 'Frontline Heater':\r\n+            newX = centerX;\r\n+            newY = centerY;\r\n+            break;\r\n+          case 'Precursor Heater 1':\r\n+            newX = centerX * 1.3;\r\n+            newY = centerY * 0.8;\r\n+            break;\r\n+          case 'Precursor Heater 2':\r\n+            newX = centerX * 1.6;\r\n+            newY = centerY * 0.6;\r\n+            break;\r\n+          case 'Reaction Chamber':\r\n+            newX = centerX;\r\n+            newY = centerY * 0.4;\r\n+            break;\r\n+          case 'Pressure Control System':\r\n+            newX = centerX * 1.5;\r\n+            newY = centerY * 1.5;\r\n+            break;\r\n+          case 'Vacuum Pump':\r\n+            newX = centerX * 1.7;\r\n+            newY = centerY * 1.7;\r\n+            break;\r\n+          case 'Valve 1':\r\n+            newX = centerX * 0.6;\r\n+            newY = centerY * 0.6;\r\n+            break;\r\n+          case 'Valve 2':\r\n+            newX = centerX * 0.6;\r\n+            newY = centerY * 0.4;\r\n+            break;\r\n+          default:\r\n+            newX = centerX;\r\n+            newY = centerY;\r\n+        }\r\n+\r\n+        print(\"Resetting $key to position: ($newX, $newY)\");\r\n+\r\n+        return MapEntry(key, Offset(newX, newY));\r\n+      });\r\n+    });\r\n+\r\n+    _saveComponentPositions(); // Save these new positions\r\n+  }\r\n+\r\n+  String? _getParameterToPlot(SystemComponent component) {\r\n+    switch (component.name) {\r\n+      case 'Nitrogen Generator':\r\n+        return 'flow_rate';\r\n+      case 'MFC':\r\n+        return 'flow_rate';\r\n+      case 'Backline Heater':\r\n+      case 'Frontline Heater':\r\n+      case 'Precursor Heater 1':\r\n+      case 'Precursor Heater 2':\r\n+        return 'temperature';\r\n+      case 'Reaction Chamber':\r\n+        return 'pressure';\r\n+      case 'Pressure Control System':\r\n+        return 'pressure';\r\n+      case 'Vacuum Pump':\r\n+        return 'power';\r\n+      case 'Valve 1':\r\n+      case 'Valve 2':\r\n+        return 'status';\r\n+      default:\r\n+        return null;\r\n+    }\r\n+  }\r\n+\r\n+  double _calculateYRange(SystemComponent component, String parameter, double? setValue) {\r\n+    final dataPoints = component.parameterHistory[parameter];\r\n+    if (dataPoints == null || dataPoints.isEmpty) {\r\n+      return 1.0; // Default range\r\n+    }\r\n+\r\n+    double maxY = dataPoints.map((dp) => dp.value).reduce(max);\r\n+    double minY = dataPoints.map((dp) => dp.value).reduce(min);\r\n+\r\n+    if (setValue != null) {\r\n+      maxY = max(maxY, setValue + 1);\r\n+      minY = min(minY, setValue - 1);\r\n+    }\r\n+\r\n+    // Ensure a minimum range\r\n+    if (maxY - minY < 2.0) {\r\n+      maxY += 1.0;\r\n+      minY -= 1.0;\r\n+    }\r\n+\r\n+    return (maxY - minY) / 2; // Calculate range around setValue\r\n+  }\r\n+\r\n+  Widget _buildMinimalGraph(SystemComponent component, String parameter) {\r\n+    print(\"GraphOverlay: Building graph for ${component.name} - $parameter\");\r\n+    final dataPoints = component.parameterHistory[parameter];\r\n+\r\n+    if (dataPoints == null || dataPoints.isEmpty) {\r\n+      print('No data available for $parameter in ${component.name}');\r\n+      return Container(\r\n+        color: Colors.black26,\r\n+        child: Center(\r\n+          child: Text(\r\n+            component.isActivated ? 'Waiting...' : 'Inactive',\r\n+            style: TextStyle(color: Colors.white, fontSize: 8),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      );\r\n+    }\r\n+\r\n+    // Get the set value for the parameter\r\n+    double? setValue = component.setValues[parameter];\r\n+\r\n+    // Convert data points to FlSpot\r\n+    final firstTimestamp = dataPoints.first!.timestamp.millisecondsSinceEpoch.toDouble();\r\n+    List<FlSpot> spots = dataPoints.toList().map((dp) {\r\n+      double x = (dp.timestamp.millisecondsSinceEpoch.toDouble() - firstTimestamp) / 1000; // in seconds\r\n+      double y = dp.value;\r\n+      return FlSpot(x, y);\r\n+    }).toList();\r\n+\r\n+    // Calculate Y-axis range\r\n+    double yRange = _calculateYRange(component, parameter, setValue);\r\n+\r\n+    // Set minY and maxY based on setValue and yRange\r\n+    double minY = setValue != null ? setValue - yRange : dataPoints.map((dp) => dp.value).reduce(min) - 1;\r\n+    double maxY = setValue != null ? setValue + yRange : dataPoints.map((dp) => dp.value).reduce(max) + 1;\r\n+\r\n+    // Ensure minY and maxY are reasonable\r\n+    if (maxY - minY < 1) {\r\n+      minY = minY - 1;\r\n+      maxY = maxY + 1;\r\n+    }\r\n+\r\n+    // Determine the maxX value\r\n+    double maxX = spots.isNotEmpty ? spots.last.x : 60;\r\n+\r\n+    return LineChart(\r\n+      LineChartData(\r\n+        minX: 0,\r\n+        maxX: maxX,\r\n+        minY: minY,\r\n+        maxY: maxY,\r\n+        lineBarsData: [\r\n+          // Actual parameter line\r\n+          LineChartBarData(\r\n+            spots: spots,\r\n+            isCurved: true,\r\n+            color: componentColors[component.name] ?? Colors.white,\r\n+            barWidth: 2, // Reduced line width for minimal look\r\n+            dotData: FlDotData(show: false),\r\n+          ),\r\n+          // Reference line for set value (optional: remove for more minimal look)\r\n+          if (setValue != null)\r\n+            LineChartBarData(\r\n+              spots: [\r\n+                FlSpot(0, setValue),\r\n+                FlSpot(maxX, setValue),\r\n+              ],\r\n+              isCurved: false,\r\n+              color: Colors.grey,\r\n+              barWidth: 1,\r\n+              dotData: FlDotData(show: false),\r\n+              dashArray: [5, 5],\r\n+            ),\r\n+        ],\r\n+        titlesData: FlTitlesData(\r\n+          show: false, // Hide all titles for minimal look\r\n+        ),\r\n+        gridData: FlGridData(\r\n+          show: false, // Hide grid lines\r\n+        ),\r\n+        borderData: FlBorderData(\r\n+          show: false, // Hide borders\r\n+        ),\r\n+        lineTouchData: LineTouchData(\r\n+          enabled: false, // Disable touch interactions\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+}\r\n"
                }
            ],
            "date": 1734376761143,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'dart:convert';\r\nimport 'dart:math';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../../../blocs/component/bloc/component_list_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_list_state.dart';\r\nimport '../../components/models/system_component.dart';\r\nimport '../../components/models/data_point.dart';\r\n\r\nclass GraphOverlay extends StatefulWidget {\r\n  final String overlayId;\r\n\r\n  GraphOverlay({required this.overlayId});\r\n\r\n  @override\r\n  _GraphOverlayState createState() => _GraphOverlayState();\r\n}\r\n\r\nclass _GraphOverlayState extends State<GraphOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size _diagramSize = Size.zero;\r\n  bool _isEditMode = false; // Tracks edit mode\r\n\r\n  // Define a color palette for components\r\n  final Map<String, Color> componentColors = {\r\n    'Nitrogen Generator': Colors.blueAccent,\r\n    'MFC': Colors.green,\r\n    'Backline Heater': Colors.orange,\r\n    'Frontline Heater': Colors.purple,\r\n    'Precursor Heater 1': Colors.teal,\r\n    'Precursor Heater 2': Colors.indigo,\r\n    'Reaction Chamber': Colors.redAccent,\r\n    'Pressure Control System': Colors.cyan,\r\n    'Vacuum Pump': Colors.amber,\r\n    'Valve 1': Colors.brown,\r\n    'Valve 2': Colors.pink,\r\n  };\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    print(\"GraphOverlay: initState called for ${widget.overlayId}\");\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      print(\"GraphOverlay: Post frame callback triggered\");\r\n      _updateDiagramSize();\r\n    });\r\n  }\r\n\r\n  @override\r\n  void didChangeDependencies() {\r\n    super.didChangeDependencies();\r\n    print(\"GraphOverlay: didChangeDependencies called\");\r\n    if (_diagramSize == Size.zero) {\r\n      final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n      if (renderBox != null) {\r\n        _diagramSize = renderBox.size;\r\n        if (_componentPositions.isEmpty) {\r\n          _initializeDefaultPositions();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  void _updateDiagramSize() {\r\n    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _diagramSize = renderBox.size;\r\n      });\r\n      print(\"GraphOverlay: Diagram size updated to $_diagramSize\");\r\n      if (_componentPositions.isEmpty) {\r\n        print(\"GraphOverlay: Initializing default positions\");\r\n        _initializeDefaultPositions();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _resetComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.remove('component_positions_graph_overlay_${widget.overlayId}');\r\n    _initializeDefaultPositions();\r\n    setState(() {}); // Refresh the UI\r\n    print(\"Component positions have been reset.\");\r\n  }\r\n\r\n  void _initializeDefaultPositions() {\r\n    if (_diagramSize == Size.zero) return; // Diagram size not yet available\r\n\r\n    setState(() {\r\n      _componentPositions = {\r\n        'Nitrogen Generator': Offset(_diagramSize.width * 0.05, _diagramSize.height * 0.80),\r\n        'MFC': Offset(_diagramSize.width * 0.20, _diagramSize.height * 0.70),\r\n        'Backline Heater': Offset(_diagramSize.width * 0.35, _diagramSize.height * 0.60),\r\n        'Frontline Heater': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.50),\r\n        'Precursor Heater 1': Offset(_diagramSize.width * 0.65, _diagramSize.height * 0.40),\r\n        'Precursor Heater 2': Offset(_diagramSize.width * 0.80, _diagramSize.height * 0.30),\r\n        'Reaction Chamber': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.20),\r\n        'Pressure Control System': Offset(_diagramSize.width * 0.75, _diagramSize.height * 0.75),\r\n        'Vacuum Pump': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.85),\r\n        'Valve 1': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.60),\r\n        'Valve 2': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.40),\r\n      };\r\n    });\r\n    print(\"Default component positions initialized.\");\r\n    _saveComponentPositions();\r\n  }\r\n\r\n  Future<void> _loadComponentPositions() async {\r\n    try {\r\n      final prefs = await SharedPreferences.getInstance();\r\n      final positionsJson = prefs.getString('component_positions_graph_overlay_${widget.overlayId}');\r\n\r\n      if (positionsJson != null) {\r\n        final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n        setState(() {\r\n          _componentPositions = positionsMap.map((key, value) {\r\n            final offsetList = (value as List<dynamic>).cast<double>();\r\n            return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n          });\r\n        });\r\n        print(\"Loaded component positions from SharedPreferences.\");\r\n      } else {\r\n        // Initialize default positions if no saved positions are found\r\n        _initializeDefaultPositions();\r\n        print(\"No saved component positions found. Initialized defaults.\");\r\n      }\r\n    } catch (e) {\r\n      print(\"Error loading component positions: $e\");\r\n      // Handle error or initialize default positions\r\n      _initializeDefaultPositions();\r\n    }\r\n  }\r\n\r\n  Future<void> _saveComponentPositions() async {\r\n    print(\"GraphOverlay: Saving component positions\");\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _componentPositions.map((key, value) {\r\n      return MapEntry(key, [value.dx, value.dy]);\r\n    });\r\n    await prefs.setString('component_positions_graph_overlay_${widget.overlayId}', jsonEncode(positionsMap));\r\n    print(\"Component positions saved to SharedPreferences.\");\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    print(\"GraphOverlay: build called for ${widget.overlayId}\");\r\n\r\n    // Define graph sizes based on overlayId\r\n    double graphWidth;\r\n    double graphHeight;\r\n    double fontSize;\r\n\r\n    if (widget.overlayId == 'main_dashboard') {\r\n      // Smaller graphs for the small diagram view\r\n      graphWidth = 60; // Reduced from 80 to 60\r\n      graphHeight = 50; // Reduced from 60 to 50\r\n      fontSize = 7; // Reduced from 8 to 7\r\n    } else {\r\n      // Default sizes for the full diagram view\r\n      graphWidth = 120; // Reduced from 150 to 120\r\n      graphHeight = 100; // Reduced from 100 to 80\r\n      fontSize = 9; // Reduced from 10 to 9\r\n    }\r\n\r\n    // Offsets to center the graphs at the component positions\r\n    double horizontalOffset = graphWidth / 2;\r\n    double verticalOffset = graphHeight / 2;\r\n\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.blue.withOpacity(0.1),\r\n        border: Border.all(color: Colors.blue.withOpacity(0.3)),\r\n      ),\r\n      child: Stack(\r\n        children: [\r\n          // Debug grid\r\n          GridPaper(\r\n            color: Colors.blue.withOpacity(0.1),\r\n            divisions: 1,\r\n            subdivisions: 8,\r\n            interval: 100,\r\n          ),\r\n          BlocBuilder<ComponentListBloc, ComponentListState>(\r\n            builder: (context, state) {\r\n              print(\"GraphOverlay: BlocBuilder update - Components: ${state.components.length}\");\r\n              return LayoutBuilder(\r\n                builder: (context, constraints) {\r\n                  print(\"GraphOverlay: LayoutBuilder constraints - w:${constraints.maxWidth}, h:${constraints.maxHeight}\");\r\n                  // Remove initialization from here and use didChangeDependencies instead\r\n                  return Stack(\r\n                    children: [\r\n                      // Debug size indicator\r\n                      Positioned(\r\n                        left: 10,\r\n                        bottom: 10,\r\n                        child: Container(\r\n                          padding: EdgeInsets.all(4),\r\n                          color: Colors.black54,\r\n                          child: Text(\r\n                            'Size: ${_diagramSize.width.toInt()}x${_diagramSize.height.toInt()}',\r\n                            style: TextStyle(color: Colors.white, fontSize: 10),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                      ...state.components.entries.map((entry) {\r\n                        final componentName = entry.key;\r\n                        final component = entry.value;\r\n                        final position = _componentPositions[componentName];\r\n\r\n                        if (position == null) return SizedBox.shrink();\r\n\r\n                        final parameterToPlot = _getParameterToPlot(component);\r\n                        if (parameterToPlot == null) {\r\n                          return SizedBox.shrink();\r\n                        }\r\n\r\n                        final left = position.dx - horizontalOffset;\r\n                        final top = position.dy - verticalOffset;\r\n\r\n                        return Positioned(\r\n                          left: left,\r\n                          top: top,\r\n                          child: GestureDetector(\r\n                            behavior: HitTestBehavior.opaque,\r\n                            onPanUpdate: _isEditMode\r\n                                ? (details) {\r\n                                    setState(() {\r\n                                      _componentPositions[componentName] = Offset(\r\n                                        position.dx + details.delta.dx,\r\n                                        position.dy + details.delta.dy,\r\n                                      );\r\n                                    });\r\n                                  }\r\n                                : null,\r\n                            onPanEnd: _isEditMode\r\n                                ? (_) => _saveComponentPositions()\r\n                                : null,\r\n                            child: Container(\r\n                              width: graphWidth,\r\n                              height: graphHeight,\r\n                              decoration: BoxDecoration(\r\n                                color: Colors.black54,\r\n                                borderRadius: BorderRadius.circular(8),\r\n                              ),\r\n                              padding: EdgeInsets.all(4),\r\n                              child: Column(\r\n                                children: [\r\n                                  Text(\r\n                                    '$componentName\\n($parameterToPlot)',\r\n                                    style: TextStyle(color: Colors.white, fontSize: fontSize),\r\n                                    textAlign: TextAlign.center,\r\n                                  ),\r\n                                  SizedBox(height: 4),\r\n                                  Expanded(\r\n                                    child: _buildMinimalGraph(component, parameterToPlot),\r\n                                  ),\r\n                                ],\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        );\r\n                      }).toList(),\r\n                      // Reset button\r\n                      Positioned(\r\n                        top: 40,\r\n                        right: widget.overlayId == 'main_dashboard' ? 8 : null,\r\n                        left: widget.overlayId != 'main_dashboard' ? 8 : null,\r\n                        child: GestureDetector(\r\n                          onTap: _resetToCenter,\r\n                          child: Container(\r\n                            decoration: BoxDecoration(\r\n                              color: Colors.redAccent,\r\n                              shape: BoxShape.circle,\r\n                            ),\r\n                            padding: EdgeInsets.all(8),\r\n                            child: Icon(Icons.restore, color: Colors.white, size: 20),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  );\r\n                },\r\n              );\r\n            },\r\n          ),\r\n          // Toggle Edit Mode Button\r\n          Positioned(\r\n            top: 8,\r\n            right: widget.overlayId == 'main_dashboard' ? 8 : null,\r\n            left: widget.overlayId != 'main_dashboard' ? 8 : null,\r\n            child: _buildEditModeToggle(),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildEditModeToggle() {\r\n    return GestureDetector(\r\n      onTap: () {\r\n        setState(() {\r\n          _isEditMode = !_isEditMode;\r\n        });\r\n        print(\"Edit mode toggled: $_isEditMode\");\r\n      },\r\n      child: Container(\r\n        decoration: BoxDecoration(\r\n          color: _isEditMode ? Colors.blueAccent : Colors.grey,\r\n          shape: BoxShape.circle,\r\n        ),\r\n        padding: EdgeInsets.all(8),\r\n        child: Icon(\r\n          _isEditMode ? Icons.lock_open : Icons.lock,\r\n          color: Colors.white,\r\n          size: 20,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _resetToCenter() {\r\n    print(\"GraphOverlay: Resetting components to center\");\r\n    final centerX = _diagramSize.width / 2;\r\n    final centerY = _diagramSize.height / 2;\r\n\r\n    setState(() {\r\n      _componentPositions = _componentPositions.map((key, value) {\r\n        // Position each component relative to the center\r\n        double newX;\r\n        double newY;\r\n\r\n        switch (key) {\r\n          case 'Nitrogen Generator':\r\n            newX = centerX * 0.2;\r\n            newY = centerY * 1.6;\r\n            break;\r\n          case 'MFC':\r\n            newX = centerX * 0.4;\r\n            newY = centerY * 1.4;\r\n            break;\r\n          case 'Backline Heater':\r\n            newX = centerX * 0.7;\r\n            newY = centerY * 1.2;\r\n            break;\r\n          case 'Frontline Heater':\r\n            newX = centerX;\r\n            newY = centerY;\r\n            break;\r\n          case 'Precursor Heater 1':\r\n            newX = centerX * 1.3;\r\n            newY = centerY * 0.8;\r\n            break;\r\n          case 'Precursor Heater 2':\r\n            newX = centerX * 1.6;\r\n            newY = centerY * 0.6;\r\n            break;\r\n          case 'Reaction Chamber':\r\n            newX = centerX;\r\n            newY = centerY * 0.4;\r\n            break;\r\n          case 'Pressure Control System':\r\n            newX = centerX * 1.5;\r\n            newY = centerY * 1.5;\r\n            break;\r\n          case 'Vacuum Pump':\r\n            newX = centerX * 1.7;\r\n            newY = centerY * 1.7;\r\n            break;\r\n          case 'Valve 1':\r\n            newX = centerX * 0.6;\r\n            newY = centerY * 0.6;\r\n            break;\r\n          case 'Valve 2':\r\n            newX = centerX * 0.6;\r\n            newY = centerY * 0.4;\r\n            break;\r\n          default:\r\n            newX = centerX;\r\n            newY = centerY;\r\n        }\r\n\r\n        print(\"Resetting $key to position: ($newX, $newY)\");\r\n\r\n        return MapEntry(key, Offset(newX, newY));\r\n      });\r\n    });\r\n\r\n    _saveComponentPositions(); // Save these new positions\r\n  }\r\n\r\n  String? _getParameterToPlot(SystemComponent component) {\r\n    switch (component.name) {\r\n      case 'Nitrogen Generator':\r\n        return 'flow_rate';\r\n      case 'MFC':\r\n        return 'flow_rate';\r\n      case 'Backline Heater':\r\n      case 'Frontline Heater':\r\n      case 'Precursor Heater 1':\r\n      case 'Precursor Heater 2':\r\n        return 'temperature';\r\n      case 'Reaction Chamber':\r\n        return 'pressure';\r\n      case 'Pressure Control System':\r\n        return 'pressure';\r\n      case 'Vacuum Pump':\r\n        return 'power';\r\n      case 'Valve 1':\r\n      case 'Valve 2':\r\n        return 'status';\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  double _calculateYRange(SystemComponent component, String parameter, double? setValue) {\r\n    final dataPoints = component.parameterHistory[parameter];\r\n    if (dataPoints == null || dataPoints.isEmpty) {\r\n      return 1.0; // Default range\r\n    }\r\n\r\n    double maxY = dataPoints.map((dp) => dp.value).reduce(max);\r\n    double minY = dataPoints.map((dp) => dp.value).reduce(min);\r\n\r\n    if (setValue != null) {\r\n      maxY = max(maxY, setValue + 1);\r\n      minY = min(minY, setValue - 1);\r\n    }\r\n\r\n    // Ensure a minimum range\r\n    if (maxY - minY < 2.0) {\r\n      maxY += 1.0;\r\n      minY -= 1.0;\r\n    }\r\n\r\n    return (maxY - minY) / 2; // Calculate range around setValue\r\n  }\r\n\r\n  Widget _buildMinimalGraph(SystemComponent component, String parameter) {\r\n    print(\"GraphOverlay: Building graph for ${component.name} - $parameter\");\r\n    final dataPoints = component.parameterHistory[parameter];\r\n\r\n    if (dataPoints == null || dataPoints.isEmpty) {\r\n      print('No data available for $parameter in ${component.name}');\r\n      return Container(\r\n        color: Colors.black26,\r\n        child: Center(\r\n          child: Text(\r\n            component.isActivated ? 'Waiting...' : 'Inactive',\r\n            style: TextStyle(color: Colors.white, fontSize: 8),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      );\r\n    }\r\n\r\n    // Get the set value for the parameter\r\n    double? setValue = component.setValues[parameter];\r\n\r\n    // Convert data points to FlSpot\r\n    final firstTimestamp = dataPoints.first!.timestamp.millisecondsSinceEpoch.toDouble();\r\n    List<FlSpot> spots = dataPoints.toList().map((dp) {\r\n      double x = (dp.timestamp.millisecondsSinceEpoch.toDouble() - firstTimestamp) / 1000; // in seconds\r\n      double y = dp.value;\r\n      return FlSpot(x, y);\r\n    }).toList();\r\n\r\n    // Calculate Y-axis range\r\n    double yRange = _calculateYRange(component, parameter, setValue);\r\n\r\n    // Set minY and maxY based on setValue and yRange\r\n    double minY = setValue != null ? setValue - yRange : dataPoints.map((dp) => dp.value).reduce(min) - 1;\r\n    double maxY = setValue != null ? setValue + yRange : dataPoints.map((dp) => dp.value).reduce(max) + 1;\r\n\r\n    // Ensure minY and maxY are reasonable\r\n    if (maxY - minY < 1) {\r\n      minY = minY - 1;\r\n      maxY = maxY + 1;\r\n    }\r\n\r\n    // Determine the maxX value\r\n    double maxX = spots.isNotEmpty ? spots.last.x : 60;\r\n\r\n    return LineChart(\r\n      LineChartData(\r\n        minX: 0,\r\n        maxX: maxX,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        lineBarsData: [\r\n          // Actual parameter line\r\n          LineChartBarData(\r\n            spots: spots,\r\n            isCurved: true,\r\n            color: componentColors[component.name] ?? Colors.white,\r\n            barWidth: 2, // Reduced line width for minimal look\r\n            dotData: FlDotData(show: false),\r\n          ),\r\n          // Reference line for set value (optional: remove for more minimal look)\r\n          if (setValue != null)\r\n            LineChartBarData(\r\n              spots: [\r\n                FlSpot(0, setValue),\r\n                FlSpot(maxX, setValue),\r\n              ],\r\n              isCurved: false,\r\n              color: Colors.grey,\r\n              barWidth: 1,\r\n              dotData: FlDotData(show: false),\r\n              dashArray: [5, 5],\r\n            ),\r\n        ],\r\n        titlesData: FlTitlesData(\r\n          show: false, // Hide all titles for minimal look\r\n        ),\r\n        gridData: FlGridData(\r\n          show: false, // Hide grid lines\r\n        ),\r\n        borderData: FlBorderData(\r\n          show: false, // Hide borders\r\n        ),\r\n        lineTouchData: LineTouchData(\r\n          enabled: false, // Disable touch interactions\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n}\r\n"
        }
    ]
}