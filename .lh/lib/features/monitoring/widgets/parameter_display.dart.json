{
    "sourceFile": "lib/features/monitoring/widgets/parameter_display.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760341,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:experiment_planner/features/components/models/system_component.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_event.dart';\r\nimport '../../../blocs/component/bloc/component_state.dart';\r\nimport 'parameter_card.dart';\r\n\r\nclass ParameterDisplay extends StatefulWidget {\r\n  @override\r\n  State<ParameterDisplay> createState() => _ParameterDisplayState();\r\n}\r\n\r\nclass _ParameterDisplayState extends State<ParameterDisplay> {\r\n  final List<String> componentNames = [\r\n    'Reaction Chamber',\r\n    'MFC',\r\n    'Nitrogen Generator',\r\n    'Precursor Heater 1',\r\n    'Precursor Heater 2',\r\n  ];\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    // Initialize component blocs\r\n    for (final componentName in componentNames) {\r\n      context.read<ComponentBloc>().add(ComponentInitialized(componentName));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return LayoutBuilder(\r\n      builder: (context, constraints) {\r\n        return SingleChildScrollView(\r\n          child: Padding(\r\n            padding: const EdgeInsets.all(8.0),\r\n            child: GridView.extent(\r\n              maxCrossAxisExtent: 200,\r\n              childAspectRatio: 1.5,\r\n              mainAxisSpacing: 10,\r\n              crossAxisSpacing: 10,\r\n              shrinkWrap: true,\r\n              physics: NeverScrollableScrollPhysics(),\r\n              children: [\r\n                _buildReactorParameters(),\r\n                _buildMFCParameters(),\r\n                _buildNitrogenParameters(),\r\n                _buildPrecursorParameters('Precursor Heater 1'),\r\n                _buildPrecursorParameters('Precursor Heater 2'),\r\n              ],\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildReactorParameters() {\r\n    return BlocBuilder<ComponentBloc, ComponentState>(\r\n      builder: (context, state) {\r\n        if (state.component?.name != 'Reaction Chamber') return SizedBox.shrink();\r\n\r\n        final component = state.component;\r\n        if (component == null) return SizedBox.shrink();\r\n\r\n        return Column(\r\n          children: [\r\n            ParameterCard(\r\n              title: 'Chamber Pressure',\r\n              value: '${component.currentValues['pressure']?.toStringAsFixed(2) ?? 'N/A'} atm',\r\n              normalRange: '0.9 - 1.1 atm',\r\n              isNormal: _isPressureNormal(component),\r\n            ),\r\n            ParameterCard(\r\n              title: 'Chamber Temperature',\r\n              value: '${component.currentValues['temperature']?.toStringAsFixed(1) ?? 'N/A'} 째C',\r\n              normalRange: '145 - 155 째C',\r\n              isNormal: _isTemperatureNormal(component),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildMFCParameters() {\r\n    return BlocBuilder<ComponentBloc, ComponentState>(\r\n      builder: (context, state) {\r\n        if (state.component?.name != 'MFC') return SizedBox.shrink();\r\n\r\n        final component = state.component;\r\n        if (component == null) return SizedBox.shrink();\r\n\r\n        return ParameterCard(\r\n          title: 'MFC Flow Rate',\r\n          value: '${component.currentValues['flow_rate']?.toStringAsFixed(2) ?? 'N/A'} sccm',\r\n          normalRange: '0 - 100 sccm',\r\n          isNormal: _isFlowRateNormal(component),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildNitrogenParameters() {\r\n    return BlocBuilder<ComponentBloc, ComponentState>(\r\n      builder: (context, state) {\r\n        if (state.component?.name != 'Nitrogen Generator') return SizedBox.shrink();\r\n\r\n        final component = state.component;\r\n        if (component == null) return SizedBox.shrink();\r\n\r\n        return ParameterCard(\r\n          title: 'Nitrogen Flow Rate',\r\n          value: '${component.currentValues['flow_rate']?.toStringAsFixed(2) ?? 'N/A'} sccm',\r\n          normalRange: '0 - 100 sccm',\r\n          isNormal: _isFlowRateNormal(component),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildPrecursorParameters(String heaterName) {\r\n    return BlocBuilder<ComponentBloc, ComponentState>(\r\n      builder: (context, state) {\r\n        if (state.component?.name != heaterName) return SizedBox.shrink();\r\n\r\n        final component = state.component;\r\n        if (component == null) return SizedBox.shrink();\r\n\r\n        return ParameterCard(\r\n          title: heaterName,\r\n          value: '${component.currentValues['temperature']?.toStringAsFixed(1) ?? 'N/A'} 째C',\r\n          normalRange: '28 - 32 째C',\r\n          isNormal: _isPrecursorTemperatureNormal(component),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  bool _isPressureNormal(SystemComponent component) {\r\n    final pressure = component.currentValues['pressure'] as double?;\r\n    return pressure != null && pressure >= 0.9 && pressure <= 1.1;\r\n  }\r\n\r\n  bool _isTemperatureNormal(SystemComponent component) {\r\n    final temperature = component.currentValues['temperature'] as double?;\r\n    return temperature != null && temperature >= 145 && temperature <= 155;\r\n  }\r\n\r\n  bool _isFlowRateNormal(SystemComponent component) {\r\n    final flowRate = component.currentValues['flow_rate'] as double?;\r\n    return flowRate != null && flowRate >= 0 && flowRate <= 100;\r\n  }\r\n\r\n  bool _isPrecursorTemperatureNormal(SystemComponent component) {\r\n    final temperature = component.currentValues['temperature'] as double?;\r\n    return temperature != null && temperature >= 28 && temperature <= 32;\r\n  }\r\n}"
        }
    ]
}