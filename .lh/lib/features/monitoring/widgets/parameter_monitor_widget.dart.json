{
    "sourceFile": "lib/features/monitoring/widgets/parameter_monitor_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434612844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n \r\n-import 'package:experiment_planner/blocs/monitoring/parameter/bloc/parameter_monitoring_event.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart';\r\n-import '../../../blocs/monitoring/parameter/bloc/parameter_monitoring_state.dart';\r\n import '../../components/models/system_component.dart';\r\n \r\n class ParameterMonitorWidget extends StatelessWidget {\r\n   final SystemComponent component;\r\n"
                },
                {
                    "date": 1734434617931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n \r\n+import 'package:experiment_planner/features/monitoring/bloc/parameter_monitoring_bloc.dart';\r\n+import 'package:experiment_planner/features/monitoring/bloc/parameter_monitoring_state.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../components/models/system_component.dart';\r\n \r\n"
                }
            ],
            "date": 1734376760336,
            "name": "Commit-0",
            "content": "\r\nimport 'package:experiment_planner/blocs/monitoring/parameter/bloc/parameter_monitoring_event.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/monitoring/parameter/bloc/parameter_monitoring_bloc.dart';\r\nimport '../../../blocs/monitoring/parameter/bloc/parameter_monitoring_state.dart';\r\nimport '../../components/models/system_component.dart';\r\n\r\nclass ParameterMonitorWidget extends StatelessWidget {\r\n  final SystemComponent component;\r\n\r\n  const ParameterMonitorWidget({\r\n    Key? key,\r\n    required this.component,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<ParameterMonitoringBloc, ParameterMonitoringState>(\r\n      builder: (context, state) {\r\n        final isMonitoring = state.monitoringStatus[component.name] ?? false;\r\n        final violations = state.violations[component.name] ?? {};\r\n\r\n        return Card(\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              _buildHeader(context, isMonitoring),\r\n              const Divider(),\r\n              _buildParameterList(context, state, violations),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildHeader(BuildContext context, bool isMonitoring) {\r\n    return ListTile(\r\n      title: Text(component.name),\r\n      subtitle: Text(component.description),\r\n      trailing: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          Icon(\r\n            isMonitoring ? Icons.monitor : Icons.monitor_outlined,\r\n            color: isMonitoring ? Colors.green : Colors.grey,\r\n          ),\r\n          Switch(\r\n            value: isMonitoring,\r\n            onChanged: (value) {\r\n              final bloc = context.read<ParameterMonitoringBloc>();\r\n              if (value) {\r\n                bloc.add(StartParameterMonitoring(\r\n                  componentId: component.name,\r\n                  thresholds: _buildThresholds(),\r\n                ));\r\n              } else {\r\n                bloc.add(StopParameterMonitoring(\r\n                  componentId: component.name,\r\n                ));\r\n              }\r\n            },\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildParameterList(\r\n    BuildContext context,\r\n    ParameterMonitoringState state,\r\n    Map<String, bool> violations,\r\n  ) {\r\n    return ListView.builder(\r\n      shrinkWrap: true,\r\n      physics: const NeverScrollableScrollPhysics(),\r\n      itemCount: component.currentValues.length,\r\n      itemBuilder: (context, index) {\r\n        final parameter = component.currentValues.keys.elementAt(index);\r\n        final value = component.currentValues[parameter]!;\r\n        final hasViolation = violations[parameter] ?? false;\r\n\r\n        return _ParameterTile(\r\n          parameterName: parameter,\r\n          currentValue: value,\r\n          thresholds: state.thresholds[component.name]?[parameter],\r\n          hasViolation: hasViolation,\r\n          onThresholdUpdate: (min, max) {\r\n            context.read<ParameterMonitoringBloc>().add(\r\n              UpdateParameterThresholds(\r\n                componentId: component.name,\r\n                parameterName: parameter,\r\n                minValue: min,\r\n                maxValue: max,\r\n              ),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Map<String, Map<String, double>> _buildThresholds() {\r\n    final thresholds = <String, Map<String, double>>{};\r\n    for (final parameter in component.currentValues.keys) {\r\n      thresholds[parameter] = {\r\n        'min': component.minValues[parameter] ?? double.negativeInfinity,\r\n        'max': component.maxValues[parameter] ?? double.infinity,\r\n      };\r\n    }\r\n    return thresholds;\r\n  }\r\n}\r\n\r\nclass _ParameterTile extends StatelessWidget {\r\n  final String parameterName;\r\n  final double currentValue;\r\n  final Map<String, double>? thresholds;\r\n  final bool hasViolation;\r\n  final Function(double min, double max) onThresholdUpdate;\r\n\r\n  const _ParameterTile({\r\n    Key? key,\r\n    required this.parameterName,\r\n    required this.currentValue,\r\n    this.thresholds,\r\n    required this.hasViolation,\r\n    required this.onThresholdUpdate,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ListTile(\r\n      title: Text(parameterName),\r\n      subtitle: Text('Current: $currentValue'),\r\n      trailing: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          if (hasViolation)\r\n            const Icon(Icons.warning_amber_rounded, color: Colors.red),\r\n          IconButton(\r\n            icon: const Icon(Icons.settings),\r\n            onPressed: () => _showThresholdDialog(context),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showThresholdDialog(BuildContext context) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => ThresholdSettingsDialog(\r\n        parameterName: parameterName,\r\n        currentMin: thresholds?['min'] ?? double.negativeInfinity,\r\n        currentMax: thresholds?['max'] ?? double.infinity,\r\n        onUpdate: onThresholdUpdate,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ThresholdSettingsDialog extends StatefulWidget {\r\n  final String parameterName;\r\n  final double currentMin;\r\n  final double currentMax;\r\n  final Function(double min, double max) onUpdate;\r\n\r\n  const ThresholdSettingsDialog({\r\n    Key? key,\r\n    required this.parameterName,\r\n    required this.currentMin,\r\n    required this.currentMax,\r\n    required this.onUpdate,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<ThresholdSettingsDialog> createState() => _ThresholdSettingsDialogState();\r\n}\r\n\r\nclass _ThresholdSettingsDialogState extends State<ThresholdSettingsDialog> {\r\n  late TextEditingController _minController;\r\n  late TextEditingController _maxController;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _minController = TextEditingController(text: widget.currentMin.toString());\r\n    _maxController = TextEditingController(text: widget.currentMax.toString());\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AlertDialog(\r\n      title: Text('${widget.parameterName} Thresholds'),\r\n      content: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          TextField(\r\n            controller: _minController,\r\n            decoration: const InputDecoration(labelText: 'Minimum Value'),\r\n            keyboardType: TextInputType.number,\r\n          ),\r\n          TextField(\r\n            controller: _maxController,\r\n            decoration: const InputDecoration(labelText: 'Maximum Value'),\r\n            keyboardType: TextInputType.number,\r\n          ),\r\n        ],\r\n      ),\r\n      actions: [\r\n        TextButton(\r\n          onPressed: () => Navigator.of(context).pop(),\r\n          child: const Text('Cancel'),\r\n        ),\r\n        TextButton(\r\n          onPressed: () {\r\n            final min = double.tryParse(_minController.text) ?? widget.currentMin;\r\n            final max = double.tryParse(_maxController.text) ?? widget.currentMax;\r\n            widget.onUpdate(min, max);\r\n            Navigator.of(context).pop();\r\n          },\r\n          child: const Text('Save'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _minController.dispose();\r\n    _maxController.dispose();\r\n    super.dispose();\r\n  }\r\n}"
        }
    ]
}