{
    "sourceFile": "lib/features/monitoring/trend/trend_analysis.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734376760288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734376760288,
            "name": "Commit-0",
            "content": "\r\nimport 'dart:math' as math;\r\nimport '../../components/models/data_point.dart';\r\n\r\nenum TrendType {\r\n  stable,\r\n  increasing,\r\n  decreasing,\r\n  rapidIncrease,\r\n  rapidDecrease,\r\n}\r\n\r\nclass TrendAnalysis {\r\n  final Duration analysisPeriod;\r\n  final double rapidChangeThreshold; // percent change per minute\r\n\r\n  TrendAnalysis({\r\n    this.analysisPeriod = const Duration(minutes: 5),\r\n    this.rapidChangeThreshold = 5.0, // 5% per minute\r\n  });\r\n\r\n  TrendResult analyzeTrend(List<DataPoint> dataPoints) {\r\n    if (dataPoints.length < 2) {\r\n      return TrendResult(\r\n        type: TrendType.stable,\r\n        changeRate: 0,\r\n        confidence: 0,\r\n      );\r\n    }\r\n\r\n    final recentPoints = _getRecentPoints(dataPoints);\r\n    if (recentPoints.isEmpty) {\r\n      return TrendResult(\r\n        type: TrendType.stable,\r\n        changeRate: 0,\r\n        confidence: 0,\r\n      );\r\n    }\r\n\r\n    final changeRate = _calculateChangeRate(recentPoints);\r\n    final confidence = _calculateConfidence(recentPoints);\r\n    final trendType = _determineTrendType(changeRate);\r\n\r\n    return TrendResult(\r\n      type: trendType,\r\n      changeRate: changeRate,\r\n      confidence: confidence,\r\n    );\r\n  }\r\n\r\n  List<DataPoint> _getRecentPoints(List<DataPoint> dataPoints) {\r\n    final cutoff = DateTime.now().subtract(analysisPeriod);\r\n    return dataPoints.where((dp) => dp.timestamp.isAfter(cutoff)).toList();\r\n  }\r\n\r\n  double _calculateChangeRate(List<DataPoint> points) {\r\n    if (points.length < 2) return 0;\r\n\r\n    final first = points.first;\r\n    final last = points.last;\r\n    final timeDiff = last.timestamp.difference(first.timestamp).inMinutes;\r\n    if (timeDiff == 0) return 0;\r\n\r\n    return ((last.value - first.value) / first.value * 100) / timeDiff;\r\n  }\r\n\r\n  double _calculateConfidence(List<DataPoint> points) {\r\n    if (points.length < 3) return 0;\r\n\r\n    // Calculate R-squared value for linear regression\r\n    final xValues = points.map((p) => p.timestamp.millisecondsSinceEpoch.toDouble()).toList();\r\n    final yValues = points.map((p) => p.value).toList();\r\n\r\n    double xMean = xValues.reduce((a, b) => a + b) / xValues.length;\r\n    double yMean = yValues.reduce((a, b) => a + b) / yValues.length;\r\n\r\n    double xxSum = xValues.map((x) => (x - xMean) * (x - xMean)).reduce((a, b) => a + b);\r\n    double yySum = yValues.map((y) => (y - yMean) * (y - yMean)).reduce((a, b) => a + b);\r\n    double xySum = xValues.asMap().entries.map((e) =>\r\n      (e.value - xMean) * (yValues[e.key] - yMean)).reduce((a, b) => a + b);\r\n\r\n    double correlation = xySum / (sqrt(xxSum) * sqrt(yySum));\r\n    return correlation * correlation; // R-squared value\r\n  }\r\n\r\n  TrendType _determineTrendType(double changeRate) {\r\n    if (changeRate.abs() < 0.5) return TrendType.stable;\r\n    if (changeRate.abs() >= rapidChangeThreshold) {\r\n      return changeRate > 0 ? TrendType.rapidIncrease : TrendType.rapidDecrease;\r\n    }\r\n    return changeRate > 0 ? TrendType.increasing : TrendType.decreasing;\r\n  }\r\n}\r\n\r\nclass TrendResult {\r\n  final TrendType type;\r\n  final double changeRate;\r\n  final double confidence;\r\n\r\n  TrendResult({\r\n    required this.type,\r\n    required this.changeRate,\r\n    required this.confidence,\r\n  });\r\n\r\n  bool get isReliable => confidence > 0.7;\r\n\r\n  String get description {\r\n    if (!isReliable) return 'Trend uncertain';\r\n    return switch (type) {\r\n      TrendType.stable => 'Parameter is stable',\r\n      TrendType.increasing => 'Gradually increasing',\r\n      TrendType.decreasing => 'Gradually decreasing',\r\n      TrendType.rapidIncrease => 'Rapidly increasing',\r\n      TrendType.rapidDecrease => 'Rapidly decreasing',\r\n    };\r\n  }\r\n}\r\n\r\ndouble sqrt(double x) => x <= 0 ? 0 : math.sqrt(x);"
        }
    ]
}