{
    "sourceFile": "lib/features/log/widgets/system_log_viewer.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734434065989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,8 @@\n \r\n import 'package:experiment_planner/features/log/models/system_log_entry.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n-import '../../../blocs/log/bloc/system_log_bloc.dart';\r\n-import '../../../blocs/log/bloc/system_log_event.dart';\r\n-import '../../../blocs/log/bloc/system_log_state.dart';\r\n import '../../components/models/system_component.dart';\r\n \r\n class SystemLogViewer extends StatefulWidget {\r\n   const SystemLogViewer({Key? key}) : super(key: key);\r\n"
                },
                {
                    "date": 1734434072441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n \r\n+import 'package:experiment_planner/features/log/bloc/system_log_bloc.dart';\r\n+import 'package:experiment_planner/features/log/bloc/system_log_event.dart';\r\n import 'package:experiment_planner/features/log/models/system_log_entry.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../components/models/system_component.dart';\r\n"
                }
            ],
            "date": 1734376760332,
            "name": "Commit-0",
            "content": "\r\nimport 'package:experiment_planner/features/log/models/system_log_entry.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/log/bloc/system_log_bloc.dart';\r\nimport '../../../blocs/log/bloc/system_log_event.dart';\r\nimport '../../../blocs/log/bloc/system_log_state.dart';\r\nimport '../../components/models/system_component.dart';\r\n\r\nclass SystemLogViewer extends StatefulWidget {\r\n  const SystemLogViewer({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<SystemLogViewer> createState() => _SystemLogViewerState();\r\n}\r\n\r\nclass _SystemLogViewerState extends State<SystemLogViewer> {\r\n  ComponentStatus? _severityFilter;\r\n  final TextEditingController _searchController = TextEditingController();\r\n  final ScrollController _scrollController = ScrollController();\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    context.read<SystemLogBloc>().add(LogEntriesLoaded());\r\n    _scrollController.addListener(_onScroll);\r\n  }\r\n\r\n  void _onScroll() {\r\n    if (_scrollController.position.pixels >=\r\n        _scrollController.position.maxScrollExtent - 200) {\r\n      // Load more entries when near bottom\r\n      context.read<SystemLogBloc>().add(LogEntriesLoaded(limit: 50));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Column(\r\n      children: [\r\n        _buildFilterBar(),\r\n        Expanded(\r\n          child: BlocBuilder<SystemLogBloc, SystemLogState>(\r\n            builder: (context, state) {\r\n              if (state.isLoading && state.entries.isEmpty) {\r\n                return const Center(child: CircularProgressIndicator());\r\n              }\r\n\r\n              if (state.entries.isEmpty) {\r\n                return const Center(child: Text('No log entries found'));\r\n              }\r\n\r\n              return RefreshIndicator(\r\n                onRefresh: () async {\r\n                  context.read<SystemLogBloc>().add(LogEntriesLoaded());\r\n                },\r\n                child: ListView.builder(\r\n                  controller: _scrollController,\r\n                  itemCount: state.entries.length + (state.isLoading ? 1 : 0),\r\n                  itemBuilder: (context, index) {\r\n                    if (index >= state.entries.length) {\r\n                      return const Center(\r\n                        child: Padding(\r\n                          padding: EdgeInsets.all(8.0),\r\n                          child: CircularProgressIndicator(),\r\n                        ),\r\n                      );\r\n                    }\r\n\r\n                    final entry = state.entries[index];\r\n                    return _LogEntryTile(entry: entry);\r\n                  },\r\n                ),\r\n              );\r\n            },\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildFilterBar() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: Row(\r\n        children: [\r\n          Expanded(\r\n            child: TextField(\r\n              controller: _searchController,\r\n              decoration: const InputDecoration(\r\n                hintText: 'Search logs...',\r\n                prefixIcon: Icon(Icons.search),\r\n              ),\r\n              onChanged: (value) {\r\n                // Implement search functionality\r\n              },\r\n            ),\r\n          ),\r\n          const SizedBox(width: 8),\r\n          DropdownButton<ComponentStatus>(\r\n            value: _severityFilter,\r\n            hint: const Text('Severity'),\r\n            items: ComponentStatus.values.map((status) {\r\n              return DropdownMenuItem(\r\n                value: status,\r\n                child: Text(status.toString().split('.').last),\r\n              );\r\n            }).toList(),\r\n            onChanged: (value) {\r\n              setState(() {\r\n                _severityFilter = value;\r\n              });\r\n              // Implement filter\r\n            },\r\n          ),\r\n          IconButton(\r\n            icon: const Icon(Icons.date_range),\r\n            onPressed: () => _showDateRangePicker(context),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _showDateRangePicker(BuildContext context) async {\r\n    final DateTimeRange? dateRange = await showDateRangePicker(\r\n      context: context,\r\n      firstDate: DateTime.now().subtract(const Duration(days: 365)),\r\n      lastDate: DateTime.now(),\r\n    );\r\n\r\n    if (dateRange != null) {\r\n      context.read<SystemLogBloc>().add(LogEntriesFiltered(\r\n        startDate: dateRange.start,\r\n        endDate: dateRange.end,\r\n        severityFilter: _severityFilter,\r\n      ));\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _searchController.dispose();\r\n    _scrollController.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nclass _LogEntryTile extends StatelessWidget {\r\n  final SystemLogEntry entry;\r\n\r\n  const _LogEntryTile({\r\n    Key? key,\r\n    required this.entry,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ListTile(\r\n      leading: _buildSeverityIcon(),\r\n      title: Text(entry.message),\r\n      subtitle: Text(\r\n        _formatDateTime(entry.timestamp),\r\n        style: Theme.of(context).textTheme.bodySmall,\r\n      ),\r\n      trailing: IconButton(\r\n        icon: const Icon(Icons.copy),\r\n        onPressed: () {\r\n          // Implement copy functionality\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSeverityIcon() {\r\n    final color = switch (entry.severity) {\r\n      ComponentStatus.normal => Colors.green,\r\n      ComponentStatus.warning => Colors.orange,\r\n      ComponentStatus.error => Colors.red,\r\n      ComponentStatus.ok => Colors.blue,\r\n    };\r\n\r\n    final icon = switch (entry.severity) {\r\n      ComponentStatus.normal => Icons.check_circle,\r\n      ComponentStatus.warning => Icons.warning,\r\n      ComponentStatus.error => Icons.error,\r\n      ComponentStatus.ok => Icons.check_circle_outline,\r\n    };\r\n\r\n    return Icon(icon, color: color);\r\n  }\r\n\r\n  String _formatDateTime(DateTime dateTime) {\r\n    return '${dateTime.year}-${dateTime.month.toString().padLeft(2, '0')}-'\r\n           '${dateTime.day.toString().padLeft(2, '0')} '\r\n           '${dateTime.hour.toString().padLeft(2, '0')}:'\r\n           '${dateTime.minute.toString().padLeft(2, '0')}:'\r\n           '${dateTime.second.toString().padLeft(2, '0')}';\r\n  }\r\n}"
        }
    ]
}