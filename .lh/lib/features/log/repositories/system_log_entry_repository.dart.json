{
    "sourceFile": "lib/features/log/repositories/system_log_entry_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734376760288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734456559982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,83 @@\n-\r\n-\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n import '../models/system_log_entry.dart';\r\n import '../../components/models/system_component.dart';\r\n \r\n-class SystemLogEntryRepository {\r\n+class SystemLogEntryRepository extends BaseRepository<SystemLogEntry> {\r\n+  static const int DEFAULT_LIMIT = 50;\r\n   final FirebaseFirestore _firestore;\r\n \r\n   SystemLogEntryRepository({FirebaseFirestore? firestore})\r\n-      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n+      : _firestore = firestore ?? FirebaseFirestore.instance,\r\n+        super('logs');\r\n \r\n-  Future<void> add(String message, ComponentStatus severity, {required String userId}) async {\r\n-    await _firestore.collection('users/$userId/logs').add({\r\n+  @override\r\n+  SystemLogEntry fromJson(Map<String, dynamic> json) =>\r\n+      SystemLogEntry.fromJson(json);\r\n+\r\n+  Future<void> addLogEntry(\r\n+    String message,\r\n+    ComponentStatus severity,\r\n+    {required String userId}\r\n+  ) async {\r\n+    final logEntry = SystemLogEntry(\r\n+      timestamp: DateTime.now(),\r\n+      message: message,\r\n+      severity: severity,\r\n+    );\r\n+\r\n+    final data = {\r\n+      ...logEntry.toJson(),\r\n       'timestamp': FieldValue.serverTimestamp(),\r\n-      'message': message,\r\n-      'severity': severity.toString().split('.').last,\r\n-    });\r\n+    };\r\n+\r\n+    await add(\r\n+      DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      logEntry,\r\n+      userId: userId,\r\n+    );\r\n   }\r\n \r\n-  Future<List<SystemLogEntry>> getRecentEntries(String userId, {int limit = 50}) async {\r\n-    final snapshot = await _firestore\r\n-        .collection('users/$userId/logs')\r\n+  Future<List<SystemLogEntry>> getRecentEntries(\r\n+    String userId,\r\n+    {int limit = DEFAULT_LIMIT}\r\n+  ) async {\r\n+    final snapshot = await getUserCollection(userId)\r\n         .orderBy('timestamp', descending: true)\r\n         .limit(limit)\r\n         .get();\r\n \r\n-    return snapshot.docs.map((doc) => SystemLogEntry.fromJson(doc.data())).toList();\r\n+    return snapshot.docs\r\n+        .map((doc) => fromJson(doc.data()))\r\n+        .toList();\r\n   }\r\n \r\n   Future<List<SystemLogEntry>> getEntriesByDateRange(\r\n     String userId,\r\n     DateTime startDate,\r\n     DateTime endDate,\r\n   ) async {\r\n-    final snapshot = await _firestore\r\n-        .collection('users/$userId/logs')\r\n+    final snapshot = await getUserCollection(userId)\r\n         .where('timestamp', isGreaterThanOrEqualTo: startDate)\r\n         .where('timestamp', isLessThanOrEqualTo: endDate)\r\n         .orderBy('timestamp', descending: true)\r\n         .get();\r\n \r\n-    return snapshot.docs.map((doc) => SystemLogEntry.fromJson(doc.data())).toList();\r\n+    return snapshot.docs\r\n+        .map((doc) => fromJson(doc.data()))\r\n+        .toList();\r\n   }\r\n+\r\n+  Stream<List<SystemLogEntry>> watchRecentLogs(\r\n+    String userId,\r\n+    {int limit = DEFAULT_LIMIT}\r\n+  ) {\r\n+    return getUserCollection(userId)\r\n+        .orderBy('timestamp', descending: true)\r\n+        .limit(limit)\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.docs\r\n+            .map((doc) => fromJson(doc.data()))\r\n+            .toList());\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734456612625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/shared/base/base_repository.dart';\r\n+import '../models/system_log_entry.dart';\r\n+import '../../components/models/system_component.dart';\r\n+\r\n+class SystemLogEntryRepository extends BaseRepository<SystemLogEntry> {\r\n+  static const int DEFAULT_LIMIT = 50;\r\n+\r\n+  SystemLogEntryRepository() : super('logs');\r\n+\r\n+  @override\r\n+  SystemLogEntry fromJson(Map<String, dynamic> json) =>\r\n+      SystemLogEntry.fromJson(json);\r\n+\r\n+  Future<void> addLogEntry(\r\n+    String message,\r\n+    ComponentStatus severity,\r\n+    {required String userId}\r\n+  ) async {\r\n+    final logEntry = SystemLogEntry(\r\n+      timestamp: DateTime.now(),\r\n+      message: message,\r\n+      severity: severity,\r\n+    );\r\n+\r\n+    await add(\r\n+      DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      logEntry,\r\n+      userId: userId,\r\n+    );\r\n+  }\r\n+\r\n+  Future<List<SystemLogEntry>> getRecentEntries(\r\n+    String userId,\r\n+    {int limit = DEFAULT_LIMIT}\r\n+  ) async {\r\n+    final snapshot = await getUserCollection(userId)\r\n+        .orderBy('timestamp', descending: true)\r\n+        .limit(limit)\r\n+        .get();\r\n+\r\n+    return snapshot.docs\r\n+        .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+\r\n+  Future<List<SystemLogEntry>> getEntriesByDateRange(\r\n+    String userId,\r\n+    DateTime startDate,\r\n+    DateTime endDate,\r\n+  ) async {\r\n+    final snapshot = await getUserCollection(userId)\r\n+        .where('timestamp', isGreaterThanOrEqualTo: startDate)\r\n+        .where('timestamp', isLessThanOrEqualTo: endDate)\r\n+        .orderBy('timestamp', descending: true)\r\n+        .get();\r\n+\r\n+    return snapshot.docs\r\n+        .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n+  }\r\n+\r\n+  Stream<List<SystemLogEntry>> watchRecentLogs(\r\n+    String userId,\r\n+    {int limit = DEFAULT_LIMIT}\r\n+  ) {\r\n+    return getUserCollection(userId)\r\n+        .orderBy('timestamp', descending: true)\r\n+        .limit(limit)\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.docs\r\n+            .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n+            .toList());\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734376760288,
            "name": "Commit-0",
            "content": "\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../models/system_log_entry.dart';\r\nimport '../../components/models/system_component.dart';\r\n\r\nclass SystemLogEntryRepository {\r\n  final FirebaseFirestore _firestore;\r\n\r\n  SystemLogEntryRepository({FirebaseFirestore? firestore})\r\n      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n\r\n  Future<void> add(String message, ComponentStatus severity, {required String userId}) async {\r\n    await _firestore.collection('users/$userId/logs').add({\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n      'message': message,\r\n      'severity': severity.toString().split('.').last,\r\n    });\r\n  }\r\n\r\n  Future<List<SystemLogEntry>> getRecentEntries(String userId, {int limit = 50}) async {\r\n    final snapshot = await _firestore\r\n        .collection('users/$userId/logs')\r\n        .orderBy('timestamp', descending: true)\r\n        .limit(limit)\r\n        .get();\r\n\r\n    return snapshot.docs.map((doc) => SystemLogEntry.fromJson(doc.data())).toList();\r\n  }\r\n\r\n  Future<List<SystemLogEntry>> getEntriesByDateRange(\r\n    String userId,\r\n    DateTime startDate,\r\n    DateTime endDate,\r\n  ) async {\r\n    final snapshot = await _firestore\r\n        .collection('users/$userId/logs')\r\n        .where('timestamp', isGreaterThanOrEqualTo: startDate)\r\n        .where('timestamp', isLessThanOrEqualTo: endDate)\r\n        .orderBy('timestamp', descending: true)\r\n        .get();\r\n\r\n    return snapshot.docs.map((doc) => SystemLogEntry.fromJson(doc.data())).toList();\r\n  }\r\n}"
        }
    ]
}