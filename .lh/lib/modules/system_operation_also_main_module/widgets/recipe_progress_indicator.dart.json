{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/recipe_progress_indicator.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734133375033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734133375033,
            "name": "Commit-0",
            "content": "// lib/modules/system_operation_also_main_module/widgets/recipe_progress_indicator.dart\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_state.dart';\r\nimport '../models/recipe.dart';\r\n\r\nclass RecipeProgressIndicator extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<RecipeBloc, RecipeState>(\r\n      builder: (context, state) {\r\n        if (state.activeRecipe == null) {\r\n          return SizedBox.shrink();\r\n        }\r\n\r\n        int totalSteps = state.activeRecipe!.steps.length;\r\n        int currentStep = state.currentStepIndex;\r\n        double progress = totalSteps > 0 ? currentStep / totalSteps : 0.0;\r\n\r\n        return Container(\r\n          width: 250,\r\n          padding: EdgeInsets.all(8),\r\n          decoration: BoxDecoration(\r\n            color: Colors.black54,\r\n            borderRadius: BorderRadius.circular(8),\r\n          ),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              Text(\r\n                'Recipe Progress: ${state.activeRecipe!.name}',\r\n                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),\r\n              ),\r\n              SizedBox(height: 4),\r\n              LinearProgressIndicator(value: progress),\r\n              SizedBox(height: 4),\r\n              Text(\r\n                state.executionStatus == RecipeExecutionStatus.running\r\n                    ? 'Step ${currentStep + 1} of $totalSteps'\r\n                    : _getStatusText(state.executionStatus),\r\n                style: TextStyle(color: Colors.white),\r\n              ),\r\n              if (state.executionStatus == RecipeExecutionStatus.running &&\r\n                  currentStep < totalSteps)\r\n                Text(\r\n                  _getStepDescription(state.activeRecipe!.steps[currentStep]),\r\n                  style: TextStyle(color: Colors.white70, fontSize: 12),\r\n                ),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  String _getStatusText(RecipeExecutionStatus status) {\r\n    switch (status) {\r\n      case RecipeExecutionStatus.completed:\r\n        return 'Recipe Completed';\r\n      case RecipeExecutionStatus.paused:\r\n        return 'Recipe Paused';\r\n      case RecipeExecutionStatus.error:\r\n        return 'Recipe Error';\r\n      case RecipeExecutionStatus.idle:\r\n        return 'Recipe Ready';\r\n      case RecipeExecutionStatus.running:\r\n        return 'Recipe Running';\r\n    }\r\n  }\r\n\r\n  String _getStepDescription(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        return 'Opening ${step.parameters['valveType'] == ValveType.valveA ? 'Valve A' : 'Valve B'} for ${step.parameters['duration']}s';\r\n      case StepType.purge:\r\n        return 'Purging for ${step.parameters['duration']}s';\r\n      case StepType.loop:\r\n        return 'Looping ${step.parameters['iterations']} times';\r\n      case StepType.setParameter:\r\n        return 'Setting ${step.parameters['parameter']} of ${step.parameters['component']} to ${step.parameters['value']}';\r\n      default:\r\n        return 'Unknown step type';\r\n    }\r\n  }\r\n}"
        }
    ]
}