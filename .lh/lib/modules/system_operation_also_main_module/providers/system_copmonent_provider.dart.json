{
    "sourceFile": "lib/modules/system_operation_also_main_module/providers/system_copmonent_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730098165119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730748856581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // lib/providers/system_component_provider.dart\r\n \r\n import 'package:flutter/foundation.dart';\r\n import '../../../repositories/system_component_repository.dart';\r\n-import '../../../utils/data_point_cache.dart';\r\n import '../models/system_component.dart';\r\n import '../models/data_point.dart';\r\n \r\n class SystemComponentProvider with ChangeNotifier {\r\n"
                },
                {
                    "date": 1730750203083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,12 @@\n \r\n   // cache datapoints\r\n   // final DataPointCache _dataPointCache = DataPointCache();\r\n \r\n-\r\n-\r\n-\r\n   // getter for components names\r\n   List<String> get componentNames => _components.keys.toList();\r\n   Map<String, SystemComponent> get components => {..._components};\r\n \r\n-\r\n-\r\n   Future<void> fetchComponents({String? userId}) async {\r\n     try {\r\n       final loadedComponents = await _repository.getAll(userId: userId);\r\n       _components.clear();\r\n@@ -61,9 +56,10 @@\n     return _components[componentId];\r\n   }\r\n \r\n   Future<void> updateComponentCurrentValues(\r\n-      String componentId, Map<String, double> newValues, {String? userId}) async {\r\n+      String componentId, Map<String, double> newValues,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.updateCurrentValues(newValues);\r\n       await _repository.update(componentId, component, userId: userId);\r\n@@ -71,9 +67,10 @@\n     }\r\n   }\r\n \r\n   Future<void> updateComponentSetValues(\r\n-      String componentId, Map<String, double> newSetValues, {String? userId}) async {\r\n+      String componentId, Map<String, double> newSetValues,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.updateSetValues(newSetValues);\r\n       await _repository.update(componentId, component, userId: userId);\r\n@@ -98,26 +95,51 @@\n       notifyListeners();\r\n     }\r\n   }\r\n \r\n-  Future<void> activateComponents(List<String> componentIds, {String? userId}) async {\r\n+  Future<void> activateComponents(List<String> componentIds,\r\n+      {String? userId}) async {\r\n     for (var componentId in componentIds) {\r\n       await activateComponent(componentId, userId: userId);\r\n     }\r\n   }\r\n \r\n-  Future<void> updateComponentStatus(String componentId, ComponentStatus newStatus, {String? userId}) async {\r\n+  Future<void> updateComponentStatus(\r\n+      String componentId, ComponentStatus newStatus,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null && component.status != newStatus) {\r\n       component.status = newStatus;\r\n       await _repository.update(componentId, component, userId: userId);\r\n       notifyListeners();\r\n     }\r\n   }\r\n \r\n-  Future<void> addErrorMessage(String componentId, String message, {String? userId}) async {\r\n+  Future<void> updateComponentValue(\r\n+      String componentId, String parameter, double newValue,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n+      // Update both set and current values\r\n+      component.setValues[parameter] = newValue;\r\n+      component.updateCurrentValues({parameter: newValue});\r\n+\r\n+      // Add to parameter history\r\n+      addParameterDataPoint(\r\n+        componentId,\r\n+        parameter,\r\n+        DataPoint(timestamp: DateTime.now(), value: newValue),\r\n+      );\r\n+\r\n+      await _repository.update(componentId, component, userId: userId);\r\n+      notifyListeners();\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> addErrorMessage(String componentId, String message,\r\n+      {String? userId}) async {\r\n+    final component = _components[componentId];\r\n+    if (component != null) {\r\n       component.addErrorMessage(message);\r\n       await _repository.update(componentId, component, userId: userId);\r\n       notifyListeners();\r\n     }\r\n@@ -132,17 +154,15 @@\n     }\r\n   }\r\n \r\n   Future<void> addParameterDataPoint(\r\n-      String componentId,\r\n-      String parameter,\r\n-      DataPoint dataPoint,\r\n-      {int maxDataPoints = 1000}\r\n-      ) async {\r\n+      String componentId, String parameter, DataPoint dataPoint,\r\n+      {int maxDataPoints = 1000}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       if (!component.parameterHistory.containsKey(parameter)) {\r\n-        component.parameterHistory[parameter] = CircularBuffer<DataPoint>(maxDataPoints);\r\n+        component.parameterHistory[parameter] =\r\n+            CircularBuffer<DataPoint>(maxDataPoints);\r\n       }\r\n       component.parameterHistory[parameter]!.add(dataPoint);\r\n       if (component.parameterHistory[parameter]!.length > maxDataPoints) {\r\n         component.parameterHistory[parameter]!.removeAt(0);\r\n@@ -167,28 +187,32 @@\n     });\r\n     return isReady;\r\n   }\r\n \r\n-\r\n-  Future<void> updateLastCheckDate(String componentId, DateTime date, {String? userId}) async {\r\n+  Future<void> updateLastCheckDate(String componentId, DateTime date,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.updateLastCheckDate(date);\r\n       await _repository.update(componentId, component, userId: userId);\r\n       notifyListeners();\r\n     }\r\n   }\r\n \r\n-  Future<void> updateMinValues(String componentId, Map<String, double> minValues, {String? userId}) async {\r\n+  Future<void> updateMinValues(\r\n+      String componentId, Map<String, double> minValues,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.updateMinValues(minValues);\r\n       await _repository.update(componentId, component, userId: userId);\r\n       notifyListeners();\r\n     }\r\n   }\r\n \r\n-  Future<void> updateMaxValues(String componentId, Map<String, double> maxValues, {String? userId}) async {\r\n+  Future<void> updateMaxValues(\r\n+      String componentId, Map<String, double> maxValues,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.updateMaxValues(maxValues);\r\n       await _repository.update(componentId, component, userId: userId);\r\n@@ -204,9 +228,11 @@\n     _components.clear();\r\n     notifyListeners();\r\n   }\r\n \r\n-  Future<void> setComponentSetValue(String componentId, String parameter, double newValue, {String? userId}) async {\r\n+  Future<void> setComponentSetValue(\r\n+      String componentId, String parameter, double newValue,\r\n+      {String? userId}) async {\r\n     final component = _components[componentId];\r\n     if (component != null) {\r\n       component.setValues[parameter] = newValue;\r\n       await _repository.update(componentId, component, userId: userId);\r\n@@ -217,7 +243,5 @@\n   void updateComponent(SystemComponent component) {\r\n     _components[component.id] = component;\r\n     notifyListeners();\r\n   }\r\n-\r\n-\r\n }\r\n"
                }
            ],
            "date": 1730098165119,
            "name": "Commit-0",
            "content": "// lib/providers/system_component_provider.dart\r\n\r\nimport 'package:flutter/foundation.dart';\r\nimport '../../../repositories/system_component_repository.dart';\r\nimport '../../../utils/data_point_cache.dart';\r\nimport '../models/system_component.dart';\r\nimport '../models/data_point.dart';\r\n\r\nclass SystemComponentProvider with ChangeNotifier {\r\n  final SystemComponentRepository _repository = SystemComponentRepository();\r\n  final Map<String, SystemComponent> _components = {};\r\n\r\n  // cache datapoints\r\n  // final DataPointCache _dataPointCache = DataPointCache();\r\n\r\n\r\n\r\n\r\n  // getter for components names\r\n  List<String> get componentNames => _components.keys.toList();\r\n  Map<String, SystemComponent> get components => {..._components};\r\n\r\n\r\n\r\n  Future<void> fetchComponents({String? userId}) async {\r\n    try {\r\n      final loadedComponents = await _repository.getAll(userId: userId);\r\n      _components.clear();\r\n      for (var component in loadedComponents) {\r\n        _components[component.id] = component;\r\n      }\r\n      notifyListeners();\r\n    } catch (e) {\r\n      print('Error fetching components: $e');\r\n      // You might want to handle this error more gracefully\r\n    }\r\n  }\r\n\r\n  Future<void> addComponent(SystemComponent component, {String? userId}) async {\r\n    try {\r\n      await _repository.add(component.id, component, userId: userId);\r\n      _components[component.id] = component;\r\n      notifyListeners();\r\n    } catch (e) {\r\n      print('Error adding component: $e');\r\n      // You might want to handle this error more gracefully\r\n    }\r\n  }\r\n\r\n  Future<void> removeComponent(String componentId, {String? userId}) async {\r\n    try {\r\n      await _repository.delete(componentId, userId: userId);\r\n      _components.remove(componentId);\r\n      notifyListeners();\r\n    } catch (e) {\r\n      print('Error removing component: $e');\r\n      // You might want to handle this error more gracefully\r\n    }\r\n  }\r\n\r\n  SystemComponent? getComponent(String componentId) {\r\n    return _components[componentId];\r\n  }\r\n\r\n  Future<void> updateComponentCurrentValues(\r\n      String componentId, Map<String, double> newValues, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.updateCurrentValues(newValues);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> updateComponentSetValues(\r\n      String componentId, Map<String, double> newSetValues, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.updateSetValues(newSetValues);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> activateComponent(String componentId, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null && !component.isActivated) {\r\n      component.isActivated = true;\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> deactivateComponent(String componentId, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null && component.isActivated) {\r\n      component.isActivated = false;\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> activateComponents(List<String> componentIds, {String? userId}) async {\r\n    for (var componentId in componentIds) {\r\n      await activateComponent(componentId, userId: userId);\r\n    }\r\n  }\r\n\r\n  Future<void> updateComponentStatus(String componentId, ComponentStatus newStatus, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null && component.status != newStatus) {\r\n      component.status = newStatus;\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> addErrorMessage(String componentId, String message, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.addErrorMessage(message);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> clearErrorMessages(String componentId, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.clearErrorMessages();\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> addParameterDataPoint(\r\n      String componentId,\r\n      String parameter,\r\n      DataPoint dataPoint,\r\n      {int maxDataPoints = 1000}\r\n      ) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      if (!component.parameterHistory.containsKey(parameter)) {\r\n        component.parameterHistory[parameter] = CircularBuffer<DataPoint>(maxDataPoints);\r\n      }\r\n      component.parameterHistory[parameter]!.add(dataPoint);\r\n      if (component.parameterHistory[parameter]!.length > maxDataPoints) {\r\n        component.parameterHistory[parameter]!.removeAt(0);\r\n      }\r\n      component.updateCurrentValues({parameter: dataPoint.value});\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  List<String> getSystemIssues() {\r\n    List<String> issues = [];\r\n    checkSystemReadiness(); // This will populate the issues list\r\n    return issues;\r\n  }\r\n\r\n  bool checkSystemReadiness() {\r\n    bool isReady = true;\r\n    _components.forEach((key, component) {\r\n      if (component.status != ComponentStatus.ok) {\r\n        isReady = false;\r\n      }\r\n    });\r\n    return isReady;\r\n  }\r\n\r\n\r\n  Future<void> updateLastCheckDate(String componentId, DateTime date, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.updateLastCheckDate(date);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> updateMinValues(String componentId, Map<String, double> minValues, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.updateMinValues(minValues);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> updateMaxValues(String componentId, Map<String, double> maxValues, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.updateMaxValues(maxValues);\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  Future<void> clearAllComponents({String? userId}) async {\r\n    final componentIds = _components.keys.toList();\r\n    for (var id in componentIds) {\r\n      await _repository.delete(id, userId: userId);\r\n    }\r\n    _components.clear();\r\n    notifyListeners();\r\n  }\r\n\r\n  Future<void> setComponentSetValue(String componentId, String parameter, double newValue, {String? userId}) async {\r\n    final component = _components[componentId];\r\n    if (component != null) {\r\n      component.setValues[parameter] = newValue;\r\n      await _repository.update(componentId, component, userId: userId);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  void updateComponent(SystemComponent component) {\r\n    _components[component.id] = component;\r\n    notifyListeners();\r\n  }\r\n\r\n\r\n}\r\n"
        }
    ]
}