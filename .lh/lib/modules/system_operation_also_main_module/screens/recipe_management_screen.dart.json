{
    "sourceFile": "lib/modules/system_operation_also_main_module/screens/recipe_management_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734130530822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734130530822,
            "name": "Commit-0",
            "content": "// lib/modules/system_operation_also_main_module/screens/recipe_management_screen.dart\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_bloc.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_event.dart';\r\nimport '../../../blocs/recipe/bloc/recipe_state.dart';\r\nimport '../models/recipe.dart';\r\nimport 'recipe_detail_screen.dart';\r\n\r\nclass RecipeManagementScreen extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocConsumer<RecipeBloc, RecipeState>(\r\n      listener: (context, state) {\r\n        if (state.error != null) {\r\n          ScaffoldMessenger.of(context).showSnackBar(\r\n            SnackBar(content: Text(state.error!)),\r\n          );\r\n        }\r\n      },\r\n      builder: (context, state) {\r\n        return Scaffold(\r\n          appBar: AppBar(\r\n            leading: IconButton(\r\n              icon: Icon(Icons.menu),\r\n              onPressed: () {\r\n                Scaffold.of(context).openDrawer();\r\n              },\r\n            ),\r\n            title: Text(\r\n              'Recipe Management',\r\n              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n            ),\r\n            actions: [\r\n              IconButton(\r\n                icon: Icon(Icons.add, size: 28),\r\n                onPressed: () => _navigateToRecipeDetail(context),\r\n              ),\r\n            ],\r\n          ),\r\n          body: state.isLoading\r\n              ? Center(child: CircularProgressIndicator())\r\n              : _buildRecipeList(context, state),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildRecipeList(BuildContext context, RecipeState state) {\r\n    if (state.recipes.isEmpty) {\r\n      return Center(\r\n        child: Text('No recipes available'),\r\n      );\r\n    }\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: ListView.builder(\r\n        itemCount: state.recipes.length,\r\n        itemBuilder: (context, index) {\r\n          final recipe = state.recipes[index];\r\n          return Card(\r\n            elevation: 2,\r\n            margin: EdgeInsets.symmetric(vertical: 8),\r\n            child: ListTile(\r\n              contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n              title: Text(\r\n                recipe.name,\r\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),\r\n              ),\r\n              subtitle: Text(\r\n                'Steps: ${recipe.steps.length}',\r\n                style: TextStyle(color: Colors.grey[700]),\r\n              ),\r\n              trailing: Row(\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  IconButton(\r\n                    icon: Icon(Icons.edit, color: Colors.blue),\r\n                    onPressed: () => _navigateToRecipeDetail(context, recipeId: recipe.id),\r\n                  ),\r\n                  IconButton(\r\n                    icon: Icon(Icons.delete, color: Colors.red),\r\n                    onPressed: () => _confirmDeleteRecipe(context, recipe),\r\n                  ),\r\n                ],\r\n              ),\r\n              onTap: () => _showRecipeDetails(context, recipe),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _navigateToRecipeDetail(BuildContext context, {String? recipeId}) async {\r\n    final result = await Navigator.push(\r\n      context,\r\n      MaterialPageRoute(\r\n        builder: (context) => RecipeDetailScreen(recipeId: recipeId),\r\n      ),\r\n    );\r\n\r\n    if (result == true) {\r\n      // Recipe was saved, refresh the list\r\n      context.read<RecipeBloc>().add(LoadRecipes());\r\n    }\r\n  }\r\n\r\n  void _confirmDeleteRecipe(BuildContext context, Recipe recipe) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text(\r\n            'Confirm Delete',\r\n            style: TextStyle(fontWeight: FontWeight.bold),\r\n          ),\r\n          content: Text('Are you sure you want to delete the recipe \"${recipe.name}\"?'),\r\n          actions: <Widget>[\r\n            TextButton(\r\n              child: Text('Cancel'),\r\n              onPressed: () => Navigator.of(context).pop(),\r\n            ),\r\n            TextButton(\r\n              child: Text('Delete'),\r\n              onPressed: () {\r\n                context.read<RecipeBloc>().add(DeleteRecipe(recipe.id));\r\n                Navigator.of(context).pop();\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showRecipeDetails(BuildContext context, Recipe recipe) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text(\r\n            recipe.name,\r\n            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\r\n          ),\r\n          content: SingleChildScrollView(\r\n            child: ListBody(\r\n              children: <Widget>[\r\n                Text('Substrate: ${recipe.substrate}'),\r\n                SizedBox(height: 10),\r\n                Text(\r\n                  'Steps:',\r\n                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                ),\r\n                ...recipe.steps.map((step) => Padding(\r\n                  padding: EdgeInsets.only(left: 10, top: 5),\r\n                  child: Text('- ${_getStepDescription(step)}', style: TextStyle(fontSize: 14)),\r\n                )).toList(),\r\n              ],\r\n            ),\r\n          ),\r\n          actions: <Widget>[\r\n            TextButton(\r\n              child: Text('Close'),\r\n              onPressed: () => Navigator.of(context).pop(),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  String _getStepDescription(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        return 'Open ${step.parameters['valveType']} for ${step.parameters['duration']}s';\r\n      case StepType.purge:\r\n        return 'Purge for ${step.parameters['duration']}s';\r\n      case StepType.loop:\r\n        return 'Loop ${step.parameters['iterations']} times';\r\n      case StepType.setParameter:\r\n        return 'Set ${step.parameters['parameter']} of ${step.parameters['component']} to ${step.parameters['value']}';\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  }\r\n}"
        }
    ]
}