{
    "sourceFile": "lib/modules/maintenance_module/widgets/calibration_history_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734045656400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734046308987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n class CalibrationHistoryWidget extends StatelessWidget {\r\n   final String? componentId;\r\n   final Function(String) getComponentName;\r\n \r\n+  // Keep existing parameters and add new ones\r\n   const CalibrationHistoryWidget({\r\n     Key? key,\r\n     this.componentId,\r\n     required this.getComponentName,\r\n"
                }
            ],
            "date": 1734045656400,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_bloc.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_event.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_state.dart';\r\nimport '../models/calibration_record.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\nclass CalibrationHistoryWidget extends StatelessWidget {\r\n  final String? componentId;\r\n  final Function(String) getComponentName;\r\n\r\n  const CalibrationHistoryWidget({\r\n    Key? key,\r\n    this.componentId,\r\n    required this.getComponentName,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<CalibrationBloc, CalibrationState>(\r\n      builder: (context, state) {\r\n        if (state.isLoading) {\r\n          return Center(child: CircularProgressIndicator());\r\n        }\r\n\r\n        if (state.error != null) {\r\n          return Center(child: Text('Error: ${state.error}'));\r\n        }\r\n\r\n        List<CalibrationRecord> records = componentId != null\r\n            ? state.calibrationRecords.where((record) => record.componentId == componentId).toList()\r\n            : state.calibrationRecords;\r\n\r\n        records.sort((a, b) => b.calibrationDate.compareTo(a.calibrationDate));\r\n\r\n        if (records.isEmpty) {\r\n          return Center(child: Text('No calibration records found.'));\r\n        }\r\n\r\n        return ListView.builder(\r\n          shrinkWrap: true,\r\n          physics: NeverScrollableScrollPhysics(),\r\n          itemCount: records.length,\r\n          itemBuilder: (context, index) {\r\n            return _buildCalibrationRecordItem(context, records[index]);\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildCalibrationRecordItem(BuildContext context, CalibrationRecord record) {\r\n    final DateFormat formatter = DateFormat('MMM dd, yyyy HH:mm');\r\n\r\n    return Card(\r\n      child: ExpansionTile(\r\n        title: Text('Calibration on ${formatter.format(record.calibrationDate)}'),\r\n        subtitle: Text('Component: ${getComponentName(record.componentId)}'),\r\n        children: [\r\n          Padding(\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                Text('Performed by: ${record.performedBy}'),\r\n                SizedBox(height: 8),\r\n                Text('Calibration Data:'),\r\n                ...record.calibrationData.entries.map(\r\n                      (entry) => Padding(\r\n                    padding: const EdgeInsets.only(left: 16.0),\r\n                    child: Text('${entry.key}: ${entry.value}'),\r\n                  ),\r\n                ),\r\n                SizedBox(height: 8),\r\n                Text('Notes: ${record.notes}'),\r\n                SizedBox(height: 16),\r\n                Row(\r\n                  mainAxisAlignment: MainAxisAlignment.end,\r\n                  children: [\r\n                    TextButton(\r\n                      onPressed: () {\r\n                        BlocProvider.of<CalibrationBloc>(context)\r\n                            .add(DeleteCalibrationRecord(record.id));\r\n                        ScaffoldMessenger.of(context).showSnackBar(\r\n                          SnackBar(content: Text('Calibration record deleted')),\r\n                        );\r\n                      },\r\n                      child: Text('Delete'),\r\n                      style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n                    ),\r\n                    SizedBox(width: 16),\r\n                    ElevatedButton(\r\n                      onPressed: () {\r\n                        BlocProvider.of<CalibrationBloc>(context)\r\n                            .add(UpdateCalibrationRecord(record));\r\n                        ScaffoldMessenger.of(context).showSnackBar(\r\n                          SnackBar(content: Text('Calibration record updated')),\r\n                        );\r\n                      },\r\n                      child: Text('Edit'),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}