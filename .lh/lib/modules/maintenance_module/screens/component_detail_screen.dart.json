{
    "sourceFile": "lib/modules/maintenance_module/screens/component_detail_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734045674000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734045713718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n // lib/modules/maintenance_module/screens/component_detail_screen.dart\r\n \r\n+import 'package:experiment_planner/modules/maintenance_module/screens/calibration_screen.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_bloc/flutter_bloc.dart';\r\n import '../../../blocs/component/bloc/component_bloc.dart';\r\n import '../../../blocs/calibration/bloc/calibration_bloc.dart';\r\n import '../../../blocs/component/bloc/component_event.dart';\r\n import '../../../blocs/component/bloc/component_state.dart';\r\n import '../../../blocs/calibration/bloc/calibration_event.dart';\r\n import '../../../blocs/calibration/bloc/calibration_state.dart';\r\n-import '../models/system_component.dart';\r\n import '../models/calibration_record.dart';\r\n import '../widgets/maintenance_task_list.dart';\r\n import '../widgets/calibration_history_widget.dart';\r\n import '../widgets/component_status_update_dialog.dart';\r\n"
                },
                {
                    "date": 1734045860156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,12 @@\n               'Maintenance Tasks',\r\n               style: Theme.of(context).textTheme.titleLarge,\r\n             ),\r\n             const SizedBox(height: 8),\r\n-            MaintenanceTaskList(componentId: component.id),\r\n+            MaintenanceTaskList(\r\n+              tasks: component.maintenanceTasks ?? [], // Assuming component has maintenanceTasks property\r\n+              showComponentName: true,\r\n+            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n@@ -202,9 +205,12 @@\n                 const SizedBox(height: 8),\r\n                 if (calibrationState.isLoading)\r\n                   const Center(child: CircularProgressIndicator())\r\n                 else\r\n-                  CalibrationHistoryWidget(componentId: component.id),\r\n+                  CalibrationHistoryWidget(\r\n+                    componentId: component.id,\r\n+                    getComponentName: (id) => component.name, // Use component name directly or implement proper lookup\r\n+                  ),\r\n               ],\r\n             ),\r\n           ),\r\n         );\r\n@@ -238,11 +244,11 @@\n       builder: (context) => CalibrationEditDialog(\r\n         calibrationRecord: CalibrationRecord(\r\n           id: '',\r\n           componentId: component.id,\r\n-          componentName: component.name,\r\n+          calibrationDate: DateTime.now(),\r\n           performedBy: '',\r\n-          calibrationDate: DateTime.now(),\r\n+          calibrationData: {}, // Initialize with empty map\r\n           notes: '',\r\n         ),\r\n         onSave: (record) {\r\n           context.read<CalibrationBloc>().add(AddCalibrationRecord(record));\r\n"
                }
            ],
            "date": 1734045674000,
            "name": "Commit-0",
            "content": "// lib/modules/maintenance_module/screens/component_detail_screen.dart\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_bloc.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_bloc.dart';\r\nimport '../../../blocs/component/bloc/component_event.dart';\r\nimport '../../../blocs/component/bloc/component_state.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_event.dart';\r\nimport '../../../blocs/calibration/bloc/calibration_state.dart';\r\nimport '../models/system_component.dart';\r\nimport '../models/calibration_record.dart';\r\nimport '../widgets/maintenance_task_list.dart';\r\nimport '../widgets/calibration_history_widget.dart';\r\nimport '../widgets/component_status_update_dialog.dart';\r\nimport 'maintenance_procedures_list_screen.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\nclass ComponentDetailScreen extends StatefulWidget {\r\n  final String componentName;\r\n\r\n  const ComponentDetailScreen({\r\n    Key? key,\r\n    required this.componentName,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<ComponentDetailScreen> createState() => _ComponentDetailScreenState();\r\n}\r\n\r\nclass _ComponentDetailScreenState extends State<ComponentDetailScreen> {\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    // Initialize both blocs\r\n    context.read<ComponentBloc>().add(ComponentInitialized(widget.componentName));\r\n    context.read<CalibrationBloc>().add(LoadCalibrationRecords());\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MultiBlocListener(\r\n      listeners: [\r\n        BlocListener<ComponentBloc, ComponentState>(\r\n          listener: (context, state) {\r\n            if (state.error != null) {\r\n              _showErrorSnackBar(context, state.error!);\r\n            }\r\n          },\r\n        ),\r\n        BlocListener<CalibrationBloc, CalibrationState>(\r\n          listener: (context, state) {\r\n            if (state.error != null) {\r\n              _showErrorSnackBar(context, state.error!);\r\n            }\r\n          },\r\n        ),\r\n      ],\r\n      child: BlocBuilder<ComponentBloc, ComponentState>(\r\n        builder: (context, componentState) {\r\n          if (componentState.isLoading) {\r\n            return const Scaffold(\r\n              body: Center(child: CircularProgressIndicator()),\r\n            );\r\n          }\r\n\r\n          final component = componentState.component;\r\n          if (component == null) {\r\n            return const Scaffold(\r\n              body: Center(child: Text('Component not found')),\r\n            );\r\n          }\r\n\r\n          return Scaffold(\r\n            appBar: AppBar(\r\n              title: Text(component.name),\r\n              actions: [\r\n                IconButton(\r\n                  icon: const Icon(Icons.edit),\r\n                  onPressed: () => _showStatusUpdateDialog(context, component),\r\n                ),\r\n              ],\r\n            ),\r\n            body: RefreshIndicator(\r\n              onRefresh: () async {\r\n                context.read<ComponentBloc>()\r\n                    .add(ComponentInitialized(widget.componentName));\r\n                context.read<CalibrationBloc>().add(LoadCalibrationRecords());\r\n              },\r\n              child: SingleChildScrollView(\r\n                physics: const AlwaysScrollableScrollPhysics(),\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(16.0),\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      _buildComponentInfo(component),\r\n                      const SizedBox(height: 24),\r\n                      _buildMaintenanceTasks(component),\r\n                      const SizedBox(height: 24),\r\n                      _buildCalibrationHistory(component),\r\n                      const SizedBox(height: 24),\r\n                      ElevatedButton(\r\n                        onPressed: () => _navigateToMaintenanceProcedures(\r\n                          context,\r\n                          component,\r\n                        ),\r\n                        child: const Text('View Maintenance Procedures'),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildComponentInfo(SystemComponent component) {\r\n    return Card(\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              'Component Details',\r\n              style: Theme.of(context).textTheme.titleLarge,\r\n            ),\r\n            const SizedBox(height: 8),\r\n            Text('Type: ${component.type}'),\r\n            Text('Status: ${component.status.toString().split('.').last}'),\r\n            Text(\r\n              'Last Maintenance: ${DateFormat('yyyy-MM-dd').format(component.lastMaintenanceDate)}',\r\n            ),\r\n            const SizedBox(height: 16),\r\n            Text(\r\n              'Current Values:',\r\n              style: Theme.of(context).textTheme.titleMedium,\r\n            ),\r\n            ...component.currentValues.entries.map(\r\n              (entry) => Padding(\r\n                padding: const EdgeInsets.only(left: 16.0, top: 4.0),\r\n                child: Text(\r\n                  '${entry.key}: ${entry.value.toStringAsFixed(2)}',\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildMaintenanceTasks(SystemComponent component) {\r\n    return Card(\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              'Maintenance Tasks',\r\n              style: Theme.of(context).textTheme.titleLarge,\r\n            ),\r\n            const SizedBox(height: 8),\r\n            MaintenanceTaskList(componentId: component.id),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildCalibrationHistory(SystemComponent component) {\r\n    return BlocBuilder<CalibrationBloc, CalibrationState>(\r\n      builder: (context, calibrationState) {\r\n        return Card(\r\n          child: Padding(\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                Row(\r\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                  children: [\r\n                    Text(\r\n                      'Calibration History',\r\n                      style: Theme.of(context).textTheme.titleLarge,\r\n                    ),\r\n                    IconButton(\r\n                      icon: const Icon(Icons.add),\r\n                      onPressed: () => _showAddCalibrationDialog(\r\n                        context,\r\n                        component,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n                const SizedBox(height: 8),\r\n                if (calibrationState.isLoading)\r\n                  const Center(child: CircularProgressIndicator())\r\n                else\r\n                  CalibrationHistoryWidget(componentId: component.id),\r\n              ],\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showStatusUpdateDialog(\r\n    BuildContext context,\r\n    SystemComponent component,\r\n  ) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => ComponentStatusUpdateDialog(\r\n        component: component,\r\n        onUpdate: (newStatus, notes) {\r\n          context.read<ComponentBloc>().add(\r\n                ComponentStatusUpdated(component.name, newStatus),\r\n              );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showAddCalibrationDialog(\r\n    BuildContext context,\r\n    SystemComponent component,\r\n  ) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => CalibrationEditDialog(\r\n        calibrationRecord: CalibrationRecord(\r\n          id: '',\r\n          componentId: component.id,\r\n          componentName: component.name,\r\n          performedBy: '',\r\n          calibrationDate: DateTime.now(),\r\n          notes: '',\r\n        ),\r\n        onSave: (record) {\r\n          context.read<CalibrationBloc>().add(AddCalibrationRecord(record));\r\n        },\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _navigateToMaintenanceProcedures(\r\n    BuildContext context,\r\n    SystemComponent component,\r\n  ) {\r\n    Navigator.of(context).push(\r\n      MaterialPageRoute(\r\n        builder: (context) => MaintenanceProceduresListScreen(\r\n          componentId: component.id,\r\n          componentName: component.name,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showErrorSnackBar(BuildContext context, String message) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text(message),\r\n        behavior: SnackBarBehavior.floating,\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}