{
    "sourceFile": "lib/modules/maintenance_module/screens/calibration_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734046557220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734046557220,
            "name": "Commit-0",
            "content": "// lib/screens/calibration_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport '../../../enums/navigation_item.dart';\r\nimport '../../../utils/navigation_helper.dart';\r\nimport '../../../widgets/app_drawer.dart';\r\nimport '../../../widgets/custom_app_bar.dart';\r\nimport '../widgets/calibration_history_widget.dart';\r\nimport '../providers/calibration_provider.dart';\r\nimport '../models/calibration_procedure.dart';\r\nimport '../models/calibration_record.dart';\r\nimport './calibration_procedure_screen.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\nclass CalibrationScreen extends StatefulWidget {\r\n  @override\r\n  _CalibrationScreenState createState() => _CalibrationScreenState();\r\n}\r\n\r\nclass _CalibrationScreenState extends State<CalibrationScreen> {\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    Future.microtask(() => _fetchCalibrationData());\r\n  }\r\n\r\n  Future<void> _fetchCalibrationData() async {\r\n    final calibrationProvider = Provider.of<CalibrationProvider>(context, listen: false);\r\n    await calibrationProvider.fetchCalibrationRecords();\r\n    await calibrationProvider.fetchCalibrationProcedures();\r\n    await calibrationProvider.fetchComponentNames();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: CustomAppBar(\r\n        title: 'Calibration',\r\n        onDrawerIconPressed: () => Scaffold.of(context).openDrawer(),\r\n      ),\r\n      drawer: AppDrawer(\r\n        onSelectItem: (item) {\r\n          Navigator.pop(context); // Close the drawer\r\n          handleNavigation(context, item);\r\n        },\r\n        selectedItem: NavigationItem.mainDashboard,\r\n      ),\r\n      body: Consumer<CalibrationProvider>(\r\n        builder: (ctx, calibrationProvider, _) {\r\n          if (calibrationProvider.isLoading) {\r\n            return Center(child: CircularProgressIndicator());\r\n          }\r\n          return SingleChildScrollView(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16.0),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Text(\r\n                    'Calibration Procedures',\r\n                    style: Theme.of(context).textTheme.titleLarge,\r\n                  ),\r\n                  SizedBox(height: 16),\r\n                  ...calibrationProvider.calibrationProcedures.map((procedure) =>\r\n                      ListTile(\r\n                        title: Text(procedure.componentName),\r\n                        trailing: Icon(Icons.arrow_forward_ios),\r\n                        onTap: () => _showCalibrationProcedure(context, procedure),\r\n                      ),\r\n                  ).toList(),\r\n                  SizedBox(height: 32),\r\n                  Text(\r\n                    'Calibration History',\r\n                    style: Theme.of(context).textTheme.titleLarge,\r\n                  ),\r\n                  SizedBox(height: 16),\r\n                  CalibrationHistoryWidget(\r\n                    componentId: null, // or pass specific component ID if needed\r\n                    getComponentName: (id) => calibrationProvider.getComponentName(id),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () => _addNewCalibrationRecord(context),\r\n        child: Icon(Icons.add),\r\n        tooltip: 'Add new calibration',\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showCalibrationProcedure(BuildContext context, CalibrationProcedure procedure) {\r\n    Navigator.of(context).push(\r\n      MaterialPageRoute(\r\n        builder: (context) => CalibrationProcedureScreen(procedure: procedure),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showEditCalibrationDialog(BuildContext context, CalibrationRecord record, Function(CalibrationRecord) onSave) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return CalibrationEditDialog(\r\n          calibrationRecord: record,\r\n          onSave: onSave,\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showDeleteConfirmationDialog(BuildContext context, CalibrationRecord record, Function() onDelete) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return AlertDialog(\r\n          title: Text('Delete Calibration Record'),\r\n          content: Text('Are you sure you want to delete this calibration record?'),\r\n          actions: <Widget>[\r\n            TextButton(\r\n              child: Text('Cancel'),\r\n              onPressed: () {\r\n                Navigator.of(context).pop();\r\n              },\r\n            ),\r\n            TextButton(\r\n              child: Text('Delete'),\r\n              onPressed: () {\r\n                onDelete();\r\n                Navigator.of(context).pop();\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _addNewCalibrationRecord(BuildContext context) {\r\n    final calibrationProvider = Provider.of<CalibrationProvider>(context, listen: false);\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return CalibrationEditDialog(\r\n          calibrationRecord: CalibrationRecord(\r\n            id: DateTime.now().toString(),\r\n            componentId: '',\r\n            calibrationDate: DateTime.now(),\r\n            performedBy: '',\r\n            calibrationData: {},\r\n            notes: '',\r\n          ),\r\n          onSave: (newRecord) {\r\n            calibrationProvider.addCalibrationRecord(newRecord);\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass CalibrationEditDialog extends StatefulWidget {\r\n  final CalibrationRecord calibrationRecord;\r\n  final Function(CalibrationRecord) onSave;\r\n\r\n  CalibrationEditDialog({required this.calibrationRecord, required this.onSave});\r\n\r\n  @override\r\n  _CalibrationEditDialogState createState() => _CalibrationEditDialogState();\r\n}\r\n\r\nclass _CalibrationEditDialogState extends State<CalibrationEditDialog> {\r\n  late TextEditingController _componentIdController;\r\n  late TextEditingController _performedByController;\r\n  late TextEditingController _notesController;\r\n  late DateTime _calibrationDate;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _componentIdController = TextEditingController(text: widget.calibrationRecord.componentId);\r\n    _performedByController = TextEditingController(text: widget.calibrationRecord.performedBy);\r\n    _notesController = TextEditingController(text: widget.calibrationRecord.notes);\r\n    _calibrationDate = widget.calibrationRecord.calibrationDate;\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AlertDialog(\r\n      title: Text(widget.calibrationRecord.id.isEmpty ? 'Add Calibration Record' : 'Edit Calibration Record'),\r\n      content: SingleChildScrollView(\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: <Widget>[\r\n            TextField(\r\n              controller: _componentIdController,\r\n              decoration: InputDecoration(labelText: 'Component ID'),\r\n            ),\r\n            TextField(\r\n              controller: _performedByController,\r\n              decoration: InputDecoration(labelText: 'Performed By'),\r\n            ),\r\n            ListTile(\r\n              title: Text('Calibration Date'),\r\n              subtitle: Text(DateFormat('yyyy-MM-dd').format(_calibrationDate)),\r\n              trailing: Icon(Icons.calendar_today),\r\n              onTap: () async {\r\n                final DateTime? picked = await showDatePicker(\r\n                  context: context,\r\n                  initialDate: _calibrationDate,\r\n                  firstDate: DateTime(2000),\r\n                  lastDate: DateTime.now(),\r\n                );\r\n                if (picked != null && picked != _calibrationDate) {\r\n                  setState(() {\r\n                    _calibrationDate = picked;\r\n                  });\r\n                }\r\n              },\r\n            ),\r\n            TextField(\r\n              controller: _notesController,\r\n              decoration: InputDecoration(labelText: 'Notes'),\r\n              maxLines: 3,\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n      actions: <Widget>[\r\n        TextButton(\r\n          child: Text('Cancel'),\r\n          onPressed: () {\r\n            Navigator.of(context).pop();\r\n          },\r\n        ),\r\n        TextButton(\r\n          child: Text('Save'),\r\n          onPressed: () {\r\n            final updatedRecord = widget.calibrationRecord.copyWith(\r\n              componentId: _componentIdController.text,\r\n              performedBy: _performedByController.text,\r\n              calibrationDate: _calibrationDate,\r\n              notes: _notesController.text,\r\n            );\r\n            widget.onSave(updatedRecord);\r\n            Navigator.of(context).pop();\r\n          },\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _componentIdController.dispose();\r\n    _performedByController.dispose();\r\n    _notesController.dispose();\r\n    super.dispose();\r\n  }\r\n}"
        }
    ]
}