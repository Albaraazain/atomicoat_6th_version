{
    "sourceFile": "lib/repositories/component_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734155195770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734271270328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,113 +1,71 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/data_point.dart';\r\n+import '../../utils/data_point_cache.dart';\r\n+\r\n class ComponentRepository {\r\n-  final AuthService _authService;\r\n+  final FirebaseFirestore _firestore;\r\n+  final DataPointCache _dataPointCache;\r\n \r\n-  ComponentRepository(this._authService);\r\n+  ComponentRepository({FirebaseFirestore? firestore})\r\n+    : _firestore = firestore ?? FirebaseFirestore.instance,\r\n+      _dataPointCache = DataPointCache();\r\n \r\n+  CollectionReference get componentsCollection =>\r\n+      _firestore.collection('components');\r\n+\r\n+  Future<SystemComponent?> getComponent(String name) async {\r\n+    final doc = await componentsCollection.doc(name).get();\r\n+    if (!doc.exists) return null;\r\n+    return SystemComponent.fromJson(doc.data() as Map<String, dynamic>);\r\n+  }\r\n+\r\n   Future<List<SystemComponent>> getAllComponents() async {\r\n-    // Create test data for all components\r\n-    return [\r\n-      _createTestComponent(\r\n-        'Nitrogen Generator',\r\n-        'flow_rate',\r\n-        50.0,\r\n-        45.0,\r\n-        55.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'MFC',\r\n-        'flow_rate',\r\n-        30.0,\r\n-        25.0,\r\n-        35.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Backline Heater',\r\n-        'temperature',\r\n-        200.0,\r\n-        195.0,\r\n-        205.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Frontline Heater',\r\n-        'temperature',\r\n-        250.0,\r\n-        245.0,\r\n-        255.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Precursor Heater 1',\r\n-        'temperature',\r\n-        180.0,\r\n-        175.0,\r\n-        185.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Precursor Heater 2',\r\n-        'temperature',\r\n-        190.0,\r\n-        185.0,\r\n-        195.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Reaction Chamber',\r\n-        'pressure',\r\n-        1.0,\r\n-        0.8,\r\n-        1.2,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Pressure Control System',\r\n-        'pressure',\r\n-        1.5,\r\n-        1.3,\r\n-        1.7,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Vacuum Pump',\r\n-        'power',\r\n-        80.0,\r\n-        75.0,\r\n-        85.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Valve 1',\r\n-        'status',\r\n-        1.0,\r\n-        0.0,\r\n-        1.0,\r\n-      ),\r\n-      _createTestComponent(\r\n-        'Valve 2',\r\n-        'status',\r\n-        1.0,\r\n-        0.0,\r\n-        1.0,\r\n-      ),\r\n-    ];\r\n+    final snapshot = await componentsCollection.get();\r\n+    return snapshot.docs\r\n+        .map((doc) => SystemComponent.fromJson(doc.data() as Map<String, dynamic>))\r\n+        .toList();\r\n   }\r\n \r\n-  SystemComponent _createTestComponent(\r\n-    String name,\r\n-    String parameter,\r\n-    double setValue,\r\n-    double minValue,\r\n-    double maxValue,\r\n-  ) {\r\n-    final now = DateTime.now();\r\n-    final history = List.generate(\r\n-      10,\r\n-      (index) => DataPoint(\r\n-        now.subtract(Duration(minutes: 9 - index)),\r\n-        minValue + (Random().nextDouble() * (maxValue - minValue)),\r\n-      ),\r\n+  Stream<SystemComponent?> watchComponent(String componentName) {\r\n+    return componentsCollection\r\n+        .doc(componentName)\r\n+        .snapshots()\r\n+        .map((snapshot) => snapshot.exists\r\n+            ? SystemComponent.fromJson(snapshot.data() as Map<String, dynamic>)\r\n+            : null);\r\n+  }\r\n+\r\n+  Future<void> saveComponentState(SystemComponent component) async {\r\n+    await componentsCollection.doc(component.name).set(\r\n+      component.toJson(),\r\n+      SetOptions(merge: true),\r\n     );\r\n+  }\r\n \r\n-    return SystemComponent(\r\n-      name: name,\r\n-      isActivated: true,\r\n-      currentValues: {parameter: setValue},\r\n-      setValues: {parameter: setValue},\r\n-      parameterHistory: {parameter: history},\r\n+  void cacheDataPoint(\r\n+    String componentName,\r\n+    String parameter,\r\n+    DataPoint dataPoint, {\r\n+    int maxPoints = DataPointCache.DEFAULT_MAX_POINTS,\r\n+  }) {\r\n+    _dataPointCache.addDataPoint(\r\n+      componentName,\r\n+      parameter,\r\n+      dataPoint,\r\n+      maxPoints: maxPoints,\r\n     );\r\n   }\r\n-}\r\n+\r\n+  List<DataPoint> getCachedDataPoints(String componentName, String parameter) {\r\n+    return _dataPointCache.getDataPoints(componentName, parameter);\r\n+  }\r\n+\r\n+  DataPoint? getLatestDataPoint(String componentName, String parameter) {\r\n+    return _dataPointCache.getLatestDataPoint(componentName, parameter);\r\n+  }\r\n+\r\n+  void clearCache() {\r\n+    _dataPointCache.clearAll();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734272921225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,67 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/data_point.dart';\r\n-import '../../utils/data_point_cache.dart';\r\n+import '../../../modules/system_operation_also_main_module/models/system_component.dart';\r\n+import '../../../services/auth_service.dart';\r\n+import '../../../utils/data_point_cache.dart';\r\n \r\n class ComponentRepository {\r\n+  final AuthService _authService;\r\n   final FirebaseFirestore _firestore;\r\n   final DataPointCache _dataPointCache;\r\n \r\n-  ComponentRepository({FirebaseFirestore? firestore})\r\n-    : _firestore = firestore ?? FirebaseFirestore.instance,\r\n-      _dataPointCache = DataPointCache();\r\n+  ComponentRepository(this._authService)\r\n+      : _firestore = FirebaseFirestore.instance,\r\n+        _dataPointCache = DataPointCache();\r\n \r\n   CollectionReference get componentsCollection =>\r\n-      _firestore.collection('components');\r\n+      _firestore.collection('system_components');\r\n \r\n   Future<SystemComponent?> getComponent(String name) async {\r\n-    final doc = await componentsCollection.doc(name).get();\r\n-    if (!doc.exists) return null;\r\n-    return SystemComponent.fromJson(doc.data() as Map<String, dynamic>);\r\n+    try {\r\n+      final doc = await componentsCollection.doc(name).get();\r\n+      if (!doc.exists) return null;\r\n+      return SystemComponent.fromJson(doc.data() as Map<String, dynamic>);\r\n+    } catch (e) {\r\n+      print('Error getting component: $e');\r\n+      return null;\r\n+    }\r\n   }\r\n \r\n   Future<List<SystemComponent>> getAllComponents() async {\r\n-    final snapshot = await componentsCollection.get();\r\n-    return snapshot.docs\r\n-        .map((doc) => SystemComponent.fromJson(doc.data() as Map<String, dynamic>))\r\n-        .toList();\r\n+    try {\r\n+      final snapshot = await componentsCollection.get();\r\n+      return snapshot.docs\r\n+          .map((doc) => SystemComponent.fromJson({\r\n+                ...doc.data() as Map<String, dynamic>,\r\n+                'name': doc.id,\r\n+              }))\r\n+          .toList();\r\n+    } catch (e) {\r\n+      print('Error getting all components: $e');\r\n+      return [];\r\n+    }\r\n   }\r\n \r\n   Stream<SystemComponent?> watchComponent(String componentName) {\r\n     return componentsCollection\r\n         .doc(componentName)\r\n         .snapshots()\r\n         .map((snapshot) => snapshot.exists\r\n-            ? SystemComponent.fromJson(snapshot.data() as Map<String, dynamic>)\r\n+            ? SystemComponent.fromJson({\r\n+                ...snapshot.data() as Map<String, dynamic>,\r\n+                'name': snapshot.id,\r\n+              })\r\n             : null);\r\n   }\r\n \r\n   Future<void> saveComponentState(SystemComponent component) async {\r\n-    await componentsCollection.doc(component.name).set(\r\n-      component.toJson(),\r\n-      SetOptions(merge: true),\r\n-    );\r\n+    try {\r\n+      await componentsCollection.doc(component.name).set(\r\n+        component.toJson(),\r\n+        SetOptions(merge: true),\r\n+      );\r\n+    } catch (e) {\r\n+      print('Error saving component state: $e');\r\n+      throw e;\r\n+    }\r\n   }\r\n-\r\n-  void cacheDataPoint(\r\n-    String componentName,\r\n-    String parameter,\r\n-    DataPoint dataPoint, {\r\n-    int maxPoints = DataPointCache.DEFAULT_MAX_POINTS,\r\n-  }) {\r\n-    _dataPointCache.addDataPoint(\r\n-      componentName,\r\n-      parameter,\r\n-      dataPoint,\r\n-      maxPoints: maxPoints,\r\n-    );\r\n-  }\r\n-\r\n-  List<DataPoint> getCachedDataPoints(String componentName, String parameter) {\r\n-    return _dataPointCache.getDataPoints(componentName, parameter);\r\n-  }\r\n-\r\n-  DataPoint? getLatestDataPoint(String componentName, String parameter) {\r\n-    return _dataPointCache.getLatestDataPoint(componentName, parameter);\r\n-  }\r\n-\r\n-  void clearCache() {\r\n-    _dataPointCache.clearAll();\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734155195770,
            "name": "Commit-0",
            "content": "class ComponentRepository {\r\n  final AuthService _authService;\r\n\r\n  ComponentRepository(this._authService);\r\n\r\n  Future<List<SystemComponent>> getAllComponents() async {\r\n    // Create test data for all components\r\n    return [\r\n      _createTestComponent(\r\n        'Nitrogen Generator',\r\n        'flow_rate',\r\n        50.0,\r\n        45.0,\r\n        55.0,\r\n      ),\r\n      _createTestComponent(\r\n        'MFC',\r\n        'flow_rate',\r\n        30.0,\r\n        25.0,\r\n        35.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Backline Heater',\r\n        'temperature',\r\n        200.0,\r\n        195.0,\r\n        205.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Frontline Heater',\r\n        'temperature',\r\n        250.0,\r\n        245.0,\r\n        255.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Precursor Heater 1',\r\n        'temperature',\r\n        180.0,\r\n        175.0,\r\n        185.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Precursor Heater 2',\r\n        'temperature',\r\n        190.0,\r\n        185.0,\r\n        195.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Reaction Chamber',\r\n        'pressure',\r\n        1.0,\r\n        0.8,\r\n        1.2,\r\n      ),\r\n      _createTestComponent(\r\n        'Pressure Control System',\r\n        'pressure',\r\n        1.5,\r\n        1.3,\r\n        1.7,\r\n      ),\r\n      _createTestComponent(\r\n        'Vacuum Pump',\r\n        'power',\r\n        80.0,\r\n        75.0,\r\n        85.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Valve 1',\r\n        'status',\r\n        1.0,\r\n        0.0,\r\n        1.0,\r\n      ),\r\n      _createTestComponent(\r\n        'Valve 2',\r\n        'status',\r\n        1.0,\r\n        0.0,\r\n        1.0,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  SystemComponent _createTestComponent(\r\n    String name,\r\n    String parameter,\r\n    double setValue,\r\n    double minValue,\r\n    double maxValue,\r\n  ) {\r\n    final now = DateTime.now();\r\n    final history = List.generate(\r\n      10,\r\n      (index) => DataPoint(\r\n        now.subtract(Duration(minutes: 9 - index)),\r\n        minValue + (Random().nextDouble() * (maxValue - minValue)),\r\n      ),\r\n    );\r\n\r\n    return SystemComponent(\r\n      name: name,\r\n      isActivated: true,\r\n      currentValues: {parameter: setValue},\r\n      setValues: {parameter: setValue},\r\n      parameterHistory: {parameter: history},\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}