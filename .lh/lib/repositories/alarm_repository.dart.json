{
    "sourceFile": "lib/repositories/alarm_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734301149333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734301228390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// lib/repositories/alarm_repository.dart\r\n+// path: lib/repositories/alarm_repository.dart\r\n \r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import '../modules/system_operation_also_main_module/models/alarm.dart';\r\n import 'base_repository.dart';\r\n@@ -11,76 +11,64 @@\n     await delete(alarmId, userId: userId);\r\n   }\r\n \r\n   Future<void> clearAcknowledged(String userId) async {\r\n-    final batch = FirebaseFirestore.instance.batch();\r\n-\r\n-    final acknowledgedAlarms = await getUserCollection(userId)\r\n+    QuerySnapshot acknowledgedAlarms = await getUserCollection(userId)\r\n         .where('acknowledged', isEqualTo: true)\r\n         .get();\r\n \r\n     for (var doc in acknowledgedAlarms.docs) {\r\n-      batch.delete(doc.reference);\r\n+      await doc.reference.delete();\r\n     }\r\n-\r\n-    if (acknowledgedAlarms.docs.isNotEmpty) {\r\n-      await batch.commit();\r\n-    }\r\n   }\r\n \r\n   Future<List<Alarm>> getActiveAlarms(String userId) async {\r\n-    final snapshot = await getUserCollection(userId)\r\n+    QuerySnapshot activeAlarms = await getUserCollection(userId)\r\n         .where('acknowledged', isEqualTo: false)\r\n-        .orderBy('timestamp', descending: true) // Add ordering by timestamp\r\n+        .orderBy('timestamp', descending: true)\r\n         .get();\r\n \r\n-    return snapshot.docs\r\n-        .map((doc) => fromJson({\r\n-              ...doc.data() as Map<String, dynamic>,\r\n-              'id': doc.id, // Ensure ID is included\r\n-            }))\r\n+    return activeAlarms.docs\r\n+        .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n         .toList();\r\n   }\r\n \r\n-  // Add method to watch active alarms\r\n   Stream<List<Alarm>> watchActiveAlarms(String userId) {\r\n     return getUserCollection(userId)\r\n         .where('acknowledged', isEqualTo: false)\r\n         .orderBy('timestamp', descending: true)\r\n         .snapshots()\r\n         .map((snapshot) => snapshot.docs\r\n-            .map((doc) => fromJson({\r\n-                  ...doc.data() as Map<String, dynamic>,\r\n-                  'id': doc.id,\r\n-                }))\r\n+            .map((doc) => fromJson(doc.data() as Map<String, dynamic>))\r\n             .toList());\r\n   }\r\n \r\n-  // Add method to acknowledge alarm\r\n-  Future<void> acknowledgeAlarm(String alarmId, {String? userId}) async {\r\n-    await update(alarmId, {\r\n-      'acknowledged': true,\r\n-      'acknowledgedAt': FieldValue.serverTimestamp(),\r\n-    }, userId: userId);\r\n+  Future<void> acknowledgeAlarm(String alarmId, String userId) async {\r\n+    final alarm = await get(alarmId, userId: userId);\r\n+    if (alarm != null) {\r\n+      alarm.acknowledged = true;\r\n+      alarm.acknowledgedAt = DateTime.now();\r\n+      await update(alarmId, alarm, userId: userId);\r\n+    }\r\n   }\r\n \r\n   @override\r\n   Alarm fromJson(Map<String, dynamic> json) => Alarm.fromJson(json);\r\n \r\n-  // Add method to create a new alarm\r\n-  Future<void> createAlarm({\r\n+  Future<void> createNewAlarm({\r\n+    required String id,\r\n     required String message,\r\n     required AlarmSeverity severity,\r\n     String? userId,\r\n     Map<String, dynamic>? additionalData,\r\n   }) async {\r\n-    final alarm = {\r\n-      'message': message,\r\n-      'severity': severity.toString().split('.').last,\r\n-      'acknowledged': false,\r\n-      'timestamp': FieldValue.serverTimestamp(),\r\n-      ...?additionalData,\r\n-    };\r\n+    final alarm = Alarm(\r\n+      id: id,\r\n+      message: message,\r\n+      severity: severity,\r\n+      timestamp: DateTime.now(),\r\n+      acknowledged: false,\r\n+    );\r\n \r\n-    await add(alarm, userId: userId);\r\n+    await add(id, alarm, userId: userId);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734301348247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,10 @@\n \r\n   Future<void> acknowledgeAlarm(String alarmId, String userId) async {\r\n     final alarm = await get(alarmId, userId: userId);\r\n     if (alarm != null) {\r\n-      alarm.acknowledged = true;\r\n-      alarm.acknowledgedAt = DateTime.now();\r\n-      await update(alarmId, alarm, userId: userId);\r\n+      final updatedAlarm = alarm.copyWith(acknowledged: true);\r\n+      await update(alarmId, updatedAlarm, userId: userId);\r\n     }\r\n   }\r\n \r\n   @override\r\n@@ -57,17 +56,18 @@\n   Future<void> createNewAlarm({\r\n     required String id,\r\n     required String message,\r\n     required AlarmSeverity severity,\r\n+    bool isSafetyAlert = false,\r\n     String? userId,\r\n-    Map<String, dynamic>? additionalData,\r\n   }) async {\r\n     final alarm = Alarm(\r\n       id: id,\r\n       message: message,\r\n       severity: severity,\r\n       timestamp: DateTime.now(),\r\n       acknowledged: false,\r\n+      isSafetyAlert: isSafetyAlert,\r\n     );\r\n \r\n     await add(id, alarm, userId: userId);\r\n   }\r\n"
                }
            ],
            "date": 1734301149333,
            "name": "Commit-0",
            "content": "// lib/repositories/alarm_repository.dart\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../modules/system_operation_also_main_module/models/alarm.dart';\r\nimport 'base_repository.dart';\r\n\r\nclass AlarmRepository extends BaseRepository<Alarm> {\r\n  AlarmRepository() : super('alarms');\r\n\r\n  Future<void> remove(String alarmId, {String? userId}) async {\r\n    await delete(alarmId, userId: userId);\r\n  }\r\n\r\n  Future<void> clearAcknowledged(String userId) async {\r\n    final batch = FirebaseFirestore.instance.batch();\r\n\r\n    final acknowledgedAlarms = await getUserCollection(userId)\r\n        .where('acknowledged', isEqualTo: true)\r\n        .get();\r\n\r\n    for (var doc in acknowledgedAlarms.docs) {\r\n      batch.delete(doc.reference);\r\n    }\r\n\r\n    if (acknowledgedAlarms.docs.isNotEmpty) {\r\n      await batch.commit();\r\n    }\r\n  }\r\n\r\n  Future<List<Alarm>> getActiveAlarms(String userId) async {\r\n    final snapshot = await getUserCollection(userId)\r\n        .where('acknowledged', isEqualTo: false)\r\n        .orderBy('timestamp', descending: true) // Add ordering by timestamp\r\n        .get();\r\n\r\n    return snapshot.docs\r\n        .map((doc) => fromJson({\r\n              ...doc.data() as Map<String, dynamic>,\r\n              'id': doc.id, // Ensure ID is included\r\n            }))\r\n        .toList();\r\n  }\r\n\r\n  // Add method to watch active alarms\r\n  Stream<List<Alarm>> watchActiveAlarms(String userId) {\r\n    return getUserCollection(userId)\r\n        .where('acknowledged', isEqualTo: false)\r\n        .orderBy('timestamp', descending: true)\r\n        .snapshots()\r\n        .map((snapshot) => snapshot.docs\r\n            .map((doc) => fromJson({\r\n                  ...doc.data() as Map<String, dynamic>,\r\n                  'id': doc.id,\r\n                }))\r\n            .toList());\r\n  }\r\n\r\n  // Add method to acknowledge alarm\r\n  Future<void> acknowledgeAlarm(String alarmId, {String? userId}) async {\r\n    await update(alarmId, {\r\n      'acknowledged': true,\r\n      'acknowledgedAt': FieldValue.serverTimestamp(),\r\n    }, userId: userId);\r\n  }\r\n\r\n  @override\r\n  Alarm fromJson(Map<String, dynamic> json) => Alarm.fromJson(json);\r\n\r\n  // Add method to create a new alarm\r\n  Future<void> createAlarm({\r\n    required String message,\r\n    required AlarmSeverity severity,\r\n    String? userId,\r\n    Map<String, dynamic>? additionalData,\r\n  }) async {\r\n    final alarm = {\r\n      'message': message,\r\n      'severity': severity.toString().split('.').last,\r\n      'acknowledged': false,\r\n      'timestamp': FieldValue.serverTimestamp(),\r\n      ...?additionalData,\r\n    };\r\n\r\n    await add(alarm, userId: userId);\r\n  }\r\n}"
        }
    ]
}