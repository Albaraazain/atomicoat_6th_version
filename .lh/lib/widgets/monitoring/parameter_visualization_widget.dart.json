{
    "sourceFile": "lib/widgets/monitoring/parameter_visualization_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734050037723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734050037723,
            "name": "Commit-0",
            "content": "// lib/widgets/monitoring/parameter_visualization_widget.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport '../../modules/system_operation_also_main_module/models/data_point.dart';\r\nimport '../../modules/system_operation_also_main_module/models/system_component.dart';\r\n\r\nclass ParameterVisualizationWidget extends StatelessWidget {\r\n  final String componentId;\r\n  final String parameterName;\r\n  final List<DataPoint> dataPoints;\r\n  final Map<String, double>? thresholds;\r\n  final bool showThresholds;\r\n  final Duration timeWindow;\r\n\r\n  const ParameterVisualizationWidget({\r\n    Key? key,\r\n    required this.componentId,\r\n    required this.parameterName,\r\n    required this.dataPoints,\r\n    this.thresholds,\r\n    this.showThresholds = true,\r\n    this.timeWindow = const Duration(hours: 1),\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    if (dataPoints.isEmpty) {\r\n      return const Center(child: Text('No data available'));\r\n    }\r\n\r\n    final now = DateTime.now();\r\n    final startTime = now.subtract(timeWindow);\r\n\r\n    final spots = dataPoints\r\n        .where((dp) => dp.timestamp.isAfter(startTime))\r\n        .map((dp) {\r\n          final timeAgo = now.difference(dp.timestamp).inSeconds;\r\n          return FlSpot(timeAgo.toDouble(), dp.value);\r\n        })\r\n        .toList();\r\n\r\n    if (spots.isEmpty) {\r\n      return const Center(child: Text('No recent data available'));\r\n    }\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(16.0),\r\n      child: Column(\r\n        children: [\r\n          Text(\r\n            '$parameterName Trend',\r\n            style: Theme.of(context).textTheme.titleMedium,\r\n          ),\r\n          const SizedBox(height: 8),\r\n          Expanded(\r\n            child: LineChart(\r\n              LineChartData(\r\n                gridData: const FlGridData(show: true),\r\n                titlesData: FlTitlesData(\r\n                  leftTitles: AxisTitles(\r\n                    sideTitles: SideTitles(\r\n                      showTitles: true,\r\n                      reservedSize: 40,\r\n                      getTitlesWidget: (value, meta) {\r\n                        return Text(value.toStringAsFixed(1));\r\n                      },\r\n                    ),\r\n                  ),\r\n                  bottomTitles: AxisTitles(\r\n                    sideTitles: SideTitles(\r\n                      showTitles: true,\r\n                      reservedSize: 22,\r\n                      getTitlesWidget: (value, meta) {\r\n                        final minutes = (value / 60).round();\r\n                        return Text('${-minutes}m');\r\n                      },\r\n                    ),\r\n                  ),\r\n                  rightTitles: const AxisTitles(\r\n                    sideTitles: SideTitles(showTitles: false),\r\n                  ),\r\n                  topTitles: const AxisTitles(\r\n                    sideTitles: SideTitles(showTitles: false),\r\n                  ),\r\n                ),\r\n                borderData: FlBorderData(show: true),\r\n                lineBarsData: [\r\n                  LineChartBarData(\r\n                    spots: spots,\r\n                    isCurved: true,\r\n                    color: Colors.blue,\r\n                    dotData: const FlDotData(show: false),\r\n                    belowBarData: BarAreaData(show: false),\r\n                  ),\r\n                  if (showThresholds && thresholds != null) ...[\r\n                    _buildThresholdLine(spots, thresholds!['max'] ?? double.infinity, Colors.red),\r\n                    _buildThresholdLine(spots, thresholds!['min'] ?? double.negativeInfinity, Colors.orange),\r\n                  ],\r\n                ],\r\n                minX: spots.first.x,\r\n                maxX: spots.last.x,\r\n                minY: _calculateMinY(),\r\n                maxY: _calculateMaxY(),\r\n              ),\r\n            ),\r\n          ),\r\n          if (showThresholds && thresholds != null)\r\n            Padding(\r\n              padding: const EdgeInsets.only(top: 8.0),\r\n              child: Row(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: [\r\n                  _buildThresholdIndicator('Max', Colors.red, thresholds!['max']),\r\n                  const SizedBox(width: 16),\r\n                  _buildThresholdIndicator('Min', Colors.orange, thresholds!['min']),\r\n                ],\r\n              ),\r\n            ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  LineChartBarData _buildThresholdLine(List<FlSpot> spots, double value, Color color) {\r\n    return LineChartBarData(\r\n      spots: [\r\n        FlSpot(spots.first.x, value),\r\n        FlSpot(spots.last.x, value),\r\n      ],\r\n      isCurved: false,\r\n      color: color,\r\n      dotData: const FlDotData(show: false),\r\n      belowBarData: BarAreaData(show: false),\r\n      dashArray: [5, 5],\r\n    );\r\n  }\r\n\r\n  Widget _buildThresholdIndicator(String label, Color color, double? value) {\r\n    return Row(\r\n      children: [\r\n        Container(\r\n          width: 16,\r\n          height: 2,\r\n          color: color,\r\n        ),\r\n        const SizedBox(width: 4),\r\n        Text('$label: ${value?.toStringAsFixed(1) ?? 'N/A'}'),\r\n      ],\r\n    );\r\n  }\r\n\r\n  double _calculateMinY() {\r\n    final values = dataPoints.map((dp) => dp.value);\r\n    final min = values.reduce((a, b) => a < b ? a : b);\r\n    final threshold = thresholds?['min'];\r\n    if (threshold != null && threshold < min) {\r\n      return threshold - (min * 0.1);\r\n    }\r\n    return min - (min * 0.1);\r\n  }\r\n\r\n  double _calculateMaxY() {\r\n    final values = dataPoints.map((dp) => dp.value);\r\n    final max = values.reduce((a, b) => a > b ? a : b);\r\n    final threshold = thresholds?['max'];\r\n    if (threshold != null && threshold > max) {\r\n      return threshold + (max * 0.1);\r\n    }\r\n    return max + (max * 0.1);\r\n  }\r\n}"
        }
    ]
}