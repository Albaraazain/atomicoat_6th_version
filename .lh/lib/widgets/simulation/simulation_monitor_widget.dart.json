{
    "sourceFile": "lib/widgets/simulation/simulation_monitor_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734072529625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734072529625,
            "name": "Commit-0",
            "content": "// lib/widgets/simulation/simulation_monitor_widget.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\nimport '../../blocs/simulation/bloc/simulation_bloc.dart';\r\nimport '../../blocs/simulation/bloc/simulation_event.dart';\r\nimport '../../blocs/simulation/bloc/simulation_state.dart';\r\n\r\nclass SimulationMonitorWidget extends StatelessWidget {\r\n  const SimulationMonitorWidget({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return BlocBuilder<SimulationBloc, SimulationState>(\r\n      builder: (context, state) {\r\n        return Card(\r\n          child: Padding(\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                _buildHeader(context, state),\r\n                const Divider(),\r\n                _buildStatusInfo(state),\r\n                const SizedBox(height: 16),\r\n                _buildControls(context, state),\r\n                if (state.error != null)\r\n                  _buildErrorMessage(state.error!),\r\n              ],\r\n            ),\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildHeader(BuildContext context, SimulationState state) {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n      children: [\r\n        const Text(\r\n          'Simulation Monitor',\r\n          style: TextStyle(\r\n            fontSize: 20,\r\n            fontWeight: FontWeight.bold,\r\n          ),\r\n        ),\r\n        _buildStatusIndicator(state.status),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildStatusIndicator(SimulationStatus status) {\r\n    final color = switch (status) {\r\n      SimulationStatus.running => Colors.green,\r\n      SimulationStatus.paused => Colors.orange,\r\n      SimulationStatus.error => Colors.red,\r\n      SimulationStatus.idle => Colors.grey,\r\n    };\r\n\r\n    final text = switch (status) {\r\n      SimulationStatus.running => 'Running',\r\n      SimulationStatus.paused => 'Paused',\r\n      SimulationStatus.error => 'Error',\r\n      SimulationStatus.idle => 'Idle',\r\n    };\r\n\r\n    return Container(\r\n      padding: const EdgeInsets.symmetric(\r\n        horizontal: 12,\r\n        vertical: 6,\r\n      ),\r\n      decoration: BoxDecoration(\r\n        color: color.withOpacity(0.1),\r\n        borderRadius: BorderRadius.circular(16),\r\n        border: Border.all(color: color),\r\n      ),\r\n      child: Row(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          Container(\r\n            width: 8,\r\n            height: 8,\r\n            decoration: BoxDecoration(\r\n              color: color,\r\n              shape: BoxShape.circle,\r\n            ),\r\n          ),\r\n          const SizedBox(width: 8),\r\n          Text(\r\n            text,\r\n            style: TextStyle(color: color),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildStatusInfo(SimulationState state) {\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        Text('Tick Count: ${state.tickCount}'),\r\n        const SizedBox(height: 8),\r\n        Text(\r\n          'Last Update: ${_formatDateTime(state.lastUpdated)}',\r\n        ),\r\n        const SizedBox(height: 8),\r\n        _buildComponentUpdates(state),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildComponentUpdates(SimulationState state) {\r\n    if (state.lastComponentUpdates.isEmpty) {\r\n      return const Text('No component updates yet');\r\n    }\r\n\r\n    return Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        const Text(\r\n          'Last Component Updates:',\r\n          style: TextStyle(fontWeight: FontWeight.bold),\r\n        ),\r\n        const SizedBox(height: 4),\r\n        ...state.lastComponentUpdates.entries.map(\r\n          (entry) => Text(\r\n            '${entry.key}: ${_formatDateTime(entry.value)}',\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildControls(BuildContext context, SimulationState state) {\r\n    final isRunning = state.status == SimulationStatus.running;\r\n\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n      children: [\r\n        ElevatedButton.icon(\r\n          onPressed: () {\r\n            context.read<SimulationBloc>().add(\r\n              isRunning ? StopSimulation() : StartSimulation(),\r\n            );\r\n          },\r\n          icon: Icon(isRunning ? Icons.stop : Icons.play_arrow),\r\n          label: Text(isRunning ? 'Stop' : 'Start'),\r\n        ),\r\n        ElevatedButton.icon(\r\n          onPressed: () {\r\n            context.read<SimulationBloc>().add(GenerateRandomError());\r\n          },\r\n          icon: const Icon(Icons.warning),\r\n          label: const Text('Generate Error'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildErrorMessage(String error) {\r\n    return Container(\r\n      margin: const EdgeInsets.only(top: 16),\r\n      padding: const EdgeInsets.all(8),\r\n      decoration: BoxDecoration(\r\n        color: Colors.red.withOpacity(0.1),\r\n        borderRadius: BorderRadius.circular(8),\r\n        border: Border.all(color: Colors.red),\r\n      ),\r\n      child: Row(\r\n        children: [\r\n          const Icon(Icons.error, color: Colors.red),\r\n          const SizedBox(width: 8),\r\n          Expanded(\r\n            child: Text(\r\n              error,\r\n              style: const TextStyle(color: Colors.red),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  String _formatDateTime(DateTime? dateTime) {\r\n    if (dateTime == null) return 'N/A';\r\n    return '${dateTime.hour}:${dateTime.minute}:${dateTime.second}';\r\n  }\r\n}"
        }
    ]
}