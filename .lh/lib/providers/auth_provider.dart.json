{
    "sourceFile": "lib/providers/auth_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1734284183874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1734284183874,
            "name": "Commit-0",
            "content": "// lib/providers/auth_provider.dart\r\n\r\nimport 'package:flutter/foundation.dart';\r\nimport '../services/auth_service.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport '../enums/user_role.dart';\r\n\r\nclass AuthProvider with ChangeNotifier {\r\n  User? _user;\r\n  UserRole? _userRole;\r\n  String? _userStatus;\r\n  bool _isLoading = true;\r\n\r\n  User? get user => _user;\r\n  String? get userId => _user?.uid;\r\n  UserRole? get userRole => _userRole;\r\n  String? get userStatus => _userStatus;\r\n  bool get isAuthenticated => _user != null;\r\n  bool get isAdmin => _userRole == UserRole.admin;\r\n  bool get isLoading => _isLoading;\r\n\r\n  bool isApproved() {\r\n    return _userStatus == 'approved' || _userStatus == 'active';\r\n  }\r\n\r\n  final AuthService _authService;\r\n\r\n  AuthProvider(this._authService) {\r\n    _init();\r\n  }\r\n\r\n  Future<void> _init() async {\r\n    _isLoading = true;\r\n    notifyListeners();\r\n\r\n    _user = _authService.currentUser;\r\n    if (_user != null) {\r\n      await validateUserData();\r\n    }\r\n    _authService.authStateChanges.listen((User? user) async {\r\n      _user = user;\r\n      if (_user != null) {\r\n        await validateUserData();\r\n      } else {\r\n        _userRole = null;\r\n        _userStatus = null;\r\n      }\r\n      _isLoading = false;\r\n      notifyListeners();\r\n    });\r\n  }\r\n\r\n  Future<void> validateUserData() async {\r\n    if (_user != null) {\r\n      await _authService.validateUserData(_user!.uid);\r\n      await _updateUserInfo();\r\n    }\r\n  }\r\n\r\n  Future<void> _updateUserInfo() async {\r\n    if (_user != null) {\r\n      _userRole = await _authService.getUserRole(_user!.uid);\r\n      _userStatus = await _authService.getUserStatus(_user!.uid);\r\n      notifyListeners();\r\n    } else {\r\n      _userRole = null;\r\n      _userStatus = null;\r\n    }\r\n  }\r\n\r\n  Future<bool> signUp({\r\n    required String email,\r\n    required String password,\r\n    required String name,\r\n    required String machineSerial,\r\n  }) async {\r\n    try {\r\n      final credential = await _authService.signUp(\r\n        email: email,\r\n        password: password,\r\n        name: name,\r\n        machineSerial: machineSerial,\r\n      );\r\n      _user = credential.user;\r\n      return _user != null;\r\n    } on FirebaseAuthException catch (e) {\r\n      print('Firebase Auth Error in signUp: ${e.code} - ${e.message}');\r\n      rethrow;\r\n    } catch (e) {\r\n      print('Error in signUp: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  Future<bool> signIn({required String email, required String password}) async {\r\n    try {\r\n      _isLoading = true;\r\n      notifyListeners();\r\n\r\n      final credential = await _authService.signIn(\r\n        email: email,\r\n        password: password\r\n      );\r\n\r\n      _user = credential.user;\r\n      if (_user != null) {\r\n        await _updateUserInfo();\r\n\r\n        if (_userRole == UserRole.admin || _userStatus == 'active') {\r\n          _isLoading = false;\r\n          notifyListeners();\r\n          return true;\r\n        } else {\r\n          await signOut();\r\n          throw FirebaseAuthException(\r\n            code: 'account-pending',\r\n            message: 'Your account is pending approval.'\r\n          );\r\n        }\r\n      }\r\n\r\n      _isLoading = false;\r\n      notifyListeners();\r\n      return false;\r\n    } on FirebaseAuthException catch (e) {\r\n      _isLoading = false;\r\n      notifyListeners();\r\n      print('Firebase Auth Error in signIn: ${e.code} - ${e.message}');\r\n      rethrow;\r\n    } catch (e) {\r\n      _isLoading = false;\r\n      notifyListeners();\r\n      print('Error in signIn: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  Future<void> signOut() async {\r\n    try {\r\n      await _authService.signOut();\r\n      _user = null;\r\n      _userRole = null;\r\n      _userStatus = null;\r\n      notifyListeners();\r\n    } on FirebaseAuthException catch (e) {\r\n      print('Firebase Auth Error in signOut: ${e.code} - ${e.message}');\r\n      rethrow;\r\n    } catch (e) {\r\n      print('Error in signOut: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  Future<void> refreshUser() async {\r\n    _user = _authService.currentUser;\r\n    await _updateUserInfo();\r\n    notifyListeners();\r\n  }\r\n}"
        }
    ]
}