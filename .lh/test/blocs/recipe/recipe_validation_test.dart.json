{
    "sourceFile": "test/blocs/recipe/recipe_validation_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1734052316246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734052712340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,89 +37,148 @@\n     );\r\n   });\r\n \r\n   group('Recipe Validation', () {\r\n-    test('validates recipe with empty name', () {\r\n-      final invalidRecipe = Recipe(\r\n-        id: 'test-1',\r\n-        name: '',\r\n-        substrate: 'Silicon',\r\n-        steps: [\r\n-          RecipeStep(\r\n-            type: StepType.setParameter,\r\n-            parameters: {\r\n-              'component': 'Chamber',\r\n-              'parameter': 'temperature',\r\n-              'value': 150.0,\r\n-            },\r\n+    blocTest<RecipeBloc, RecipeState>(\r\n+      'validates recipe with empty name',\r\n+      build: () {\r\n+        final invalidRecipe = Recipe(\r\n+          id: 'test-1',\r\n+          name: '',\r\n+          substrate: 'Silicon',\r\n+          steps: [\r\n+            RecipeStep(\r\n+              type: StepType.setParameter,\r\n+              parameters: {\r\n+                'component': 'Chamber',\r\n+                'parameter': 'temperature',\r\n+                'value': 150.0,\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+\r\n+        when(() => repository.getAll(userId: any(named: 'userId')))\r\n+            .thenAnswer((_) async => [invalidRecipe]);\r\n+        when(() => systemStateBloc.state).thenReturn(\r\n+          SystemStateState(\r\n+            status: SystemOperationalStatus.ready,\r\n+            isReadinessCheckPassed: true,\r\n           ),\r\n-        ],\r\n-      );\r\n+        );\r\n \r\n-      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n+        return recipeBloc;\r\n+      },\r\n+      seed: () => RecipeState.initial(),\r\n+      act: (bloc) async {\r\n+        bloc.add(LoadRecipes());\r\n+        await Future.delayed(const Duration(milliseconds: 50));\r\n+        bloc.add(StartRecipeExecution('test-1'));\r\n+      },\r\n+      expect: () => [\r\n+        predicate<RecipeState>((state) => state.isLoading == true),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.isLoading == false &&\r\n+          state.recipes.length == 1\r\n+        ),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.error?.contains('Recipe name is required') == true &&\r\n+          state.executionStatus == RecipeExecutionStatus.error\r\n+        ),\r\n+      ],\r\n+      wait: const Duration(milliseconds: 100),\r\n+    );\r\n \r\n-      expect(\r\n-        recipeBloc.stream,\r\n-        emits(isA<RecipeState>().having(\r\n-          (s) => s.error,\r\n-          'error',\r\n-          contains('Recipe name is required'),\r\n-        )),\r\n-      );\r\n-    });\r\n+    blocTest<RecipeBloc, RecipeState>(\r\n+      'validates recipe with missing step parameters',\r\n+      build: () {\r\n+        final invalidRecipe = Recipe(\r\n+          id: 'test-1',\r\n+          name: 'Test Recipe',\r\n+          substrate: 'Silicon',\r\n+          steps: [\r\n+            RecipeStep(\r\n+              type: StepType.valve,\r\n+              parameters: {},\r\n+            ),\r\n+          ],\r\n+        );\r\n \r\n-    test('validates recipe with missing step parameters', () {\r\n-      final invalidRecipe = Recipe(\r\n-        id: 'test-1',\r\n-        name: 'Test Recipe',\r\n-        substrate: 'Silicon',\r\n-        steps: [\r\n-          RecipeStep(\r\n-            type: StepType.valve,\r\n-            parameters: {}, // Missing required parameters\r\n+        when(() => repository.getAll(userId: any(named: 'userId')))\r\n+            .thenAnswer((_) async => [invalidRecipe]);\r\n+        when(() => systemStateBloc.state).thenReturn(\r\n+          SystemStateState(\r\n+            status: SystemOperationalStatus.ready,\r\n+            isReadinessCheckPassed: true,\r\n           ),\r\n-        ],\r\n-      );\r\n+        );\r\n \r\n-      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n+        return recipeBloc;\r\n+      },\r\n+      seed: () => RecipeState.initial(),\r\n+      act: (bloc) async {\r\n+        bloc.add(LoadRecipes());\r\n+        await Future.delayed(const Duration(milliseconds: 50));\r\n+        bloc.add(StartRecipeExecution('test-1'));\r\n+      },\r\n+      expect: () => [\r\n+        predicate<RecipeState>((state) => state.isLoading == true),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.isLoading == false &&\r\n+          state.recipes.length == 1\r\n+        ),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.error?.contains('Valve duration is required') == true &&\r\n+          state.executionStatus == RecipeExecutionStatus.error\r\n+        ),\r\n+      ],\r\n+      wait: const Duration(milliseconds: 100),\r\n+    );\r\n \r\n-      expect(\r\n-        recipeBloc.stream,\r\n-        emitsInOrder([\r\n-          isA<RecipeState>().having(\r\n-            (s) => s.error,\r\n-            'error',\r\n-            contains('Valve duration is required'),\r\n-          ),\r\n-        ]),\r\n-      );\r\n-    });\r\n+    blocTest<RecipeBloc, RecipeState>(\r\n+      'validates loop step with no substeps',\r\n+      build: () {\r\n+        final invalidRecipe = Recipe(\r\n+          id: 'test-1',\r\n+          name: 'Test Recipe',\r\n+          substrate: 'Silicon',\r\n+          steps: [\r\n+            RecipeStep(\r\n+              type: StepType.loop,\r\n+              parameters: {'iterations': 5},\r\n+              subSteps: [],\r\n+            ),\r\n+          ],\r\n+        );\r\n \r\n-    test('validates loop step with no substeps', () {\r\n-      final invalidRecipe = Recipe(\r\n-        id: 'test-1',\r\n-        name: 'Test Recipe',\r\n-        substrate: 'Silicon',\r\n-        steps: [\r\n-          RecipeStep(\r\n-            type: StepType.loop,\r\n-            parameters: {'iterations': 5},\r\n-            subSteps: [], // Empty substeps\r\n+        when(() => repository.getAll(userId: any(named: 'userId')))\r\n+            .thenAnswer((_) async => [invalidRecipe]);\r\n+        when(() => systemStateBloc.state).thenReturn(\r\n+          SystemStateState(\r\n+            status: SystemOperationalStatus.ready,\r\n+            isReadinessCheckPassed: true,\r\n           ),\r\n-        ],\r\n-      );\r\n+        );\r\n \r\n-      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n-\r\n-      expect(\r\n-        recipeBloc.stream,\r\n-        emitsInOrder([\r\n-          isA<RecipeState>().having(\r\n-            (s) => s.error,\r\n-            'error',\r\n-            contains('Loop must contain substeps'),\r\n-          ),\r\n-        ]),\r\n-      );\r\n-    });\r\n+        return recipeBloc;\r\n+      },\r\n+      seed: () => RecipeState.initial(),\r\n+      act: (bloc) async {\r\n+        bloc.add(LoadRecipes());\r\n+        await Future.delayed(const Duration(milliseconds: 50));\r\n+        bloc.add(StartRecipeExecution('test-1'));\r\n+      },\r\n+      expect: () => [\r\n+        predicate<RecipeState>((state) => state.isLoading == true),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.isLoading == false &&\r\n+          state.recipes.length == 1\r\n+        ),\r\n+        predicate<RecipeState>((state) =>\r\n+          state.error?.contains('Loop must contain substeps') == true &&\r\n+          state.executionStatus == RecipeExecutionStatus.error\r\n+        ),\r\n+      ],\r\n+      wait: const Duration(milliseconds: 100),\r\n+    );\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1734052721369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:bloc_test/bloc_test.dart';\r\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\n"
                },
                {
                    "date": 1734052749912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\n import 'package:experiment_planner/repositories/recipe_reposiory.dart';\r\n import 'package:experiment_planner/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n"
                },
                {
                    "date": 1734283834957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,12 @@\n import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\n+import 'package:experiment_planner/blocs/recipe/repository/recipe_repository.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\n-import 'package:experiment_planner/repositories/recipe_reposiory.dart';\r\n import 'package:experiment_planner/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n"
                },
                {
                    "date": 1734376765565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n import 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\n import 'package:experiment_planner/blocs/recipe/repository/recipe_repository.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\n-import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/features/recipes/models/recipe.dart';\r\n+import 'package:experiment_planner/features/auth/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n class MockRecipeRepository extends Mock implements RecipeRepository {}\r\n"
                }
            ],
            "date": 1734052316246,
            "name": "Commit-0",
            "content": "import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_bloc.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_event.dart';\r\nimport 'package:experiment_planner/blocs/recipe/bloc/recipe_state.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:experiment_planner/modules/system_operation_also_main_module/models/recipe.dart';\r\nimport 'package:experiment_planner/repositories/recipe_reposiory.dart';\r\nimport 'package:experiment_planner/services/auth_service.dart';\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\n\r\nclass MockRecipeRepository extends Mock implements RecipeRepository {}\r\nclass MockAuthService extends Mock implements AuthService {}\r\nclass MockSystemStateBloc extends Mock implements SystemStateBloc {}\r\nclass MockAlarmBloc extends Mock implements AlarmBloc {}\r\n\r\nvoid main() {\r\n  late RecipeBloc recipeBloc;\r\n  late MockRecipeRepository repository;\r\n  late MockAuthService authService;\r\n  late MockSystemStateBloc systemStateBloc;\r\n  late MockAlarmBloc alarmBloc;\r\n\r\n  setUp(() {\r\n    repository = MockRecipeRepository();\r\n    authService = MockAuthService();\r\n    systemStateBloc = MockSystemStateBloc();\r\n    alarmBloc = MockAlarmBloc();\r\n\r\n    when(() => authService.currentUserId).thenReturn('test-user');\r\n\r\n    recipeBloc = RecipeBloc(\r\n      repository: repository,\r\n      authService: authService,\r\n      systemStateBloc: systemStateBloc,\r\n      alarmBloc: alarmBloc,\r\n    );\r\n  });\r\n\r\n  group('Recipe Validation', () {\r\n    test('validates recipe with empty name', () {\r\n      final invalidRecipe = Recipe(\r\n        id: 'test-1',\r\n        name: '',\r\n        substrate: 'Silicon',\r\n        steps: [\r\n          RecipeStep(\r\n            type: StepType.setParameter,\r\n            parameters: {\r\n              'component': 'Chamber',\r\n              'parameter': 'temperature',\r\n              'value': 150.0,\r\n            },\r\n          ),\r\n        ],\r\n      );\r\n\r\n      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n\r\n      expect(\r\n        recipeBloc.stream,\r\n        emits(isA<RecipeState>().having(\r\n          (s) => s.error,\r\n          'error',\r\n          contains('Recipe name is required'),\r\n        )),\r\n      );\r\n    });\r\n\r\n    test('validates recipe with missing step parameters', () {\r\n      final invalidRecipe = Recipe(\r\n        id: 'test-1',\r\n        name: 'Test Recipe',\r\n        substrate: 'Silicon',\r\n        steps: [\r\n          RecipeStep(\r\n            type: StepType.valve,\r\n            parameters: {}, // Missing required parameters\r\n          ),\r\n        ],\r\n      );\r\n\r\n      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n\r\n      expect(\r\n        recipeBloc.stream,\r\n        emitsInOrder([\r\n          isA<RecipeState>().having(\r\n            (s) => s.error,\r\n            'error',\r\n            contains('Valve duration is required'),\r\n          ),\r\n        ]),\r\n      );\r\n    });\r\n\r\n    test('validates loop step with no substeps', () {\r\n      final invalidRecipe = Recipe(\r\n        id: 'test-1',\r\n        name: 'Test Recipe',\r\n        substrate: 'Silicon',\r\n        steps: [\r\n          RecipeStep(\r\n            type: StepType.loop,\r\n            parameters: {'iterations': 5},\r\n            subSteps: [], // Empty substeps\r\n          ),\r\n        ],\r\n      );\r\n\r\n      recipeBloc.add(StartRecipeExecution(invalidRecipe.id));\r\n\r\n      expect(\r\n        recipeBloc.stream,\r\n        emitsInOrder([\r\n          isA<RecipeState>().having(\r\n            (s) => s.error,\r\n            'error',\r\n            contains('Loop must contain substeps'),\r\n          ),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n}\r\n"
        }
    ]
}