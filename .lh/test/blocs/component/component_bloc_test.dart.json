{
    "sourceFile": "test/blocs/component/component_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734043528416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734043556182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n // test/blocs/component/component_bloc_test.dart\r\n \r\n+import 'package:experiment_planner/blocs/component/bloc/component_bloc.dart';\r\n+import 'package:experiment_planner/blocs/component/bloc/component_event.dart';\r\n+import 'package:experiment_planner/blocs/component/bloc/component_state.dart';\r\n+import 'package:experiment_planner/blocs/component/repository/component_repository.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n-import 'package:your_app_name/blocs/component/bloc/component_bloc.dart';\r\n-import 'package:your_app_name/blocs/component/bloc/component_event.dart';\r\n-import 'package:your_app_name/blocs/component/bloc/component_state.dart';\r\n-import 'package:your_app_name/blocs/component/repository/component_repository.dart';\r\n-import 'package:your_app_name/modules/system_operation_also_main_module/models/system_component.dart';\r\n \r\n // Create mocks\r\n class MockComponentRepository extends Mock implements ComponentRepository {}\r\n \r\n"
                },
                {
                    "date": 1734043921664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,28 @@\n \r\n // Create mocks\r\n class MockComponentRepository extends Mock implements ComponentRepository {}\r\n \r\n+// Create a fake for SystemComponent\r\n+class FakeSystemComponent extends Fake implements SystemComponent {\r\n+  @override\r\n+  String get name => 'Fake Component';\r\n+\r\n+  @override\r\n+  Map<String, double> get currentValues => {'test': 0.0};\r\n+\r\n+  @override\r\n+  Map<String, double> get setValues => {'test': 0.0};\r\n+}\r\n+\r\n void main() {\r\n   late ComponentBloc componentBloc;\r\n   late MockComponentRepository mockRepository;\r\n \r\n+  setUpAll(() {\r\n+    registerFallbackValue(FakeSystemComponent());\r\n+  });\r\n+\r\n   // Test component data\r\n   final testComponent = SystemComponent(\r\n     name: 'Test Component',\r\n     description: 'Test Description',\r\n@@ -43,9 +59,9 @@\n       build: () {\r\n         when(() => mockRepository.getComponent(any()))\r\n             .thenAnswer((_) async => testComponent);\r\n         when(() => mockRepository.watchComponent(any()))\r\n-            .thenAnswer((_) => Stream.value(testComponent));\r\n+            .thenAnswer((_) => Stream.fromIterable([testComponent]));\r\n         return componentBloc;\r\n       },\r\n       act: (bloc) => bloc.add(ComponentInitialized('Test Component')),\r\n       expect: () => [\r\n@@ -122,5 +138,5 @@\n         verify(() => mockRepository.saveComponentState(any())).called(1);\r\n       },\r\n     );\r\n   });\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1734043528416,
            "name": "Commit-0",
            "content": "// test/blocs/component/component_bloc_test.dart\r\n\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:your_app_name/blocs/component/bloc/component_bloc.dart';\r\nimport 'package:your_app_name/blocs/component/bloc/component_event.dart';\r\nimport 'package:your_app_name/blocs/component/bloc/component_state.dart';\r\nimport 'package:your_app_name/blocs/component/repository/component_repository.dart';\r\nimport 'package:your_app_name/modules/system_operation_also_main_module/models/system_component.dart';\r\n\r\n// Create mocks\r\nclass MockComponentRepository extends Mock implements ComponentRepository {}\r\n\r\nvoid main() {\r\n  late ComponentBloc componentBloc;\r\n  late MockComponentRepository mockRepository;\r\n\r\n  // Test component data\r\n  final testComponent = SystemComponent(\r\n    name: 'Test Component',\r\n    description: 'Test Description',\r\n    currentValues: {'temperature': 25.0},\r\n    setValues: {'temperature': 25.0},\r\n  );\r\n\r\n  setUp(() {\r\n    mockRepository = MockComponentRepository();\r\n    componentBloc = ComponentBloc(mockRepository);\r\n  });\r\n\r\n  tearDown(() {\r\n    componentBloc.close();\r\n  });\r\n\r\n  group('ComponentBloc', () {\r\n    test('initial state is correct', () {\r\n      expect(componentBloc.state, ComponentState.initial());\r\n    });\r\n\r\n    blocTest<ComponentBloc, ComponentState>(\r\n      'emits [loading, loaded] when component is initialized successfully',\r\n      build: () {\r\n        when(() => mockRepository.getComponent(any()))\r\n            .thenAnswer((_) async => testComponent);\r\n        when(() => mockRepository.watchComponent(any()))\r\n            .thenAnswer((_) => Stream.value(testComponent));\r\n        return componentBloc;\r\n      },\r\n      act: (bloc) => bloc.add(ComponentInitialized('Test Component')),\r\n      expect: () => [\r\n        ComponentState.loading(),\r\n        ComponentState.loaded(testComponent),\r\n      ],\r\n    );\r\n\r\n    blocTest<ComponentBloc, ComponentState>(\r\n      'emits [loading, error] when component initialization fails',\r\n      build: () {\r\n        when(() => mockRepository.getComponent(any()))\r\n            .thenThrow(Exception('Failed to load component'));\r\n        return componentBloc;\r\n      },\r\n      act: (bloc) => bloc.add(ComponentInitialized('Test Component')),\r\n      expect: () => [\r\n        ComponentState.loading(),\r\n        ComponentState.error('Exception: Failed to load component'),\r\n      ],\r\n    );\r\n\r\n    blocTest<ComponentBloc, ComponentState>(\r\n      'updates current values correctly',\r\n      build: () {\r\n        when(() => mockRepository.getComponent(any()))\r\n            .thenAnswer((_) async => testComponent);\r\n        when(() => mockRepository.watchComponent(any()))\r\n            .thenAnswer((_) => Stream.value(testComponent));\r\n        when(() => mockRepository.saveComponentState(any()))\r\n            .thenAnswer((_) async {});\r\n        return componentBloc;\r\n      },\r\n      seed: () => ComponentState.loaded(testComponent),\r\n      act: (bloc) => bloc.add(\r\n        ComponentValueUpdated(\r\n          'Test Component',\r\n          {'temperature': 30.0},\r\n        ),\r\n      ),\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveComponentState(any())).called(1);\r\n      },\r\n    );\r\n\r\n    blocTest<ComponentBloc, ComponentState>(\r\n      'toggles activation correctly',\r\n      build: () {\r\n        when(() => mockRepository.saveComponentState(any()))\r\n            .thenAnswer((_) async {});\r\n        return componentBloc;\r\n      },\r\n      seed: () => ComponentState.loaded(testComponent),\r\n      act: (bloc) => bloc.add(\r\n        ComponentActivationToggled('Test Component', true),\r\n      ),\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveComponentState(any())).called(1);\r\n      },\r\n    );\r\n\r\n    blocTest<ComponentBloc, ComponentState>(\r\n      'adds error message correctly',\r\n      build: () {\r\n        when(() => mockRepository.saveComponentState(any()))\r\n            .thenAnswer((_) async {});\r\n        return componentBloc;\r\n      },\r\n      seed: () => ComponentState.loaded(testComponent),\r\n      act: (bloc) => bloc.add(\r\n        ComponentErrorAdded('Test Component', 'Test Error'),\r\n      ),\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveComponentState(any())).called(1);\r\n      },\r\n    );\r\n  });\r\n}"
        }
    ]
}