{
    "sourceFile": "test/blocs/log/system_log_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1734050483216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734050741523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+// test/blocs/log/system_log_bloc_test.dart\r\n+import 'package:bloc_test/bloc_test.dart';\r\n+import 'package:flutter_test/flutter_test.dart';\r\n+import 'package:mocktail/mocktail.dart';\r\n+import 'package:experiment_planner/blocs/log/bloc/system_log_bloc.dart';\r\n+import 'package:experiment_planner/blocs/log/bloc/system_log_event.dart';\r\n+import 'package:experiment_planner/blocs/log/bloc/system_log_state.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_log_entry.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n+import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/repositories/system_log_entry_repository.dart';\r\n+\r\n+// Mock implementations\r\n+class MockSystemLogEntryRepository extends Mock implements SystemLogEntryRepository {}\r\n+class MockAuthService extends Mock implements AuthService {}\r\n+class FakeSystemLogEntry extends Fake implements SystemLogEntry {}\r\n+\r\n+void main() {\r\n+  setUpAll(() {\r\n+    registerFallbackValue(ComponentStatus.normal);\r\n+    registerFallbackValue(FakeSystemLogEntry());\r\n+  });\r\n+\r\n+  late SystemLogBloc logBloc;\r\n+  late MockSystemLogEntryRepository repository;\r\n+  late MockAuthService authService;\r\n+\r\n+  setUp(() {\r\n+    repository = MockSystemLogEntryRepository();\r\n+    authService = MockAuthService();\r\n+    logBloc = SystemLogBloc(\r\n+      repository: repository,\r\n+      authService: authService,\r\n+    );\r\n+\r\n+    // Set up default auth mock\r\n+    when(() => authService.currentUserId).thenReturn('test-user');\r\n+  });\r\n+\r\n+  tearDown(() {\r\n+    logBloc.close();\r\n+  });\r\n+\r\n+  final testEntry = SystemLogEntry(\r\n+    timestamp: DateTime.now(),\r\n+    message: 'Test message',\r\n+    severity: ComponentStatus.normal,\r\n+  );\r\n+\r\n+  test('initial state is correct', () {\r\n+    expect(logBloc.state, equals(SystemLogState.initial()));\r\n+  });\r\n+\r\n+  group('LogEntryAdded', () {\r\n+    blocTest<SystemLogBloc, SystemLogState>(\r\n+      'emits updated state when log entry is added',\r\n+      build: () {\r\n+        when(() => repository.add(any(), any(), userId: any(named: 'userId')))\r\n+            .thenAnswer((_) async {});\r\n+        return logBloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(LogEntryAdded(\r\n+        message: 'Test message',\r\n+        severity: ComponentStatus.normal,\r\n+      )),\r\n+      expect: () => [\r\n+        predicate<SystemLogState>((state) =>\r\n+          state.entries.length == 1 &&\r\n+          state.entries.first.message == 'Test message' &&\r\n+          state.entries.first.severity == ComponentStatus.normal\r\n+        ),\r\n+      ],\r\n+      verify: (_) {\r\n+        verify(() => repository.add(any(), any(), userId: 'test-user')).called(1);\r\n+      },\r\n+    );\r\n+\r\n+    blocTest<SystemLogBloc, SystemLogState>(\r\n+      'emits error when user is not authenticated',\r\n+      build: () {\r\n+        when(() => authService.currentUserId).thenReturn(null);\r\n+        return logBloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(LogEntryAdded(\r\n+        message: 'Test message',\r\n+        severity: ComponentStatus.normal,\r\n+      )),\r\n+      expect: () => [\r\n+        predicate<SystemLogState>((state) =>\r\n+          state.error == 'User not authenticated'\r\n+        ),\r\n+      ],\r\n+    );\r\n+  });\r\n+\r\n+  group('LogEntriesLoaded', () {\r\n+    final testEntries = [\r\n+      testEntry,\r\n+      SystemLogEntry(\r\n+        timestamp: DateTime.now().subtract(Duration(minutes: 1)),\r\n+        message: 'Previous message',\r\n+        severity: ComponentStatus.warning,\r\n+      ),\r\n+    ];\r\n+\r\n+    blocTest<SystemLogBloc, SystemLogState>(\r\n+      'emits loaded entries',\r\n+      build: () {\r\n+        when(() => repository.getRecentEntries(any(), limit: any(named: 'limit')))\r\n+            .thenAnswer((_) async => testEntries);\r\n+        return logBloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(LogEntriesLoaded(limit: 10)),\r\n+      expect: () => [\r\n+        predicate<SystemLogState>((state) => state.isLoading == true),\r\n+        predicate<SystemLogState>((state) =>\r\n+          state.isLoading == false &&\r\n+          state.entries.length == 2 &&\r\n+          state.hasMoreEntries == false\r\n+        ),\r\n+      ],\r\n+    );\r\n+  });\r\n+\r\n+  group('LogEntriesFiltered', () {\r\n+    final startDate = DateTime.now().subtract(Duration(days: 1));\r\n+    final endDate = DateTime.now();\r\n+\r\n+    blocTest<SystemLogBloc, SystemLogState>(\r\n+      'emits filtered entries',\r\n+      build: () {\r\n+        when(() => repository.getEntriesByDateRange(any(), any(), any()))\r\n+            .thenAnswer((_) async => [testEntry]);\r\n+        return logBloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(LogEntriesFiltered(\r\n+        startDate: startDate,\r\n+        endDate: endDate,\r\n+        severityFilter: ComponentStatus.normal,\r\n+      )),\r\n+      expect: () => [\r\n+        predicate<SystemLogState>((state) => state.isLoading == true),\r\n+        predicate<SystemLogState>((state) =>\r\n+          state.isLoading == false &&\r\n+          state.entries.length == 1 &&\r\n+          state.startDate == startDate &&\r\n+          state.endDate == endDate\r\n+        ),\r\n+      ],\r\n+    );\r\n+  });\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734050483216,
            "name": "Commit-0",
            "content": ""
        }
    ]
}