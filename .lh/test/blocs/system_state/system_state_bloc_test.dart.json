{
    "sourceFile": "test/blocs/system_state/system_state_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1734302345153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734302666309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n \r\n+import 'bloc/system_state_bloc_test.dart';\r\n+\r\n // Generate mock class\r\n @GenerateNiceMocks([\r\n   MockSpec<SystemStateRepository>(),\r\n ])\r\n"
                },
                {
                    "date": 1734302681197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,8 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n \r\n-import 'bloc/system_state_bloc_test.dart';\r\n-\r\n // Generate mock class\r\n @GenerateNiceMocks([\r\n   MockSpec<SystemStateRepository>(),\r\n ])\r\n"
                },
                {
                    "date": 1734302741990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+// test/blocs/system_state/system_state_bloc_test.dart\r\n+\r\n+import 'package:flutter_test/flutter_test.dart';\r\n+import 'package:bloc_test/bloc_test.dart';\r\n+import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n+import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n+\r\n+// Create a test repository implementation\r\n+class TestSystemStateRepository extends SystemStateRepository {\r\n+  SystemStateData? _mockState;\r\n+\r\n+  void setMockState(SystemStateData state) {\r\n+    _mockState = state;\r\n+  }\r\n+\r\n+  @override\r\n+  Future<SystemStateData?> getSystemState() async {\r\n+    return _mockState;\r\n+  }\r\n+\r\n+  @override\r\n+  Stream<SystemStateData?> systemStateStream() {\r\n+    return Stream.value(_mockState);\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> saveSystemState(Map<String, dynamic> stateData) async {\r\n+    // Mock implementation\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  late SystemStateBloc bloc;\r\n+  late TestSystemStateRepository repository;\r\n+\r\n+  setUp(() {\r\n+    repository = TestSystemStateRepository();\r\n+    bloc = SystemStateBloc(repository);\r\n+  });\r\n+\r\n+  tearDown(() {\r\n+    bloc.close();\r\n+  });\r\n+\r\n+  group('SystemStateBloc Tests', () {\r\n+    test('initial state is correct', () {\r\n+      expect(bloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n+      expect(bloc.state.isSystemRunning, isFalse);\r\n+      expect(bloc.state.systemIssues, isEmpty);\r\n+      expect(bloc.state.currentSystemState, isEmpty);\r\n+      expect(bloc.state.lastStateUpdate, isNull);\r\n+      expect(bloc.state.isReadinessCheckPassed, isFalse);\r\n+      expect(bloc.state.isLoading, isFalse);\r\n+      expect(bloc.state.error, isNull);\r\n+    });\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'initializes with existing state',\r\n+      build: () {\r\n+        final mockState = SystemStateData(\r\n+          id: '1',\r\n+          data: {\r\n+            'components': {\r\n+              'component1': {\r\n+                'isActivated': true,\r\n+                'currentValues': {'temp': 25.0},\r\n+                'setValues': {'temp': 25.0},\r\n+              }\r\n+            }\r\n+          },\r\n+          timestamp: DateTime.now(),\r\n+        );\r\n+\r\n+        repository.setMockState(mockState);\r\n+        return bloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(InitializeSystem()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.initializing &&\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.ready &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'handles start system when ready',\r\n+      build: () => bloc,\r\n+      seed: () => SystemStateState(\r\n+        status: SystemOperationalStatus.ready,\r\n+        isSystemRunning: false,\r\n+        systemIssues: [],\r\n+      ),\r\n+      act: (bloc) => bloc.add(StartSystem()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.running &&\r\n+            state.isSystemRunning == true &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'handles emergency stop from any state',\r\n+      build: () => bloc,\r\n+      act: (bloc) => bloc.add(EmergencyStop()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.emergencyStopped &&\r\n+            state.isSystemRunning == false &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+  });\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734302796608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,53 @@\n // test/blocs/system_state/system_state_bloc_test.dart\r\n \r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n-import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:firebase_core/firebase_core.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n+import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n \r\n-// Create a test repository implementation\r\n-class TestSystemStateRepository extends SystemStateRepository {\r\n+// Mock repository that doesn't depend on Firebase\r\n+class TestSystemStateRepository {\r\n+  final FakeFirebaseFirestore fakeFirestore;\r\n   SystemStateData? _mockState;\r\n \r\n+  TestSystemStateRepository({required this.fakeFirestore});\r\n+\r\n   void setMockState(SystemStateData state) {\r\n     _mockState = state;\r\n   }\r\n \r\n-  @override\r\n   Future<SystemStateData?> getSystemState() async {\r\n     return _mockState;\r\n   }\r\n \r\n-  @override\r\n   Stream<SystemStateData?> systemStateStream() {\r\n     return Stream.value(_mockState);\r\n   }\r\n \r\n-  @override\r\n   Future<void> saveSystemState(Map<String, dynamic> stateData) async {\r\n-    // Mock implementation\r\n+    String id = DateTime.now().millisecondsSinceEpoch.toString();\r\n+    await fakeFirestore.collection('system_states').doc(id).set(stateData);\r\n   }\r\n }\r\n \r\n void main() {\r\n+  TestWidgetsFlutterBinding.ensureInitialized();\r\n   late SystemStateBloc bloc;\r\n   late TestSystemStateRepository repository;\r\n+  late FakeFirebaseFirestore fakeFirestore;\r\n \r\n+  setUpAll(() async {\r\n+    await Firebase.initializeApp();\r\n+  });\r\n+\r\n   setUp(() {\r\n-    repository = TestSystemStateRepository();\r\n+    fakeFirestore = FakeFirebaseFirestore();\r\n+    repository = TestSystemStateRepository(fakeFirestore: fakeFirestore);\r\n     bloc = SystemStateBloc(repository);\r\n   });\r\n \r\n   tearDown(() {\r\n"
                },
                {
                    "date": 1734302982243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,84 +129,5 @@\n             state.isLoading == false),\r\n       ],\r\n     );\r\n   });\r\n-}\n-// lib/blocs/system_state/bloc/system_state_bloc_test.dart\r\n-\r\n-import 'package:flutter_test/flutter_test.dart';\r\n-import 'package:mockito/mockito.dart';\r\n-import 'package:mockito/annotations.dart';\r\n-import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n-import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n-import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n-\r\n-// Generate mock class\r\n-@GenerateNiceMocks([\r\n-  MockSpec<SystemStateRepository>(),\r\n-])\r\n-class TestHelper {}\r\n-\r\n-void main() {\r\n-  late SystemStateBloc bloc;\r\n-  late MockSystemStateRepository repository;\r\n-\r\n-  setUp(() {\r\n-    repository = MockSystemStateRepository();\r\n-    bloc = SystemStateBloc(repository);\r\n-  });\r\n-\r\n-  tearDown(() {\r\n-    bloc.close();\r\n-  });\r\n-\r\n-  group('SystemStateBloc Initialization', () {\r\n-    test('initial state is correct', () {\r\n-      expect(bloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n-      expect(bloc.state.isSystemRunning, isFalse);\r\n-      expect(bloc.state.systemIssues, isEmpty);\r\n-      expect(bloc.state.currentSystemState, isEmpty);\r\n-      expect(bloc.state.lastStateUpdate, isNull);\r\n-      expect(bloc.state.isReadinessCheckPassed, isFalse);\r\n-      expect(bloc.state.isLoading, isFalse);\r\n-      expect(bloc.state.error, isNull);\r\n-    });\r\n-\r\n-    test('initializes with existing state', () async {\r\n-      final mockState = SystemStateData(\r\n-        id: '1',\r\n-        data: {\r\n-          'components': {\r\n-            'component1': {\r\n-              'isActivated': true,\r\n-              'currentValues': {'temp': 25.0},\r\n-              'setValues': {'temp': 25.0},\r\n-            }\r\n-          }\r\n-        },\r\n-        timestamp: DateTime.now(),\r\n-      );\r\n-\r\n-      when(repository.getSystemState())\r\n-          .thenAnswer((_) async => mockState);\r\n-      when(repository.systemStateStream())\r\n-          .thenAnswer((_) => Stream.value(mockState));\r\n-\r\n-      bloc.add(InitializeSystem());\r\n-\r\n-      await expectLater(\r\n-        bloc.stream,\r\n-        emitsInOrder([\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.initializing &&\r\n-              state.isLoading == true),\r\n-          predicate<SystemStateState>((state) =>\r\n-              state.status == SystemOperationalStatus.ready &&\r\n-              state.currentSystemState == mockState.data &&\r\n-              state.isLoading == false),\r\n-        ]),\r\n-      );\r\n-    });\r\n-  });\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734303023981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+// test/blocs/system_state/system_state_bloc_test.dart\r\n+\r\n+import 'package:flutter_test/flutter_test.dart';\r\n+import 'package:bloc_test/bloc_test.dart';\r\n+import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n+import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n+import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n+\r\n+// Mock repository that extends SystemStateRepository\r\n+class TestSystemStateRepository extends SystemStateRepository {\r\n+  final FakeFirebaseFirestore fakeFirestore;\r\n+  SystemStateData? _mockState;\r\n+\r\n+  TestSystemStateRepository({required this.fakeFirestore}) : super();\r\n+\r\n+  void setMockState(SystemStateData state) {\r\n+    _mockState = state;\r\n+  }\r\n+\r\n+  @override\r\n+  Future<SystemStateData?> getSystemState() async {\r\n+    return _mockState;\r\n+  }\r\n+\r\n+  @override\r\n+  Stream<SystemStateData?> systemStateStream() {\r\n+    return Stream.value(_mockState);\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> saveSystemState(Map<String, dynamic> stateData) async {\r\n+    String id = DateTime.now().millisecondsSinceEpoch.toString();\r\n+    await fakeFirestore.collection('system_states').doc(id).set({\r\n+      ...stateData,\r\n+      'timestamp': FieldValue.serverTimestamp(),\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> saveComponentState(String userId, SystemComponent component) async {\r\n+    await fakeFirestore\r\n+        .collection('users')\r\n+        .doc(userId)\r\n+        .collection('system_components')\r\n+        .doc(component.name)\r\n+        .set(component.toJson());\r\n+  }\r\n+\r\n+  @override\r\n+  Future<SystemComponent?> getComponentByName(String userId, String name) async {\r\n+    final doc = await fakeFirestore\r\n+        .collection('users')\r\n+        .doc(userId)\r\n+        .collection('system_components')\r\n+        .doc(name)\r\n+        .get();\r\n+\r\n+    if (doc.exists) {\r\n+      return SystemComponent.fromJson(doc.data()!);\r\n+    }\r\n+    return null;\r\n+  }\r\n+\r\n+  @override\r\n+  Future<List<SystemComponent>> getAllComponents(String userId) async {\r\n+    final snapshot = await fakeFirestore\r\n+        .collection('users')\r\n+        .doc(userId)\r\n+        .collection('system_components')\r\n+        .get();\r\n+\r\n+    return snapshot.docs\r\n+        .map((doc) => SystemComponent.fromJson(doc.data()))\r\n+        .toList();\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  TestWidgetsFlutterBinding.ensureInitialized();\r\n+  late SystemStateBloc bloc;\r\n+  late TestSystemStateRepository repository;\r\n+  late FakeFirebaseFirestore fakeFirestore;\r\n+\r\n+  setUpAll(() async {\r\n+    await Firebase.initializeApp();\r\n+  });\r\n+\r\n+  setUp(() {\r\n+    fakeFirestore = FakeFirebaseFirestore();\r\n+    repository = TestSystemStateRepository(fakeFirestore: fakeFirestore);\r\n+    bloc = SystemStateBloc(repository);\r\n+  });\r\n+\r\n+  tearDown(() {\r\n+    bloc.close();\r\n+  });\r\n+\r\n+  group('SystemStateBloc Tests', () {\r\n+    test('initial state is correct', () {\r\n+      expect(bloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n+      expect(bloc.state.isSystemRunning, isFalse);\r\n+      expect(bloc.state.systemIssues, isEmpty);\r\n+      expect(bloc.state.currentSystemState, isEmpty);\r\n+      expect(bloc.state.lastStateUpdate, isNull);\r\n+      expect(bloc.state.isReadinessCheckPassed, isFalse);\r\n+      expect(bloc.state.isLoading, isFalse);\r\n+      expect(bloc.state.error, isNull);\r\n+    });\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'initializes with existing state',\r\n+      build: () {\r\n+        final mockState = SystemStateData(\r\n+          id: '1',\r\n+          data: {\r\n+            'components': {\r\n+              'component1': {\r\n+                'isActivated': true,\r\n+                'currentValues': {'temp': 25.0},\r\n+                'setValues': {'temp': 25.0},\r\n+              }\r\n+            }\r\n+          },\r\n+          timestamp: DateTime.now(),\r\n+        );\r\n+\r\n+        repository.setMockState(mockState);\r\n+        return bloc;\r\n+      },\r\n+      act: (bloc) => bloc.add(InitializeSystem()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.initializing &&\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.ready &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'handles start system when ready',\r\n+      build: () => bloc,\r\n+      seed: () => SystemStateState(\r\n+        status: SystemOperationalStatus.ready,\r\n+        isSystemRunning: false,\r\n+        systemIssues: [],\r\n+      ),\r\n+      act: (bloc) => bloc.add(StartSystem()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.running &&\r\n+            state.isSystemRunning == true &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+\r\n+    blocTest<SystemStateBloc, SystemStateState>(\r\n+      'handles emergency stop from any state',\r\n+      build: () => bloc,\r\n+      act: (bloc) => bloc.add(EmergencyStop()),\r\n+      expect: () => [\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.isLoading == true),\r\n+        predicate<SystemStateState>((state) =>\r\n+            state.status == SystemOperationalStatus.emergencyStopped &&\r\n+            state.isSystemRunning == false &&\r\n+            state.isLoading == false),\r\n+      ],\r\n+    );\r\n+  });\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734303033012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // test/blocs/system_state/system_state_bloc_test.dart\r\n \r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n"
                },
                {
                    "date": 1734303084980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // test/blocs/system_state/system_state_bloc_test.dart\r\n \r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n@@ -11,9 +10,21 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n \r\n-// Mock repository that extends SystemStateRepository\r\n+// Mock Firebase setup\r\n+class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n+\r\n+// Setup mock Firebase initialization\r\n+Future<void> setupFirebaseAuthMocks() async {\r\n+  TestWidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  // Setup mock Firebase app\r\n+  final mockApp = MockFirebaseApp();\r\n+  when(() => Firebase.app()).thenReturn(mockApp);\r\n+  when(() => Firebase.initializeApp()).thenAnswer((_) async => mockApp);\r\n+}\r\n+\r\n class TestSystemStateRepository extends SystemStateRepository {\r\n   final FakeFirebaseFirestore fakeFirestore;\r\n   SystemStateData? _mockState;\r\n \r\n@@ -87,9 +98,10 @@\n   late TestSystemStateRepository repository;\r\n   late FakeFirebaseFirestore fakeFirestore;\r\n \r\n   setUpAll(() async {\r\n-    await Firebase.initializeApp();\r\n+    // Initialize mock Firebase\r\n+    await setupFirebaseAuthMocks();\r\n   });\r\n \r\n   setUp(() {\r\n     fakeFirestore = FakeFirebaseFirestore();\r\n"
                },
                {
                    "date": 1734303148706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // test/blocs/system_state/system_state_bloc_test.dart\r\n \r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n@@ -9,8 +10,9 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n+import 'package:mockito/mockito.dart';\r\n \r\n // Mock Firebase setup\r\n class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n \r\n"
                },
                {
                    "date": 1734303162003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n-import 'package:mockito/mockito.dart';\r\n+import 'package:mocktail/mocktail.dart';\r\n \r\n // Mock Firebase setup\r\n class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n \r\n"
                },
                {
                    "date": 1734303180253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n-import 'package:mocktail/mocktail.dart';\r\n+import 'package:mockito/mockito.dart';\r\n \r\n // Mock Firebase setup\r\n class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n \r\n"
                },
                {
                    "date": 1734303186785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // test/blocs/system_state/system_state_bloc_test.dart\r\n \r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/system_component.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n@@ -10,9 +9,8 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n-import 'package:mockito/mockito.dart';\r\n \r\n // Mock Firebase setup\r\n class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n \r\n"
                },
                {
                    "date": 1734303248828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';\r\n \r\n+import '../../helpers/firebase_test_setup.dart';\r\n+\r\n // Mock Firebase setup\r\n class MockFirebaseApp extends Mock implements FirebaseApp {}\r\n \r\n // Setup mock Firebase initialization\r\n"
                },
                {
                    "date": 1734376765519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n"
                }
            ],
            "date": 1734302345153,
            "name": "Commit-0",
            "content": "// lib/blocs/system_state/bloc/system_state_bloc_test.dart\r\n\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mockito/mockito.dart';\r\nimport 'package:mockito/annotations.dart';\r\nimport 'package:experiment_planner/repositories/system_state_repository.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\nimport 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\nimport 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n\r\n// Generate mock class\r\n@GenerateNiceMocks([\r\n  MockSpec<SystemStateRepository>(),\r\n])\r\nclass TestHelper {}\r\n\r\nvoid main() {\r\n  late SystemStateBloc bloc;\r\n  late MockSystemStateRepository repository;\r\n\r\n  setUp(() {\r\n    repository = MockSystemStateRepository();\r\n    bloc = SystemStateBloc(repository);\r\n  });\r\n\r\n  tearDown(() {\r\n    bloc.close();\r\n  });\r\n\r\n  group('SystemStateBloc Initialization', () {\r\n    test('initial state is correct', () {\r\n      expect(bloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n      expect(bloc.state.isSystemRunning, isFalse);\r\n      expect(bloc.state.systemIssues, isEmpty);\r\n      expect(bloc.state.currentSystemState, isEmpty);\r\n      expect(bloc.state.lastStateUpdate, isNull);\r\n      expect(bloc.state.isReadinessCheckPassed, isFalse);\r\n      expect(bloc.state.isLoading, isFalse);\r\n      expect(bloc.state.error, isNull);\r\n    });\r\n\r\n    test('initializes with existing state', () async {\r\n      final mockState = SystemStateData(\r\n        id: '1',\r\n        data: {\r\n          'components': {\r\n            'component1': {\r\n              'isActivated': true,\r\n              'currentValues': {'temp': 25.0},\r\n              'setValues': {'temp': 25.0},\r\n            }\r\n          }\r\n        },\r\n        timestamp: DateTime.now(),\r\n      );\r\n\r\n      when(repository.getSystemState())\r\n          .thenAnswer((_) async => mockState);\r\n      when(repository.systemStateStream())\r\n          .thenAnswer((_) => Stream.value(mockState));\r\n\r\n      bloc.add(InitializeSystem());\r\n\r\n      await expectLater(\r\n        bloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.initializing &&\r\n              state.isLoading == true),\r\n          predicate<SystemStateState>((state) =>\r\n              state.status == SystemOperationalStatus.ready &&\r\n              state.currentSystemState == mockState.data &&\r\n              state.isLoading == false),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n}"
        }
    ]
}