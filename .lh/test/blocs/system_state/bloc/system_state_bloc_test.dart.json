{
    "sourceFile": "test/blocs/system_state/bloc/system_state_bloc_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1734047210848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734047254938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n // test/blocs/system_state/bloc/system_state_bloc_test.dart\r\n \r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n+import 'package:experiment_planner/blocs/system_state/models/system_state_data.dart';\r\n+import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import 'package:your_app_name/blocs/system_state/bloc/system_state_bloc.dart';\r\n-import 'package:your_app_name/blocs/system_state/bloc/system_state_event.dart';\r\n-import 'package:your_app_name/blocs/system_state/bloc/system_state_state.dart';\r\n-import 'package:your_app_name/blocs/system_state/repository/system_state_repository.dart';\r\n-import 'package:your_app_name/blocs/system_state/models/system_state_data.dart';\r\n \r\n // Mock repository\r\n class MockSystemStateRepository extends Mock implements SystemStateRepository {}\r\n \r\n"
                },
                {
                    "date": 1734047371275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n+\r\n+\r\n // Mock repository\r\n class MockSystemStateRepository extends Mock implements SystemStateRepository {}\r\n \r\n void main() {\r\n"
                },
                {
                    "date": 1734047464132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,29 @@\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:bloc_test/bloc_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n+// Mock repository\r\n+class MockSystemStateRepository extends Mock implements SystemStateRepository {\r\n+  @override\r\n+  Future<SystemStateData?> getLatestState() async => super.noSuchMethod(\r\n+        Invocation.method(#getLatestState, []),\r\n+        returnValue: Future.value(null),\r\n+      );\r\n \r\n+  @override\r\n+  Stream<SystemStateData> watchSystemState() => super.noSuchMethod(\r\n+        Invocation.method(#watchSystemState, []),\r\n+        returnValue: const Stream.empty(),\r\n+      );\r\n \r\n-// Mock repository\r\n-class MockSystemStateRepository extends Mock implements SystemStateRepository {}\r\n+  @override\r\n+  Future<void> saveSystemState(Map<String, dynamic> stateData) async =>\r\n+      super.noSuchMethod(\r\n+        Invocation.method(#saveSystemState, [stateData]),\r\n+        returnValue: Future<void>.value(),\r\n+      );\r\n+}\r\n \r\n void main() {\r\n   late SystemStateBloc systemStateBloc;\r\n   late MockSystemStateRepository mockRepository;\r\n@@ -97,10 +114,9 @@\n \r\n     blocTest<SystemStateBloc, SystemStateState>(\r\n       'emits correct states when StartSystem succeeds',\r\n       setUp: () {\r\n-        when(() => mockRepository.saveSystemState(any()))\r\n-            .thenAnswer((_) async {});\r\n+        when(() => mockRepository.saveSystemState(any())).thenAnswer((_) async {});\r\n       },\r\n       build: () => systemStateBloc,\r\n       seed: () => SystemStateState(\r\n         status: SystemOperationalStatus.ready,\r\n@@ -125,10 +141,9 @@\n \r\n     blocTest<SystemStateBloc, SystemStateState>(\r\n       'emits correct states when StopSystem succeeds',\r\n       setUp: () {\r\n-        when(() => mockRepository.saveSystemState(any()))\r\n-            .thenAnswer((_) async {});\r\n+        when(() => mockRepository.saveSystemState(any())).thenAnswer((_) async {});\r\n       },\r\n       build: () => systemStateBloc,\r\n       seed: () => SystemStateState(\r\n         status: SystemOperationalStatus.running,\r\n@@ -153,10 +168,9 @@\n \r\n     blocTest<SystemStateBloc, SystemStateState>(\r\n       'emits correct states when EmergencyStop is triggered',\r\n       setUp: () {\r\n-        when(() => mockRepository.saveSystemState(any()))\r\n-            .thenAnswer((_) async {});\r\n+        when(() => mockRepository.saveSystemState(any())).thenAnswer((_) async {});\r\n       },\r\n       build: () => systemStateBloc,\r\n       seed: () => SystemStateState(\r\n         status: SystemOperationalStatus.running,\r\n@@ -198,10 +212,9 @@\n \r\n     blocTest<SystemStateBloc, SystemStateState>(\r\n       'emits correct states when UpdateSystemParameters succeeds',\r\n       setUp: () {\r\n-        when(() => mockRepository.saveSystemState(any()))\r\n-            .thenAnswer((_) async {});\r\n+        when(() => mockRepository.saveSystemState(any())).thenAnswer((_) async {});\r\n       },\r\n       build: () => systemStateBloc,\r\n       seed: () => SystemStateState(\r\n         currentSystemState: testSystemState.data,\r\n"
                },
                {
                    "date": 1734047542246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,25 +11,30 @@\n \r\n // Mock repository\r\n class MockSystemStateRepository extends Mock implements SystemStateRepository {\r\n   @override\r\n-  Future<SystemStateData?> getLatestState() async => super.noSuchMethod(\r\n-        Invocation.method(#getLatestState, []),\r\n-        returnValue: Future.value(null),\r\n-      );\r\n+  Future<SystemStateData?> getLatestState() {\r\n+    return super.noSuchMethod(\r\n+      Invocation.method(#getLatestState, []),\r\n+      returnValueForMissingStub: Future.value(null),\r\n+    ) as Future<SystemStateData?>;\r\n+  }\r\n \r\n   @override\r\n-  Stream<SystemStateData> watchSystemState() => super.noSuchMethod(\r\n-        Invocation.method(#watchSystemState, []),\r\n-        returnValue: const Stream.empty(),\r\n-      );\r\n+  Stream<SystemStateData> watchSystemState() {\r\n+    return super.noSuchMethod(\r\n+      Invocation.method(#watchSystemState, []),\r\n+      returnValueForMissingStub: Stream.empty(),\r\n+    ) as Stream<SystemStateData>;\r\n+  }\r\n \r\n   @override\r\n-  Future<void> saveSystemState(Map<String, dynamic> stateData) async =>\r\n-      super.noSuchMethod(\r\n-        Invocation.method(#saveSystemState, [stateData]),\r\n-        returnValue: Future<void>.value(),\r\n-      );\r\n+  Future<void> saveSystemState(Map<String, dynamic> stateData) {\r\n+    return super.noSuchMethod(\r\n+      Invocation.method(#saveSystemState, [stateData]),\r\n+      returnValueForMissingStub: Future<void>.value(),\r\n+    ) as Future<void>;\r\n+  }\r\n }\r\n \r\n void main() {\r\n   late SystemStateBloc systemStateBloc;\r\n"
                },
                {
                    "date": 1734047649521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,29 +12,18 @@\n // Mock repository\r\n class MockSystemStateRepository extends Mock implements SystemStateRepository {\r\n   @override\r\n   Future<SystemStateData?> getLatestState() {\r\n-    return super.noSuchMethod(\r\n-      Invocation.method(#getLatestState, []),\r\n-      returnValueForMissingStub: Future.value(null),\r\n-    ) as Future<SystemStateData?>;\r\n+    return Future.value(null);\r\n   }\r\n \r\n   @override\r\n   Stream<SystemStateData> watchSystemState() {\r\n-    return super.noSuchMethod(\r\n-      Invocation.method(#watchSystemState, []),\r\n-      returnValueForMissingStub: Stream.empty(),\r\n-    ) as Stream<SystemStateData>;\r\n+    return Stream.empty();\r\n   }\r\n \r\n   @override\r\n-  Future<void> saveSystemState(Map<String, dynamic> stateData) {\r\n-    return super.noSuchMethod(\r\n-      Invocation.method(#saveSystemState, [stateData]),\r\n-      returnValueForMissingStub: Future<void>.value(),\r\n-    ) as Future<void>;\r\n-  }\r\n+  Future<void> saveSystemState(Map<String, dynamic> stateData) async {}\r\n }\r\n \r\n void main() {\r\n   late SystemStateBloc systemStateBloc;\r\n@@ -95,8 +84,14 @@\n         ),\r\n       ],\r\n     );\r\n \r\n+    // Add test for validation using helper\r\n+    test('validates system state correctly', () {\r\n+      final issues = SystemStateTestHelper.validateTestState(testSystemState.data);\r\n+      expect(issues, isEmpty);\r\n+    });\r\n+\r\n     blocTest<SystemStateBloc, SystemStateState>(\r\n       'emits [loading, error] when InitializeSystem fails',\r\n       build: () {\r\n         when(() => mockRepository.getLatestState())\r\n"
                }
            ],
            "date": 1734047210848,
            "name": "Commit-0",
            "content": "// test/blocs/system_state/bloc/system_state_bloc_test.dart\r\n\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:bloc_test/bloc_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport 'package:your_app_name/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:your_app_name/blocs/system_state/bloc/system_state_event.dart';\r\nimport 'package:your_app_name/blocs/system_state/bloc/system_state_state.dart';\r\nimport 'package:your_app_name/blocs/system_state/repository/system_state_repository.dart';\r\nimport 'package:your_app_name/blocs/system_state/models/system_state_data.dart';\r\n\r\n// Mock repository\r\nclass MockSystemStateRepository extends Mock implements SystemStateRepository {}\r\n\r\nvoid main() {\r\n  late SystemStateBloc systemStateBloc;\r\n  late MockSystemStateRepository mockRepository;\r\n\r\n  // Test data\r\n  final testSystemState = SystemStateData(\r\n    id: 'test-id',\r\n    data: {\r\n      'components': {\r\n        'component1': {\r\n          'isActivated': true,\r\n          'currentValues': {'temperature': 25.0},\r\n          'setValues': {'temperature': 25.0},\r\n          'minValues': {'temperature': 20.0},\r\n          'maxValues': {'temperature': 30.0},\r\n        },\r\n      },\r\n    },\r\n    timestamp: DateTime.now(),\r\n  );\r\n\r\n  setUp(() {\r\n    mockRepository = MockSystemStateRepository();\r\n    systemStateBloc = SystemStateBloc(mockRepository);\r\n  });\r\n\r\n  tearDown(() {\r\n    systemStateBloc.close();\r\n  });\r\n\r\n  group('SystemStateBloc', () {\r\n    test('initial state is correct', () {\r\n      expect(systemStateBloc.state.status, equals(SystemOperationalStatus.uninitialized));\r\n      expect(systemStateBloc.state.isSystemRunning, isFalse);\r\n      expect(systemStateBloc.state.systemIssues, isEmpty);\r\n    });\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits [loading, ready] when InitializeSystem succeeds',\r\n      build: () {\r\n        when(() => mockRepository.getLatestState())\r\n            .thenAnswer((_) async => testSystemState);\r\n        when(() => mockRepository.watchSystemState())\r\n            .thenAnswer((_) => Stream.value(testSystemState));\r\n        return systemStateBloc;\r\n      },\r\n      act: (bloc) => bloc.add(InitializeSystem()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.status == SystemOperationalStatus.initializing && state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) =>\r\n              state.status == SystemOperationalStatus.ready &&\r\n              !state.isLoading &&\r\n              state.currentSystemState == testSystemState.data,\r\n        ),\r\n      ],\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits [loading, error] when InitializeSystem fails',\r\n      build: () {\r\n        when(() => mockRepository.getLatestState())\r\n            .thenThrow(Exception('Failed to initialize'));\r\n        return systemStateBloc;\r\n      },\r\n      act: (bloc) => bloc.add(InitializeSystem()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.status == SystemOperationalStatus.initializing && state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) =>\r\n              state.status == SystemOperationalStatus.error &&\r\n              !state.isLoading &&\r\n              state.error != null,\r\n        ),\r\n      ],\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits correct states when StartSystem succeeds',\r\n      setUp: () {\r\n        when(() => mockRepository.saveSystemState(any()))\r\n            .thenAnswer((_) async {});\r\n      },\r\n      build: () => systemStateBloc,\r\n      seed: () => SystemStateState(\r\n        status: SystemOperationalStatus.ready,\r\n        isReadinessCheckPassed: true,\r\n      ),\r\n      act: (bloc) => bloc.add(StartSystem()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) =>\r\n              state.status == SystemOperationalStatus.running &&\r\n              state.isSystemRunning &&\r\n              !state.isLoading,\r\n        ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveSystemState(any())).called(1);\r\n      },\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits correct states when StopSystem succeeds',\r\n      setUp: () {\r\n        when(() => mockRepository.saveSystemState(any()))\r\n            .thenAnswer((_) async {});\r\n      },\r\n      build: () => systemStateBloc,\r\n      seed: () => SystemStateState(\r\n        status: SystemOperationalStatus.running,\r\n        isSystemRunning: true,\r\n      ),\r\n      act: (bloc) => bloc.add(StopSystem()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) =>\r\n              state.status == SystemOperationalStatus.ready &&\r\n              !state.isSystemRunning &&\r\n              !state.isLoading,\r\n        ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveSystemState(any())).called(1);\r\n      },\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits correct states when EmergencyStop is triggered',\r\n      setUp: () {\r\n        when(() => mockRepository.saveSystemState(any()))\r\n            .thenAnswer((_) async {});\r\n      },\r\n      build: () => systemStateBloc,\r\n      seed: () => SystemStateState(\r\n        status: SystemOperationalStatus.running,\r\n        isSystemRunning: true,\r\n      ),\r\n      act: (bloc) => bloc.add(EmergencyStop()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) =>\r\n              state.status == SystemOperationalStatus.emergencyStopped &&\r\n              !state.isSystemRunning &&\r\n              !state.isLoading,\r\n        ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveSystemState(any())).called(1);\r\n      },\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits correct states when CheckSystemReadiness is called',\r\n      build: () => systemStateBloc,\r\n      seed: () => SystemStateState(\r\n        currentSystemState: testSystemState.data,\r\n      ),\r\n      act: (bloc) => bloc.add(CheckSystemReadiness()),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) => !state.isLoading && state.systemIssues.isEmpty,\r\n        ),\r\n      ],\r\n    );\r\n\r\n    blocTest<SystemStateBloc, SystemStateState>(\r\n      'emits correct states when UpdateSystemParameters succeeds',\r\n      setUp: () {\r\n        when(() => mockRepository.saveSystemState(any()))\r\n            .thenAnswer((_) async {});\r\n      },\r\n      build: () => systemStateBloc,\r\n      seed: () => SystemStateState(\r\n        currentSystemState: testSystemState.data,\r\n      ),\r\n      act: (bloc) => bloc.add(UpdateSystemParameters({\r\n        'component1': {'temperature': 26.0},\r\n      })),\r\n      expect: () => [\r\n        predicate<SystemStateState>(\r\n          (state) => state.isLoading,\r\n        ),\r\n        predicate<SystemStateState>(\r\n          (state) => !state.isLoading && state.lastStateUpdate != null,\r\n        ),\r\n      ],\r\n      verify: (_) {\r\n        verify(() => mockRepository.saveSystemState(any())).called(1);\r\n      },\r\n    );\r\n  });\r\n}"
        }
    ]
}