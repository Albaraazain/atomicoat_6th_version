{
    "sourceFile": "test/integration/safety_alarm_integration_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1734048944969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734048976424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n // test/integration/safety_alarm_integration_test.dart\r\n+import 'package:experiment_planner/blocs/alarm/repository/alarm_repository.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n+import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n+import 'package:experiment_planner/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n import '../../lib/blocs/safety/bloc/safety_bloc.dart';\r\n import '../../lib/blocs/alarm/bloc/alarm_bloc.dart';\r\n"
                },
                {
                    "date": 1734049033564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-// test/integration/safety_alarm_integration_test.dart\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_bloc.dart';\r\n+import 'package:experiment_planner/blocs/alarm/bloc/alarm_event.dart';\r\n import 'package:experiment_planner/blocs/alarm/repository/alarm_repository.dart';\r\n+import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/models/alarm.dart';\r\n import 'package:experiment_planner/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import '../../lib/blocs/safety/bloc/safety_bloc.dart';\r\n-import '../../lib/blocs/alarm/bloc/alarm_bloc.dart';\r\n-import '../../lib/modules/system_operation_also_main_module/models/safety_error.dart';\r\n-import '../../lib/modules/system_operation_also_main_module/models/alarm.dart';\r\n \r\n class MockSafetyRepository extends Mock implements SafetyRepository {}\r\n class MockAlarmRepository extends Mock implements AlarmRepository {}\r\n class MockAuthService extends Mock implements AuthService {}\r\n@@ -20,8 +20,17 @@\n   late MockSafetyRepository safetyRepository;\r\n   late MockAlarmRepository alarmRepository;\r\n   late MockAuthService authService;\r\n \r\n+  setUpAll(() {\r\n+    registerFallbackValue(SafetyError(\r\n+      id: 'dummy',\r\n+      description: 'dummy',\r\n+      severity: SafetyErrorSeverity.warning,\r\n+    ));\r\n+    registerFallbackValue(const Alarm(id: 'dummy', message: 'dummy'));\r\n+  });\r\n+\r\n   setUp(() {\r\n     safetyRepository = MockSafetyRepository();\r\n     alarmRepository = MockAlarmRepository();\r\n     authService = MockAuthService();\r\n@@ -46,9 +55,9 @@\n       description: 'Critical temperature',\r\n       severity: SafetyErrorSeverity.critical,\r\n     );\r\n \r\n-    when(() => safetyRepository.addSafetyError(safetyError))\r\n+    when(() => safetyRepository.addSafetyError(any()))\r\n         .thenAnswer((_) async {});\r\n     when(() => alarmRepository.addAlarm(any()))\r\n         .thenAnswer((_) async {});\r\n \r\n@@ -58,8 +67,8 @@\n     // Wait for processing\r\n     await Future.delayed(const Duration(milliseconds: 100));\r\n \r\n     // Assert\r\n-    verify(() => safetyRepository.addSafetyError(safetyError)).called(1);\r\n+    verify(() => safetyRepository.addSafetyError(any())).called(1);\r\n     verify(() => alarmRepository.addAlarm(any())).called(1);\r\n   });\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734049099342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,14 @@\n       id: 'dummy',\r\n       description: 'dummy',\r\n       severity: SafetyErrorSeverity.warning,\r\n     ));\r\n-    registerFallbackValue(const Alarm(id: 'dummy', message: 'dummy'));\r\n+    registerFallbackValue(Alarm(\r\n+      id: 'dummy',\r\n+      message: 'dummy',\r\n+      severity: AlarmSeverity.low,\r\n+      timestamp: DateTime.now(),\r\n+    ));\r\n   });\r\n \r\n   setUp(() {\r\n     safetyRepository = MockSafetyRepository();\r\n"
                },
                {
                    "date": 1734049112603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     ));\r\n     registerFallbackValue(Alarm(\r\n       id: 'dummy',\r\n       message: 'dummy',\r\n-      severity: AlarmSeverity.low,\r\n+      severity: AlarmSeverity.info,\r\n       timestamp: DateTime.now(),\r\n     ));\r\n   });\r\n \r\n"
                },
                {
                    "date": 1734376765552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,11 @@\n import 'package:experiment_planner/blocs/alarm/repository/alarm_repository.dart';\r\n import 'package:experiment_planner/blocs/safety/bloc/safety_bloc.dart';\r\n import 'package:experiment_planner/blocs/safety/bloc/safety_event.dart';\r\n import 'package:experiment_planner/blocs/safety/repository/safety_repository.dart';\r\n-import 'package:experiment_planner/modules/system_operation_also_main_module/models/safety_error.dart';\r\n+import 'package:experiment_planner/features/safety/models/safety_error.dart';\r\n import 'package:experiment_planner/features/alarms/models/alarm.dart';\r\n-import 'package:experiment_planner/services/auth_service.dart';\r\n+import 'package:experiment_planner/features/auth/services/auth_service.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n \r\n class MockSafetyRepository extends Mock implements SafetyRepository {}\r\n"
                }
            ],
            "date": 1734048944969,
            "name": "Commit-0",
            "content": "// test/integration/safety_alarm_integration_test.dart\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport '../../lib/blocs/safety/bloc/safety_bloc.dart';\r\nimport '../../lib/blocs/alarm/bloc/alarm_bloc.dart';\r\nimport '../../lib/modules/system_operation_also_main_module/models/safety_error.dart';\r\nimport '../../lib/modules/system_operation_also_main_module/models/alarm.dart';\r\n\r\nclass MockSafetyRepository extends Mock implements SafetyRepository {}\r\nclass MockAlarmRepository extends Mock implements AlarmRepository {}\r\nclass MockAuthService extends Mock implements AuthService {}\r\n\r\nvoid main() {\r\n  late SafetyBloc safetyBloc;\r\n  late AlarmBloc alarmBloc;\r\n  late MockSafetyRepository safetyRepository;\r\n  late MockAlarmRepository alarmRepository;\r\n  late MockAuthService authService;\r\n\r\n  setUp(() {\r\n    safetyRepository = MockSafetyRepository();\r\n    alarmRepository = MockAlarmRepository();\r\n    authService = MockAuthService();\r\n\r\n    alarmBloc = AlarmBloc(alarmRepository);\r\n    safetyBloc = SafetyBloc(\r\n      repository: safetyRepository,\r\n      authService: authService,\r\n      alarmBloc: alarmBloc,\r\n    );\r\n  });\r\n\r\n  tearDown(() {\r\n    safetyBloc.close();\r\n    alarmBloc.close();\r\n  });\r\n\r\n  test('Safety error triggers alarm creation', () async {\r\n    // Arrange\r\n    final safetyError = SafetyError(\r\n      id: 'test-1',\r\n      description: 'Critical temperature',\r\n      severity: SafetyErrorSeverity.critical,\r\n    );\r\n\r\n    when(() => safetyRepository.addSafetyError(safetyError))\r\n        .thenAnswer((_) async {});\r\n    when(() => alarmRepository.addAlarm(any()))\r\n        .thenAnswer((_) async {});\r\n\r\n    // Act\r\n    safetyBloc.add(SafetyErrorDetected(safetyError));\r\n\r\n    // Wait for processing\r\n    await Future.delayed(const Duration(milliseconds: 100));\r\n\r\n    // Assert\r\n    verify(() => safetyRepository.addSafetyError(safetyError)).called(1);\r\n    verify(() => alarmRepository.addAlarm(any())).called(1);\r\n  });\r\n}"
        }
    ]
}