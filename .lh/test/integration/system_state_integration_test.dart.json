{
    "sourceFile": "test/integration/system_state_integration_test.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1734047315095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734047367533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n // test/integration/system_state_integration_test.dart\r\n \r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n+import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n+import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import 'package:mocktail/mocktail.dart';\r\n-import 'package:your_app_name/blocs/system_state/bloc/system_state_bloc.dart';\r\n-import 'package:your_app_name/blocs/system_state/repository/system_state_repository.dart';\r\n import '../helpers/system_state_test_helper.dart';\r\n \r\n void main() {\r\n   group('SystemState Integration', () {\r\n"
                },
                {
                    "date": 1734047478743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,18 @@\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n-import 'package:mocktail/mocktail.dart';\r\n import '../helpers/system_state_test_helper.dart';\r\n \r\n void main() {\r\n   group('SystemState Integration', () {\r\n     late SystemStateBloc systemStateBloc;\r\n     late SystemStateRepository repository;\r\n \r\n     setUp(() async {\r\n-      // Use real repository with test Firestore instance\r\n-      repository = SystemStateRepository(\r\n-        firestore: await initializeTestFirestore(),\r\n-        userId: 'test-user',\r\n-      );\r\n+      // Initialize repository without named parameters\r\n+      repository = SystemStateRepository();\r\n       systemStateBloc = SystemStateBloc(repository);\r\n     });\r\n \r\n     tearDown(() async {\r\n"
                },
                {
                    "date": 1734376765352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_bloc.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_event.dart';\r\n import 'package:experiment_planner/blocs/system_state/bloc/system_state_state.dart';\r\n-import 'package:experiment_planner/repositories/system_state_repository.dart';\r\n+import 'package:experiment_planner/features/system/repositories/system_state_repository.dart';\r\n import 'package:flutter_test/flutter_test.dart';\r\n import '../helpers/system_state_test_helper.dart';\r\n \r\n void main() {\r\n"
                }
            ],
            "date": 1734047315095,
            "name": "Commit-0",
            "content": "// test/integration/system_state_integration_test.dart\r\n\r\nimport 'package:flutter_test/flutter_test.dart';\r\nimport 'package:mocktail/mocktail.dart';\r\nimport 'package:your_app_name/blocs/system_state/bloc/system_state_bloc.dart';\r\nimport 'package:your_app_name/blocs/system_state/repository/system_state_repository.dart';\r\nimport '../helpers/system_state_test_helper.dart';\r\n\r\nvoid main() {\r\n  group('SystemState Integration', () {\r\n    late SystemStateBloc systemStateBloc;\r\n    late SystemStateRepository repository;\r\n\r\n    setUp(() async {\r\n      // Use real repository with test Firestore instance\r\n      repository = SystemStateRepository(\r\n        firestore: await initializeTestFirestore(),\r\n        userId: 'test-user',\r\n      );\r\n      systemStateBloc = SystemStateBloc(repository);\r\n    });\r\n\r\n    tearDown(() async {\r\n      await cleanupTestFirestore();\r\n      systemStateBloc.close();\r\n    });\r\n\r\n    test('Full system lifecycle test', () async {\r\n      // Initialize system\r\n      systemStateBloc.add(InitializeSystem());\r\n      await expectLater(\r\n        systemStateBloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>(\r\n            (state) => state.status == SystemOperationalStatus.initializing,\r\n          ),\r\n          predicate<SystemStateState>(\r\n            (state) => state.status == SystemOperationalStatus.ready,\r\n          ),\r\n        ]),\r\n      );\r\n\r\n      // Start system\r\n      systemStateBloc.add(StartSystem());\r\n      await expectLater(\r\n        systemStateBloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>(\r\n            (state) => state.isLoading,\r\n          ),\r\n          predicate<SystemStateState>(\r\n            (state) =>\r\n                state.status == SystemOperationalStatus.running &&\r\n                state.isSystemRunning,\r\n          ),\r\n        ]),\r\n      );\r\n\r\n      // Update parameters\r\n      systemStateBloc.add(UpdateSystemParameters({\r\n        'component1': {'temperature': 26.0},\r\n      }));\r\n      await expectLater(\r\n        systemStateBloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>(\r\n            (state) => state.isLoading,\r\n          ),\r\n          predicate<SystemStateState>(\r\n            (state) => !state.isLoading &&\r\n                (state.currentSystemState['components']['component1']\r\n                    ['currentValues']['temperature'] as num) == 26.0,\r\n          ),\r\n        ]),\r\n      );\r\n\r\n      // Stop system\r\n      systemStateBloc.add(StopSystem());\r\n      await expectLater(\r\n        systemStateBloc.stream,\r\n        emitsInOrder([\r\n          predicate<SystemStateState>(\r\n            (state) => state.isLoading,\r\n          ),\r\n          predicate<SystemStateState>(\r\n            (state) =>\r\n                state.status == SystemOperationalStatus.ready &&\r\n                !state.isSystemRunning,\r\n          ),\r\n        ]),\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\n// Helper functions for test Firestore setup\r\nFuture<FirebaseFirestore> initializeTestFirestore() async {\r\n  // Implementation depends on your testing setup\r\n  throw UnimplementedError('Implement test Firestore setup');\r\n}\r\n\r\nFuture<void> cleanupTestFirestore() async {\r\n  // Implementation depends on your testing setup\r\n  throw UnimplementedError('Implement test Firestore cleanup');\r\n}"
        }
    ]
}